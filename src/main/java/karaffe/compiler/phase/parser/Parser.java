//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------
package karaffe.compiler.phase.parser;

import karaffe.compiler.phase.parser.Lexer.SymInfo;
import karaffe.compiler.tree.AmbiguousName;
import karaffe.compiler.tree.CompileUnit;
import karaffe.compiler.tree.ErrorNode;
import karaffe.compiler.tree.Identifier;
import karaffe.compiler.tree.PackageDecl;

/** CUP v0.11b 20150226 (SVN rev 63) generated Parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    public Parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
                "\000\011\000\002\003\003\000\002\002\004\000\002\005"
                + "\004\000\002\005\004\000\002\005\004\000\002\005\005"
                + "\000\002\002\005\000\002\002\003\000\002\004\003"});

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
                "\000\017\000\006\003\005\006\007\001\002\000\004\002"
                + "\001\001\002\000\004\006\021\001\002\000\004\002\020"
                + "\001\002\000\006\003\010\004\012\001\002\000\004\002"
                + "\ufffd\001\002\000\006\002\uffff\005\015\001\002\000\010"
                + "\002\ufff9\003\014\005\ufff9\001\002\000\006\002\ufffa\005"
                + "\ufffa\001\002\000\004\002\ufffc\001\002\000\004\004\016"
                + "\001\002\000\006\002\ufff9\005\ufff9\001\002\000\006\002"
                + "\ufffb\005\ufffb\001\002\000\004\002\000\001\002\000\004"
                + "\002\ufffe\001\002"});

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
                "\000\017\000\006\003\005\005\003\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\006\002\010"
                + "\004\012\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
                + "\004\016\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001"});

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    public Parser(java.io.Reader reader) {
        super(new Lexer(reader));
    }

    public static void main(String[] args) throws java.lang.Exception {
        if (args.length != 1) {
            System.out.println("Usage: $command filename");
        }
        Parser parser = new Parser(new java.io.FileReader(args[0]));
        parser.parse();
    }

    public CompileUnit compileUnit() throws Exception {
        return (CompileUnit) this.parse().value;
    }

    /** Cup generated class to encapsulate user supplied action code. */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {

        private final Parser parser;

        /** Constructor */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // CompileUnit ::= PackageDecl
                {
                    Object RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new CompileUnit((PackageDecl) p);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompileUnit", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // $START ::= CompileUnit EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // PackageDecl ::= PACKAGE AmbiguousName
                {
                    Object RESULT = null;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object name = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PackageDecl((AmbiguousName) name);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageDecl", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // PackageDecl ::= error PACKAGE
                {
                    Object RESULT = null;
                    int errleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int errright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object err = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new ErrorNode("PackageDecl.Before.Package", err, p);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageDecl", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // PackageDecl ::= PACKAGE error
                {
                    Object RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int errleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int errright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object err = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new ErrorNode("PackageDecl.After.Package", p, err);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageDecl", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // PackageDecl ::= PACKAGE IDENTIFIER error
                {
                    Object RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int errleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int errright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object err = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new ErrorNode("PackageDecl.After.Identifier", p, id, err);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageDecl", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // AmbiguousName ::= AmbiguousName DOT Identifier
                {
                    Object RESULT = null;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Object name = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new AmbiguousName((AmbiguousName) name, (Identifier) id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AmbiguousName", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // AmbiguousName ::= Identifier
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new AmbiguousName((Identifier) id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AmbiguousName", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // Identifier ::= IDENTIFIER
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    SymInfo symInfo = (SymInfo) id;
                    RESULT = new Identifier(symInfo, (String) symInfo.value().get());

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        } /* end of method */


        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
