//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------
package karaffe.compiler;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
 */
@SuppressWarnings({ "rawtypes" })
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    public Parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][]
                                     = unpackFromStrings(new String[]{
            "\000\151\000\002\002\004\000\002\063\005\000\002\061"
            + "\004\000\002\061\002\000\002\041\004\000\002\041\002"
            + "\000\002\034\003\000\002\034\002\000\002\033\004\000"
            + "\002\033\003\000\002\026\004\000\002\004\011\000\002"
            + "\030\003\000\002\030\002\000\002\027\004\000\002\027"
            + "\003\000\002\002\004\000\002\043\003\000\002\043\002"
            + "\000\002\042\004\000\002\042\003\000\002\055\003\000"
            + "\002\055\003\000\002\055\003\000\002\055\003\000\002"
            + "\055\003\000\002\055\003\000\002\005\011\000\002\047"
            + "\004\000\002\047\002\000\002\064\003\000\002\064\003"
            + "\000\002\064\003\000\002\064\003\000\002\064\003\000"
            + "\002\020\011\000\002\020\003\000\002\023\007\000\002"
            + "\022\004\000\002\022\002\000\002\021\007\000\002\021"
            + "\003\000\002\053\015\000\002\054\006\000\002\025\003"
            + "\000\002\025\002\000\002\046\003\000\002\046\002\000"
            + "\002\045\005\000\002\045\003\000\002\062\004\000\002"
            + "\044\004\000\002\044\002\000\002\056\003\000\002\056"
            + "\003\000\002\056\003\000\002\056\003\000\002\052\007"
            + "\000\002\035\003\000\002\035\005\000\002\024\003\000"
            + "\002\006\003\000\002\006\003\000\002\006\003\000\002"
            + "\006\003\000\002\017\005\000\002\007\005\000\002\007"
            + "\005\000\002\007\003\000\002\010\005\000\002\010\005"
            + "\000\002\010\003\000\002\013\003\000\002\012\003\000"
            + "\002\012\004\000\002\012\005\000\002\012\003\000\002"
            + "\012\003\000\002\012\003\000\002\012\003\000\002\014"
            + "\003\000\002\014\003\000\002\011\010\000\002\011\006"
            + "\000\002\032\003\000\002\032\002\000\002\031\005\000"
            + "\002\031\003\000\002\003\003\000\002\051\003\000\002"
            + "\051\002\000\002\050\004\000\002\040\003\000\002\040"
            + "\002\000\002\037\005\000\002\036\003\000\002\036\005"
            + "\000\002\015\007\000\002\015\005\000\002\015\013\000"
            + "\002\015\007\000\002\016\005\000\002\016\007\000\002"
            + "\057\004\000\002\060\004" });

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table
                                     = unpackFromStrings(new String[]{
            "\000\254\000\030\002\ufffe\004\ufffe\005\ufffe\006\ufffe\016"
            + "\ufffe\021\ufffe\027\006\031\ufffe\032\ufffe\033\ufffe\042\ufffe"
            + "\001\002\000\026\002\ufffc\004\ufffc\005\ufffc\006\ufffc\016"
            + "\ufffc\021\ufffc\031\ufffc\032\ufffc\033\ufffc\042\ufffc\001\002"
            + "\000\004\002\014\001\002\000\004\046\010\001\002\000"
            + "\030\002\uffc7\004\uffc7\005\uffc7\006\uffc7\012\uffc7\016\uffc7"
            + "\021\uffc7\031\uffc7\032\uffc7\033\uffc7\042\uffc7\001\002\000"
            + "\112\002\uffc5\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5"
            + "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016"
            + "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5"
            + "\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034"
            + "\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5"
            + "\044\uffc5\046\uffc5\047\uffc5\050\uffc5\001\002\000\030\002"
            + "\uffff\004\uffff\005\uffff\006\uffff\012\012\016\uffff\021\uffff"
            + "\031\uffff\032\uffff\033\uffff\042\uffff\001\002\000\004\046"
            + "\010\001\002\000\030\002\uffc6\004\uffc6\005\uffc6\006\uffc6"
            + "\012\uffc6\016\uffc6\021\uffc6\031\uffc6\032\uffc6\033\uffc6\042"
            + "\uffc6\001\002\000\004\002\001\001\002\000\026\002\ufffa"
            + "\004\ufff4\005\023\006\ufff4\016\ufff4\021\026\031\ufff4\032"
            + "\ufff4\033\ufff4\042\ufff4\001\002\000\004\002\000\001\002"
            + "\000\024\004\ufff2\005\023\006\ufff2\011\ufff2\016\ufff2\031"
            + "\ufff2\032\ufff2\033\ufff2\042\ufff2\001\002\000\022\004\ufff5"
            + "\006\ufff5\011\ufff5\016\ufff5\031\ufff5\032\ufff5\033\ufff5\042"
            + "\ufff5\001\002\000\020\004\032\006\uffef\016\040\031\037"
            + "\032\036\033\034\042\035\001\002\000\024\002\ufff8\004"
            + "\ufff8\005\ufff8\006\ufff8\016\ufff8\031\ufff8\032\ufff8\033\ufff8"
            + "\042\ufff8\001\002\000\004\046\010\001\002\000\026\002"
            + "\ufffd\004\ufffd\005\ufffd\006\ufffd\016\ufffd\021\ufffd\031\ufffd"
            + "\032\ufffd\033\ufffd\042\ufffd\001\002\000\024\002\ufffb\004"
            + "\ufff4\005\023\006\ufff4\016\ufff4\031\ufff4\032\ufff4\033\ufff4"
            + "\042\ufff4\001\002\000\004\046\010\001\002\000\030\002"
            + "\ufff7\004\ufff7\005\ufff7\006\ufff7\012\012\016\ufff7\021\ufff7"
            + "\031\ufff7\032\ufff7\033\ufff7\042\ufff7\001\002\000\024\002"
            + "\ufff9\004\ufff9\005\ufff9\006\ufff9\016\ufff9\031\ufff9\032\ufff9"
            + "\033\ufff9\042\ufff9\001\002\000\024\004\ufff1\005\ufff1\006"
            + "\ufff1\011\ufff1\016\ufff1\031\ufff1\032\ufff1\033\ufff1\042\ufff1"
            + "\001\002\000\024\004\uffe9\006\uffe9\011\uffe9\016\uffe9\022"
            + "\uffe9\031\uffe9\032\uffe9\033\uffe9\042\uffe9\001\002\000\004"
            + "\006\ufff0\001\002\000\024\004\uffec\006\uffec\011\uffec\016"
            + "\uffec\022\uffec\031\uffec\032\uffec\033\uffec\042\uffec\001\002"
            + "\000\024\004\uffe8\006\uffe8\011\uffe8\016\uffe8\022\uffe8\031"
            + "\uffe8\032\uffe8\033\uffe8\042\uffe8\001\002\000\024\004\uffeb"
            + "\006\uffeb\011\uffeb\016\uffeb\022\uffeb\031\uffeb\032\uffeb\033"
            + "\uffeb\042\uffeb\001\002\000\024\004\uffea\006\uffea\011\uffea"
            + "\016\uffea\022\uffea\031\uffea\032\uffea\033\uffea\042\uffea\001"
            + "\002\000\024\004\uffe7\006\uffe7\011\uffe7\016\uffe7\022\uffe7"
            + "\031\uffe7\032\uffe7\033\uffe7\042\uffe7\001\002\000\004\006"
            + "\044\001\002\000\024\004\032\006\uffed\011\uffed\016\040"
            + "\022\uffed\031\037\032\036\033\034\042\035\001\002\000"
            + "\010\006\uffee\011\uffee\022\uffee\001\002\000\004\046\010"
            + "\001\002\000\004\022\046\001\002\000\032\003\uffe4\004"
            + "\uffe4\005\uffe4\006\uffe4\011\uffe4\016\uffe4\025\uffe4\031\uffe4"
            + "\032\uffe4\033\uffe4\034\uffe4\042\uffe4\001\002\000\032\003"
            + "\057\004\ufff4\005\023\006\ufff4\011\ufff4\016\ufff4\025\054"
            + "\031\ufff4\032\ufff4\033\ufff4\034\060\042\ufff4\001\002\000"
            + "\032\003\uffe3\004\uffe3\005\uffe3\006\uffe3\011\uffe3\016\uffe3"
            + "\025\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\042\uffe3\001"
            + "\002\000\032\003\uffe2\004\uffe2\005\uffe2\006\uffe2\011\uffe2"
            + "\016\uffe2\025\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\042"
            + "\uffe2\001\002\000\032\003\uffe1\004\uffe1\005\uffe1\006\uffe1"
            + "\011\uffe1\016\uffe1\025\uffe1\031\uffe1\032\uffe1\033\uffe1\034"
            + "\uffe1\042\uffe1\001\002\000\022\004\032\006\uffef\011\uffef"
            + "\016\040\031\037\032\036\033\034\042\035\001\002\000"
            + "\004\022\062\001\002\000\032\003\uffe5\004\uffe5\005\uffe5"
            + "\006\uffe5\011\uffe5\016\uffe5\025\uffe5\031\uffe5\032\uffe5\033"
            + "\uffe5\034\uffe5\042\uffe5\001\002\000\032\003\uffe0\004\uffe0"
            + "\005\uffe0\006\uffe0\011\uffe0\016\uffe0\025\uffe0\031\uffe0\032"
            + "\uffe0\033\uffe0\034\uffe0\042\uffe0\001\002\000\032\003\uffdd"
            + "\004\uffdd\005\uffdd\006\uffdd\011\uffdd\016\uffdd\025\uffdd\031"
            + "\uffdd\032\uffdd\033\uffdd\034\uffdd\042\uffdd\001\002\000\024"
            + "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\016\ufff6\031\ufff6\032"
            + "\ufff6\033\ufff6\042\ufff6\001\002\000\032\003\uffdf\004\uffdf"
            + "\005\uffdf\006\uffdf\011\uffdf\016\uffdf\025\uffdf\031\uffdf\032"
            + "\uffdf\033\uffdf\034\uffdf\042\uffdf\001\002\000\032\011\uffcd"
            + "\015\uffcd\017\uffcd\020\uffcd\024\uffcd\026\uffcd\034\uffcd\043"
            + "\uffcd\044\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000\032"
            + "\011\106\015\110\017\072\020\101\024\102\026\111\034"
            + "\067\043\076\044\073\046\010\047\104\050\103\001\002"
            + "\000\066\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011"
            + "\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\022\uffc4"
            + "\024\uffc4\025\uffc4\026\uffc4\031\uffc4\032\uffc4\033\uffc4\034"
            + "\uffc4\036\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4\047\uffc4"
            + "\050\uffc4\001\002\000\076\003\uffb2\004\uffb2\005\uffb2\006"
            + "\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2"
            + "\017\uffb2\020\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\030"
            + "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\040\uffb2"
            + "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\047\uffb2\050"
            + "\uffb2\001\002\000\032\011\uffca\015\uffca\017\uffca\020\uffca"
            + "\024\uffca\026\uffca\034\uffca\043\uffca\044\uffca\046\uffca\047"
            + "\uffca\050\uffca\001\002\000\032\003\uffd6\004\uffd6\005\uffd6"
            + "\006\uffd6\011\uffd6\016\uffd6\025\uffd6\031\uffd6\032\uffd6\033"
            + "\uffd6\034\uffd6\042\uffd6\001\002\000\074\003\uffbd\004\uffbd"
            + "\005\uffbd\006\uffbd\007\uffbd\011\uffbd\013\uffbd\015\uffbd\016"
            + "\uffbd\017\uffbd\020\uffbd\022\uffbd\024\uffbd\025\uffbd\026\uffbd"
            + "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\036\uffbd\040"
            + "\206\041\205\042\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd"
            + "\050\uffbd\001\002\000\070\003\uffc1\004\uffc1\005\uffc1\006"
            + "\uffc1\007\uffc1\011\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1"
            + "\020\uffc1\022\uffc1\024\uffc1\025\uffc1\026\203\030\202\031"
            + "\uffc1\032\uffc1\033\uffc1\034\uffc1\036\uffc1\042\uffc1\043\uffc1"
            + "\044\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000\004\046"
            + "\010\001\002\000\024\015\110\020\101\024\102\026\111"
            + "\043\076\044\073\046\010\047\104\050\103\001\002\000"
            + "\076\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9"
            + "\012\134\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\022"
            + "\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9"
            + "\033\uffb9\034\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\043"
            + "\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\001\002\000\032"
            + "\011\uffce\015\uffce\017\uffce\020\uffce\024\uffce\026\uffce\034"
            + "\uffce\043\uffce\044\uffce\046\uffce\047\uffce\050\uffce\001\002"
            + "\000\076\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011"
            + "\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4"
            + "\022\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4\032"
            + "\uffb4\033\uffb4\034\uffb4\036\uffb4\040\uffb4\041\uffb4\042\uffb4"
            + "\043\uffb4\044\uffb4\046\uffb4\047\uffb4\050\uffb4\001\002\000"
            + "\032\011\uffcb\015\uffcb\017\uffcb\020\uffcb\024\uffcb\026\uffcb"
            + "\034\uffcb\043\uffcb\044\uffcb\046\uffcb\047\uffcb\050\uffcb\001"
            + "\002\000\074\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba"
            + "\011\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\022"
            + "\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba"
            + "\033\uffba\034\uffba\036\uffba\040\uffba\041\uffba\042\uffba\043"
            + "\uffba\044\uffba\046\uffba\047\uffba\050\uffba\001\002\000\024"
            + "\015\110\020\101\024\102\026\111\043\076\044\073\046"
            + "\010\047\104\050\103\001\002\000\024\015\110\020\101"
            + "\024\102\026\111\043\076\044\073\046\010\047\104\050"
            + "\103\001\002\000\076\003\uffb0\004\uffb0\005\uffb0\006\uffb0"
            + "\007\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0\017"
            + "\uffb0\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0"
            + "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\040\uffb0\041"
            + "\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0"
            + "\001\002\000\076\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007"
            + "\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016\uffb1\017\uffb1"
            + "\020\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031"
            + "\uffb1\032\uffb1\033\uffb1\034\uffb1\036\uffb1\040\uffb1\041\uffb1"
            + "\042\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\001"
            + "\002\000\032\011\uffcc\015\uffcc\017\uffcc\020\uffcc\024\uffcc"
            + "\026\uffcc\034\uffcc\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050"
            + "\uffcc\001\002\000\004\046\010\001\002\000\032\011\uffc9"
            + "\015\uffc9\017\uffc9\020\uffc9\024\uffc9\026\uffc9\034\uffc9\043"
            + "\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000\076"
            + "\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\012"
            + "\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3"
            + "\024\uffb3\025\uffb3\026\uffb3\030\uffb3\031\uffb3\032\uffb3\033"
            + "\uffb3\034\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3"
            + "\044\uffb3\046\uffb3\047\uffb3\050\uffb3\001\002\000\020\015"
            + "\110\024\102\026\111\043\076\046\010\047\104\050\103"
            + "\001\002\000\046\010\117\011\uffb5\012\uffb5\014\116\015"
            + "\uffb5\017\uffb5\020\uffb5\024\120\026\uffb5\030\uffb5\034\uffb5"
            + "\040\uffb5\041\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\050"
            + "\uffb5\001\002\000\066\003\uffc2\004\uffc2\005\uffc2\006\uffc2"
            + "\007\uffc2\011\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2\020"
            + "\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2\031\uffc2\032\uffc2"
            + "\033\uffc2\034\uffc2\036\uffc2\042\uffc2\043\uffc2\044\uffc2\046"
            + "\uffc2\047\uffc2\050\uffc2\001\002\000\076\003\uffb8\004\uffb8"
            + "\005\uffb8\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\015"
            + "\uffb8\016\uffb8\017\uffb8\020\uffb8\022\uffb8\024\uffb8\025\uffb8"
            + "\026\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\036"
            + "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8"
            + "\047\uffb8\050\uffb8\001\002\000\066\003\uffc3\004\uffc3\005"
            + "\uffc3\006\uffc3\007\uffc3\011\uffc3\013\uffc3\015\uffc3\016\uffc3"
            + "\017\uffc3\020\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3\031"
            + "\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\042\uffc3\043\uffc3"
            + "\044\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000\024\015"
            + "\110\020\101\024\102\026\111\043\076\044\073\046\010"
            + "\047\104\050\103\001\002\000\032\011\uff99\015\uff99\017"
            + "\uff99\020\uff99\024\uff99\026\uff99\034\uff99\043\uff99\044\uff99"
            + "\046\uff99\047\uff99\050\uff99\001\002\000\026\015\110\020"
            + "\101\024\102\026\111\036\uffac\043\076\044\073\046\010"
            + "\047\104\050\103\001\002\000\006\007\uffa9\036\uffa9\001"
            + "\002\000\004\036\130\001\002\000\006\007\126\036\uffaa"
            + "\001\002\000\100\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007"
            + "\uffb5\011\uffb5\012\uffb5\013\uffb5\014\116\015\uffb5\016\uffb5"
            + "\017\uffb5\020\uffb5\022\uffb5\024\120\025\uffb5\026\uffb5\030"
            + "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\040\uffb5"
            + "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\050"
            + "\uffb5\001\002\000\004\036\uffad\001\002\000\024\015\110"
            + "\020\101\024\102\026\111\043\076\044\073\046\010\047"
            + "\104\050\103\001\002\000\004\036\uffab\001\002\000\076"
            + "\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\012"
            + "\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020\uffae\022\uffae"
            + "\024\uffae\025\uffae\026\uffae\030\uffae\031\uffae\032\uffae\033"
            + "\uffae\034\uffae\036\uffae\040\uffae\041\uffae\042\uffae\043\uffae"
            + "\044\uffae\046\uffae\047\uffae\050\uffae\001\002\000\066\003"
            + "\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\013\uffc0"
            + "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\022\uffc0\024\uffc0\025"
            + "\uffc0\026\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0"
            + "\042\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0\001"
            + "\002\000\076\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5"
            + "\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020"
            + "\uffb5\022\uffb5\024\120\025\uffb5\026\uffb5\030\uffb5\031\uffb5"
            + "\032\uffb5\033\uffb5\034\uffb5\036\uffb5\040\uffb5\041\uffb5\042"
            + "\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\050\uffb5\001\002"
            + "\000\076\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011"
            + "\uffb7\012\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7"
            + "\022\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\032"
            + "\uffb7\033\uffb7\034\uffb7\036\uffb7\040\uffb7\041\uffb7\042\uffb7"
            + "\043\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\001\002\000"
            + "\004\046\010\001\002\000\004\024\136\001\002\000\026"
            + "\015\110\020\101\024\102\026\111\036\uffac\043\076\044"
            + "\073\046\010\047\104\050\103\001\002\000\004\036\140"
            + "\001\002\000\076\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007"
            + "\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf"
            + "\020\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031"
            + "\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\040\uffaf\041\uffaf"
            + "\042\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\001"
            + "\002\000\004\046\010\001\002\000\014\007\uffa4\014\uffa4"
            + "\022\uffa4\023\150\036\uffa4\001\002\000\004\014\144\001"
            + "\002\000\024\015\110\020\101\024\102\026\111\043\076"
            + "\044\073\046\010\047\104\050\103\001\002\000\032\011"
            + "\uffc8\015\uffc8\017\uffc8\020\uffc8\024\uffc8\026\uffc8\034\uffc8"
            + "\043\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000"
            + "\012\007\uffa5\014\uffa5\022\uffa5\036\uffa5\001\002\000\012"
            + "\007\uffa6\014\uffa6\022\uffa6\036\uffa6\001\002\000\004\046"
            + "\010\001\002\000\006\007\153\035\154\001\002\000\006"
            + "\007\uffa2\035\uffa2\001\002\000\004\046\010\001\002\000"
            + "\012\007\uffa3\014\uffa3\022\uffa3\036\uffa3\001\002\000\006"
            + "\007\uffa1\035\uffa1\001\002\000\004\036\157\001\002\000"
            + "\076\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6"
            + "\012\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\022"
            + "\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6"
            + "\033\uffb6\034\uffb6\036\uffb6\040\uffb6\041\uffb6\042\uffb6\043"
            + "\uffb6\044\uffb6\046\uffb6\047\uffb6\050\uffb6\001\002\000\026"
            + "\015\110\020\101\022\162\024\102\026\111\043\076\044"
            + "\073\046\010\047\104\050\103\001\002\000\066\003\uff9f"
            + "\004\uff9f\005\uff9f\006\uff9f\007\uff9f\011\uff9f\013\171\015"
            + "\uff9f\016\uff9f\017\uff9f\020\uff9f\022\uff9f\024\uff9f\025\uff9f"
            + "\026\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\036\uff9f\042"
            + "\uff9f\043\uff9f\044\uff9f\046\uff9f\047\uff9f\050\uff9f\001\002"
            + "\000\032\011\uffcd\015\uffcd\017\uffcd\020\uffcd\024\uffcd\026"
            + "\uffcd\034\uffcd\043\uffcd\044\uffcd\046\uffcd\047\uffcd\050\uffcd"
            + "\001\002\000\032\011\106\015\110\017\072\020\101\024"
            + "\102\026\111\034\164\043\076\044\073\046\010\047\104"
            + "\050\103\001\002\000\066\003\uffa0\004\uffa0\005\uffa0\006"
            + "\uffa0\007\uffa0\011\uffa0\013\165\015\uffa0\016\uffa0\017\uffa0"
            + "\020\uffa0\022\uffa0\024\uffa0\025\uffa0\026\uffa0\031\uffa0\032"
            + "\uffa0\033\uffa0\034\uffa0\036\uffa0\042\uffa0\043\uffa0\044\uffa0"
            + "\046\uffa0\047\uffa0\050\uffa0\001\002\000\004\022\166\001"
            + "\002\000\032\011\uffcd\015\uffcd\017\uffcd\020\uffcd\024\uffcd"
            + "\026\uffcd\034\uffcd\043\uffcd\044\uffcd\046\uffcd\047\uffcd\050"
            + "\uffcd\001\002\000\032\011\106\015\110\017\072\020\101"
            + "\024\102\026\111\034\170\043\076\044\073\046\010\047"
            + "\104\050\103\001\002\000\066\003\uff9e\004\uff9e\005\uff9e"
            + "\006\uff9e\007\uff9e\011\uff9e\013\uff9e\015\uff9e\016\uff9e\017"
            + "\uff9e\020\uff9e\022\uff9e\024\uff9e\025\uff9e\026\uff9e\031\uff9e"
            + "\032\uff9e\033\uff9e\034\uff9e\036\uff9e\042\uff9e\043\uff9e\044"
            + "\uff9e\046\uff9e\047\uff9e\050\uff9e\001\002\000\024\015\110"
            + "\020\101\024\102\026\111\043\076\044\073\046\010\047"
            + "\104\050\103\001\002\000\066\003\uff9d\004\uff9d\005\uff9d"
            + "\006\uff9d\007\uff9d\011\uff9d\013\uff9d\015\uff9d\016\uff9d\017"
            + "\uff9d\020\uff9d\022\uff9d\024\uff9d\025\uff9d\026\uff9d\031\uff9d"
            + "\032\uff9d\033\uff9d\034\uff9d\036\uff9d\042\uff9d\043\uff9d\044"
            + "\uff9d\046\uff9d\047\uff9d\050\uff9d\001\002\000\026\015\110"
            + "\020\101\022\175\024\102\026\111\043\076\044\073\046"
            + "\010\047\104\050\103\001\002\000\066\003\uff9c\004\uff9c"
            + "\005\uff9c\006\uff9c\007\uff9c\011\uff9c\013\uff9c\015\uff9c\016"
            + "\uff9c\017\uff9c\020\uff9c\022\uff9c\024\uff9c\025\uff9c\026\uff9c"
            + "\031\uff9c\032\uff9c\033\uff9c\034\uff9c\036\uff9c\042\uff9c\043"
            + "\uff9c\044\uff9c\046\uff9c\047\uff9c\050\uff9c\001\002\000\032"
            + "\011\uffcd\015\uffcd\017\uffcd\020\uffcd\024\uffcd\026\uffcd\034"
            + "\uffcd\043\uffcd\044\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002"
            + "\000\032\011\106\015\110\017\072\020\101\024\102\026"
            + "\111\034\177\043\076\044\073\046\010\047\104\050\103"
            + "\001\002\000\066\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007"
            + "\uff9b\011\uff9b\013\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b"
            + "\022\uff9b\024\uff9b\025\uff9b\026\uff9b\031\uff9b\032\uff9b\033"
            + "\uff9b\034\uff9b\036\uff9b\042\uff9b\043\uff9b\044\uff9b\046\uff9b"
            + "\047\uff9b\050\uff9b\001\002\000\004\010\117\001\002\000"
            + "\032\011\uff9a\015\uff9a\017\uff9a\020\uff9a\024\uff9a\026\uff9a"
            + "\034\uff9a\043\uff9a\044\uff9a\046\uff9a\047\uff9a\050\uff9a\001"
            + "\002\000\020\015\110\024\102\026\111\043\076\046\010"
            + "\047\104\050\103\001\002\000\020\015\110\024\102\026"
            + "\111\043\076\046\010\047\104\050\103\001\002\000\074"
            + "\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\013"
            + "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\022\uffbe\024\uffbe"
            + "\025\uffbe\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034"
            + "\uffbe\036\uffbe\040\206\041\205\042\uffbe\043\uffbe\044\uffbe"
            + "\046\uffbe\047\uffbe\050\uffbe\001\002\000\020\015\110\024"
            + "\102\026\111\043\076\046\010\047\104\050\103\001\002"
            + "\000\020\015\110\024\102\026\111\043\076\046\010\047"
            + "\104\050\103\001\002\000\074\003\uffbb\004\uffbb\005\uffbb"
            + "\006\uffbb\007\uffbb\011\uffbb\013\uffbb\015\uffbb\016\uffbb\017"
            + "\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\030\uffbb"
            + "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\040\uffbb\041"
            + "\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb"
            + "\001\002\000\074\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007"
            + "\uffbc\011\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc"
            + "\022\uffbc\024\uffbc\025\uffbc\026\uffbc\030\uffbc\031\uffbc\032"
            + "\uffbc\033\uffbc\034\uffbc\036\uffbc\040\uffbc\041\uffbc\042\uffbc"
            + "\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\001\002\000"
            + "\074\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf"
            + "\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\022\uffbf\024"
            + "\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf"
            + "\034\uffbf\036\uffbf\040\206\041\205\042\uffbf\043\uffbf\044"
            + "\uffbf\046\uffbf\047\uffbf\050\uffbf\001\002\000\010\006\ufff0"
            + "\011\ufff0\022\244\001\002\000\006\006\215\011\214\001"
            + "\002\000\004\046\010\001\002\000\004\046\010\001\002"
            + "\000\004\022\217\001\002\000\032\003\uffe4\004\uffe4\005"
            + "\uffe4\006\uffe4\011\uffe4\016\uffe4\025\uffe4\031\uffe4\032\uffe4"
            + "\033\uffe4\034\uffe4\042\uffe4\001\002\000\032\003\057\004"
            + "\ufff4\005\023\006\ufff4\011\ufff4\016\ufff4\025\054\031\ufff4"
            + "\032\ufff4\033\ufff4\034\221\042\ufff4\001\002\000\032\003"
            + "\uffe6\004\uffe6\005\uffe6\006\uffe6\011\uffe6\016\uffe6\025\uffe6"
            + "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\042\uffe6\001\002\000"
            + "\006\024\224\046\010\001\002\000\004\014\242\001\002"
            + "\000\006\036\uffd2\046\010\001\002\000\004\036\234\001"
            + "\002\000\004\036\uffd3\001\002\000\004\046\010\001\002"
            + "\000\006\007\231\036\uffd0\001\002\000\004\046\010\001"
            + "\002\000\004\036\uffd1\001\002\000\006\007\uffcf\036\uffcf"
            + "\001\002\000\006\022\uffa7\046\010\001\002\000\004\022"
            + "\237\001\002\000\004\022\uffa8\001\002\000\032\011\uffcd"
            + "\015\uffcd\017\uffcd\020\uffcd\024\uffcd\026\uffcd\034\uffcd\043"
            + "\uffcd\044\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000\032"
            + "\011\106\015\110\017\072\020\101\024\102\026\111\034"
            + "\241\043\076\044\073\046\010\047\104\050\103\001\002"
            + "\000\032\003\uffd7\004\uffd7\005\uffd7\006\uffd7\011\uffd7\016"
            + "\uffd7\025\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\042\uffd7"
            + "\001\002\000\024\015\110\020\101\024\102\026\111\043"
            + "\076\044\073\046\010\047\104\050\103\001\002\000\032"
            + "\003\uffde\004\uffde\005\uffde\006\uffde\011\uffde\016\uffde\025"
            + "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\042\uffde\001\002"
            + "\000\010\003\uffda\011\uffda\034\uffda\001\002\000\010\003"
            + "\247\011\250\034\251\001\002\000\010\003\uffdb\011\uffdb"
            + "\034\uffdb\001\002\000\010\003\uffd8\011\uffd8\034\uffd8\001"
            + "\002\000\004\046\010\001\002\000\032\003\uffdc\004\uffdc"
            + "\005\uffdc\006\uffdc\011\uffdc\016\uffdc\025\uffdc\031\uffdc\032"
            + "\uffdc\033\uffdc\034\uffdc\042\uffdc\001\002\000\004\046\010"
            + "\001\002\000\004\014\254\001\002\000\024\015\110\020"
            + "\101\024\102\026\111\043\076\044\073\046\010\047\104"
            + "\050\103\001\002\000\010\003\uffd9\011\uffd9\034\uffd9\001"
            + "\002\000\022\004\ufff3\006\ufff3\011\ufff3\016\ufff3\031\ufff3"
            + "\032\ufff3\033\ufff3\042\ufff3\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table
                                     = unpackFromStrings(new String[]{
            "\000\254\000\006\061\003\063\004\001\001\000\004\041"
            + "\014\001\001\000\002\001\001\000\006\024\006\035\010"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\004\024\012\001\001\000\002\001\001\000\002"
            + "\001\001\000\020\002\016\004\021\026\023\027\017\030"
            + "\020\033\024\034\015\001\001\000\002\001\001\000\006"
            + "\002\016\027\255\001\001\000\002\001\001\000\010\042"
            + "\032\043\040\055\041\001\001\000\002\001\001\000\004"
            + "\024\030\001\001\000\002\001\001\000\012\002\016\004"
            + "\027\027\017\030\020\001\001\000\006\024\006\035\026"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\006\042\042\055\041"
            + "\001\001\000\002\001\001\000\004\024\044\001\001\000"
            + "\002\001\001\000\004\047\046\001\001\000\024\002\016"
            + "\005\051\020\047\023\050\027\017\030\052\053\055\054"
            + "\060\064\054\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\010\042\211\043\212\055\041\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\004\044\062\001\001\000\040\006\076\007\070\010\067"
            + "\011\064\012\073\013\077\014\113\015\063\016\114\017"
            + "\112\024\111\052\104\056\074\057\065\060\106\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\006"
            + "\024\177\060\200\001\001\000\030\006\172\007\070\010"
            + "\067\011\064\012\073\013\077\014\113\015\063\016\114"
            + "\017\112\024\123\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\030\006\157\007\070\010\067\011\064\012\073\013"
            + "\077\014\113\015\063\016\114\017\112\024\123\001\001"
            + "\000\030\006\155\007\070\010\067\011\064\012\073\013"
            + "\077\014\113\015\063\016\114\017\112\024\123\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\004\024\140\001\001\000\002\001\001\000\002\001\001"
            + "\000\012\011\064\012\132\014\113\024\131\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\030\006\130\007\070\010\067\011\064\012"
            + "\073\013\077\014\113\015\063\016\114\017\112\024\123"
            + "\001\001\000\002\001\001\000\036\003\122\006\120\007"
            + "\070\010\067\011\064\012\073\013\077\014\113\015\063"
            + "\016\114\017\112\024\123\031\124\032\121\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\034\003\122\006\120\007"
            + "\070\010\067\011\064\012\073\013\077\014\113\015\063"
            + "\016\114\017\112\024\123\031\126\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\004\024\134\001\001\000\002\001"
            + "\001\000\036\003\122\006\120\007\070\010\067\011\064"
            + "\012\073\013\077\014\113\015\063\016\114\017\112\024"
            + "\123\031\124\032\136\001\001\000\002\001\001\000\002"
            + "\001\001\000\006\024\141\050\142\001\001\000\006\037"
            + "\145\040\146\001\001\000\002\001\001\000\030\006\144"
            + "\007\070\010\067\011\064\012\073\013\077\014\113\015"
            + "\063\016\114\017\112\024\123\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\006\024\151\036"
            + "\150\001\001\000\002\001\001\000\002\001\001\000\004"
            + "\024\154\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\030\006\160\007\070"
            + "\010\067\011\064\012\073\013\077\014\113\015\063\016"
            + "\114\017\112\024\123\001\001\000\002\001\001\000\004"
            + "\044\162\001\001\000\040\006\076\007\070\010\067\011"
            + "\064\012\073\013\077\014\113\015\063\016\114\017\112"
            + "\024\111\052\104\056\074\057\065\060\106\001\001\000"
            + "\002\001\001\000\002\001\001\000\004\044\166\001\001"
            + "\000\040\006\076\007\070\010\067\011\064\012\073\013"
            + "\077\014\113\015\063\016\114\017\112\024\111\052\104"
            + "\056\074\057\065\060\106\001\001\000\002\001\001\000"
            + "\030\006\171\007\070\010\067\011\064\012\073\013\077"
            + "\014\113\015\063\016\114\017\112\024\123\001\001\000"
            + "\002\001\001\000\030\006\173\007\070\010\067\011\064"
            + "\012\073\013\077\014\113\015\063\016\114\017\112\024"
            + "\123\001\001\000\002\001\001\000\004\044\175\001\001"
            + "\000\040\006\076\007\070\010\067\011\064\012\073\013"
            + "\077\014\113\015\063\016\114\017\112\024\111\052\104"
            + "\056\074\057\065\060\106\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\016\010\210\011\064"
            + "\012\073\013\077\014\113\024\131\001\001\000\016\010"
            + "\203\011\064\012\073\013\077\014\113\024\131\001\001"
            + "\000\002\001\001\000\014\011\064\012\073\013\207\014"
            + "\113\024\131\001\001\000\014\011\064\012\073\013\206"
            + "\014\113\024\131\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\004\024\221\001\001\000\004\024\215\001\001\000"
            + "\002\001\001\000\004\047\217\001\001\000\024\002\016"
            + "\005\051\020\047\023\050\027\017\030\052\053\055\054"
            + "\060\064\054\001\001\000\002\001\001\000\006\024\141"
            + "\050\222\001\001\000\002\001\001\000\012\024\226\045"
            + "\225\046\224\062\227\001\001\000\002\001\001\000\002"
            + "\001\001\000\006\024\141\050\232\001\001\000\002\001"
            + "\001\000\010\024\226\045\231\062\227\001\001\000\002"
            + "\001\001\000\002\001\001\000\010\024\141\050\235\051"
            + "\234\001\001\000\002\001\001\000\002\001\001\000\004"
            + "\044\237\001\001\000\040\006\076\007\070\010\067\011"
            + "\064\012\073\013\077\014\113\015\063\016\114\017\112"
            + "\024\111\052\104\056\074\057\065\060\106\001\001\000"
            + "\002\001\001\000\030\006\242\007\070\010\067\011\064"
            + "\012\073\013\077\014\113\015\063\016\114\017\112\024"
            + "\123\001\001\000\002\001\001\000\004\022\244\001\001"
            + "\000\004\021\245\001\001\000\002\001\001\000\002\001"
            + "\001\000\004\024\251\001\001\000\002\001\001\000\006"
            + "\024\141\050\252\001\001\000\002\001\001\000\030\006"
            + "\254\007\070\010\067\011\064\012\073\013\077\014\113"
            + "\015\063\016\114\017\112\024\123\001\001\000\002\001"
            + "\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
        int act_num,
        java_cup.runtime.lr_parser parser,
        java.util.Stack stack,
        int top)
        throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    public Parser(Lexer lexer) {
        super(lexer);
    }

    public Program program() throws Exception {
        Program prog = (Program) this.parse().value;
        Context.INSTANCE.beforeGenClassNode();
        return prog;
    }

    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({ "rawtypes", "unchecked", "unused" })
    class CUP$Parser$actions {

        private final Parser parser;

        /** Constructor */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack,
            int CUP$Parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch ( CUP$Parser$act_num ) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= CompileUnit EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Program start_val = (Program) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // CompileUnit ::= PackageDef ImportDefList ClassDefListOpt
                {
                    Program RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    PackageDef p = (PackageDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int illeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int ilright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<ImportDef> il = (List<ImportDef>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<ClassDef> c = (List<ClassDef>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Program(p, il, c);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompileUnit", 49, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // PackageDef ::= PACKAGE IdentList
                {
                    PackageDef RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Identifier> l = (List<Identifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Stmt.packageDef(l, lleft, lright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageDef", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // PackageDef ::=
                {
                    PackageDef RESULT = null;
                    RESULT = PackageDef.none();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageDef", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // ImportDefList ::= ImportDefList ImportDef
                {
                    List<ImportDef> RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<ImportDef> list = (List<ImportDef>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int dleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ImportDef d = (ImportDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    list.add(d);
                    RESULT = list;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDefList", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // ImportDefList ::=
                {
                    List<ImportDef> RESULT = null;
                    RESULT = new LinkedList<>();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDefList", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // ClassDefListOpt ::= ClassDefList
                {
                    List<ClassDef> RESULT = null;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<ClassDef> c = (List<ClassDef>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = c;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDefListOpt", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // ClassDefListOpt ::=
                {
                    List<ClassDef> RESULT = null;
                    RESULT = new ArrayList<>(0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDefListOpt", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // ClassDefList ::= ClassDefList ClassDef
                {
                    List<ClassDef> RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<ClassDef> list = (List<ClassDef>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ClassDef c = (ClassDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    list.add(c);
                    RESULT = list;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDefList", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // ClassDefList ::= ClassDef
                {
                    List<ClassDef> RESULT = null;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ClassDef c = (ClassDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<>();
                    RESULT.add(c);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDefList", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // ImportDef ::= IMPORT IdentList
                {
                    ImportDef RESULT = null;
                    int illeft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int ilright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Identifier> il = (List<Identifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Stmt.importDef(il, illeft, ilright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDef", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // ClassDef ::= AnnotationListOpt ClassModifierListOpt CLASS Ident LBRACE ClassBodyList RBRACE
                {
                    ClassDef RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).right;
                    List<Annotation> a = (List<Annotation>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    List<Modifier> m = (List<Modifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<Statement> l = (List<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Stmt.classDef(a, m, i, l);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDef", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // AnnotationListOpt ::= AnnotationList
                {
                    List<Annotation> RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Annotation> l = (List<Annotation>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = l;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AnnotationListOpt", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // AnnotationListOpt ::=
                {
                    List<Annotation> RESULT = null;
                    RESULT = new LinkedList<>();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AnnotationListOpt", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // AnnotationList ::= Annotation AnnotationList
                {
                    List<Annotation> RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Annotation a = (Annotation) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Annotation> list = (List<Annotation>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = list;
                    RESULT.add(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AnnotationList", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // AnnotationList ::= Annotation
                {
                    List<Annotation> RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Annotation a = (Annotation) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<>();
                    RESULT.add(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AnnotationList", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // Annotation ::= AT Ident
                {
                    Annotation RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Annotation(id, idleft, idright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Annotation", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // ClassModifierListOpt ::= ClassModifierList
                {
                    List<Modifier> RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Modifier> l = (List<Modifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = l;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifierListOpt", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // ClassModifierListOpt ::=
                {
                    List<Modifier> RESULT = null;
                    RESULT = new LinkedList<>();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifierListOpt", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // ClassModifierList ::= ClassModifier ClassModifierList
                {
                    List<Modifier> RESULT = null;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Modifier m = (Modifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Modifier> list = (List<Modifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = list;
                    RESULT.add(m);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifierList", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // ClassModifierList ::= ClassModifier
                {
                    List<Modifier> RESULT = null;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Modifier m = (Modifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<>();
                    RESULT.add(m);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifierList", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // ClassModifier ::= PUBLIC
                {
                    Modifier RESULT = null;
                    RESULT = Modifiers.PUBLIC;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // ClassModifier ::= PROTECTED
                {
                    Modifier RESULT = null;
                    RESULT = Modifiers.PROTECTED;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // ClassModifier ::= PRIVATE
                {
                    Modifier RESULT = null;
                    RESULT = Modifiers.PRIVATE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // ClassModifier ::= ABSTRACT
                {
                    Modifier RESULT = null;
                    RESULT = Modifiers.ABSTRACT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // ClassModifier ::= STATIC
                {
                    Modifier RESULT = null;
                    RESULT = Modifiers.STATIC;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // ClassModifier ::= FINAL
                {
                    Modifier RESULT = null;
                    RESULT = Modifiers.FINAL;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // InnerClassDef ::= AnnotationListOpt ClassModifierListOpt CLASS Ident LBRACE ClassBodyList RBRACE
                {
                    ClassDef RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).right;
                    List<Annotation> a = (List<Annotation>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    List<Modifier> m = (List<Modifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<Statement> l = (List<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Stmt.innerClassDef(a, m, i, l);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDef", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // ClassBodyList ::= ClassBodyList ClassBody
                {
                    List<Statement> RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<Statement> list = (List<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Statement c = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    list.add(c);
                    RESULT = list;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBodyList", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // ClassBodyList ::=
                {
                    List<Statement> RESULT = null;
                    RESULT = new LinkedList<>();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBodyList", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // ClassBody ::= FieldDef
                {
                    Statement RESULT = null;
                    int fleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int fright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    FieldDef f = (FieldDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = f;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // ClassBody ::= FieldDefBlock
                {
                    Statement RESULT = null;
                    int fbleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int fbright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    FieldDefBlock fb = (FieldDefBlock) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = fb;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // ClassBody ::= InnerClassDef
                {
                    Statement RESULT = null;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ClassDef c = (ClassDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = c;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // ClassBody ::= MethodDef
                {
                    Statement RESULT = null;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    MethodDef m = (MethodDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = m;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // ClassBody ::= MainDef
                {
                    Statement RESULT = null;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    MethodDef m = (MethodDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = m;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // FieldDef ::= AnnotationListOpt ClassModifierListOpt DEF Ident TypeName EQ Expr
                {
                    FieldDef RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).right;
                    List<Annotation> a = (List<Annotation>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    List<Modifier> m = (List<Modifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    TypeElement type = (TypeElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Stmt.fieldDef(a, m, id, type, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDef", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // FieldDef ::= error
                {
                    FieldDef RESULT = null;
                    int errleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int errright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object err = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Context.INSTANCE.reportSyntaxError(errleft, errright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDef", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // FieldDefBlock ::= AnnotationListOpt ClassModifierList LBRACE FieldDefBlockInn RBRACE
                {
                    FieldDefBlock RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    List<Annotation> a = (List<Annotation>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    List<Modifier> m = (List<Modifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<FieldDef> l = (List<FieldDef>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Stmt.fieldDefBlock(a, m, l);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDefBlock", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // FieldDefBlockInn ::= FieldDefBlockInn FieldDefInn
                {
                    List<FieldDef> RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<FieldDef> l = (List<FieldDef>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int fleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int fright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    FieldDef f = (FieldDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    l.add(f);
                    RESULT = l;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDefBlockInn", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // FieldDefBlockInn ::=
                {
                    List<FieldDef> RESULT = null;
                    RESULT = new LinkedList<>();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDefBlockInn", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // FieldDefInn ::= DEF Ident TypeName EQ Expr
                {
                    FieldDef RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    TypeElement type = (TypeElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Stmt.fieldDef(id, type, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDefInn", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // FieldDefInn ::= error
                {
                    FieldDef RESULT = null;
                    int errleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int errright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object err = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Context.INSTANCE.reportSyntaxError(errleft, errright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDefInn", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // MethodDef ::= AnnotationListOpt ClassModifierListOpt DEF Ident LPAREN ParameterListOpt RPAREN TypeNameOpt LBRACE MethodBodyList RBRACE
                {
                    MethodDef RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).right;
                    List<Annotation> a = (List<Annotation>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).value;
                    int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).left;
                    int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).right;
                    List<Modifier> m = (List<Modifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    List<Parameter> p = (List<Parameter>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int retTypeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int retTyperight = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    TypeElement retType = (TypeElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<NodeGeneratable< ?>> b = (List<NodeGeneratable< ?>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Stmt.methodDef(a, m, id, p, retType, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDef", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // MainDef ::= MAIN LBRACE MethodBodyList RBRACE
                {
                    MethodDef RESULT = null;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<NodeGeneratable< ?>> b = (List<NodeGeneratable< ?>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Stmt.mainDef(b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainDef", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // IdentOpt ::= Ident
                {
                    Identifier RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = id;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentOpt", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // IdentOpt ::=
                {
                    Identifier RESULT = null;
                    RESULT = Identifier.none();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentOpt", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // ParameterListOpt ::= ParameterList
                {
                    List<Parameter> RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Parameter> list = (List<Parameter>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = list;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterListOpt", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // ParameterListOpt ::=
                {
                    List<Parameter> RESULT = null;
                    RESULT = new LinkedList<>();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterListOpt", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // ParameterList ::= Parameter COMMA ParameterList
                {
                    List<Parameter> RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Parameter p = (Parameter) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Parameter> list = (List<Parameter>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = list;
                    RESULT.add(p);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // ParameterList ::= Parameter
                {
                    List<Parameter> RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Parameter p = (Parameter) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<>();
                    RESULT.add(p);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // Parameter ::= Ident TypeName
                {
                    Parameter RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    TypeElement type = (TypeElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Parameter(id, type);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameter", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // MethodBodyList ::= MethodBodyList MethodBody
                {
                    List<NodeGeneratable< ?>> RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<NodeGeneratable< ?>> list = (List<NodeGeneratable< ?>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    NodeGeneratable b = (NodeGeneratable) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    list.add(b);
                    RESULT = list;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBodyList", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // MethodBodyList ::=
                {
                    List<NodeGeneratable< ?>> RESULT = null;
                    RESULT = new LinkedList<>();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBodyList", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // MethodBody ::= LocalVarDef
                {
                    NodeGeneratable RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    LocalVarDef l = (LocalVarDef) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = l;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // MethodBody ::= Expr
                {
                    NodeGeneratable RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // MethodBody ::= Goto
                {
                    NodeGeneratable RESULT = null;
                    int gleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int gright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    NodeGeneratable g = (NodeGeneratable) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = g;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // MethodBody ::= Label
                {
                    NodeGeneratable RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    NodeGeneratable l = (NodeGeneratable) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = l;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // LocalVarDef ::= DEF Ident TypeName EQ Expr
                {
                    LocalVarDef RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    TypeElement type = (TypeElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Stmt.localVarDef(id, type, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // IdentList ::= Ident
                {
                    List<Identifier> RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<>();
                    RESULT.add(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentList", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // IdentList ::= IdentList DOT Ident
                {
                    List<Identifier> RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    List<Identifier> list = (List<Identifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    list.add(id);
                    RESULT = list;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentList", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // Ident ::= IDENTIFIER
                {
                    Identifier RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.ident(id, idleft, idright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ident", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // Expr ::= IfExpr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // Expr ::= WhileExpr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // Expr ::= AssignmentExpr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // Expr ::= Expr1
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // AssignmentExpr ::= Ident EQ Expr
                {
                    Expression RESULT = null;
                    int targetleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int targetright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Identifier target = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.assignmentExpr(target, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentExpr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // Expr1 ::= Expr1 PLUS Expr2
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.add(e1, e2, e1left, e1right, e2left, e2right);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // Expr1 ::= Expr1 MINUS Expr2
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.sub(e1, e2, e1left, e1right, e2left, e2right);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // Expr1 ::= Expr2
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // Expr2 ::= Expr2 STAR Primary1
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.mul(e1, e2, e1left, e1right, e2left, e2right);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // Expr2 ::= Expr2 SLASH Primary1
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.div(e1, e2, e1left, e1right, e2left, e2right);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // Expr2 ::= Primary1
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // Primary1 ::= Primary
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary1", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // Primary ::= Literal
                {
                    Expression RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression l = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = l;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // Primary ::= MINUS Primary
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.unaryMinus(e, eleft, eright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // Primary ::= LPAREN Expr RPAREN
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // Primary ::= Ident
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Identifier e = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // Primary ::= TRUE
                {
                    Expression RESULT = null;
                    RESULT = Expr.trueLiteral();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // Primary ::= FALSE
                {
                    Expression RESULT = null;
                    RESULT = Expr.falseLiteral();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // Primary ::= MethodInvocation
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // Literal ::= INT_LITERAL
                {
                    Expression RESULT = null;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String i = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.intLiteral(i, ileft, iright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // Literal ::= STRING_LITERAL
                {
                    Expression RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.stringLiteral(s);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // MethodInvocation ::= Primary DOT Ident LPAREN ArgListOpt RPAREN
                {
                    Expression RESULT = null;
                    int targetleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int targetright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    Expression target = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int argListleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int argListright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<Argument> argList = (List<Argument>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Expr.methodInvocation(target, id, argList);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodInvocation", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // MethodInvocation ::= Ident LPAREN ArgListOpt RPAREN
                {
                    Expression RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int argListleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int argListright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<Argument> argList = (List<Argument>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Expr.methodInvocation(Expr.ident("this", -1, -1), id, argList);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodInvocation", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // ArgListOpt ::= ArgList
                {
                    List<Argument> RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Argument> l = (List<Argument>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = l;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgListOpt", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // ArgListOpt ::=
                {
                    List<Argument> RESULT = null;
                    RESULT = new LinkedList<>();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgListOpt", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // ArgList ::= Arg COMMA ArgList
                {
                    List<Argument> RESULT = null;
                    int argleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int argright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Argument arg = (Argument) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Argument> list = (List<Argument>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    list.add(arg);
                    RESULT = list;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgList", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // ArgList ::= Arg
                {
                    List<Argument> RESULT = null;
                    int argleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int argright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Argument arg = (Argument) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<>();
                    RESULT.add(arg);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgList", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // Arg ::= Expr
                {
                    Argument RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Argument(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arg", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // TypeNameOpt ::= TypeName
                {
                    TypeElement RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    TypeElement t = (TypeElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = t;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNameOpt", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // TypeNameOpt ::=
                {
                    TypeElement RESULT = null;
                    RESULT = TypeElement.none();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNameOpt", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // TypeName ::= Ident TypeArgOpt
                {
                    TypeElement RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int targleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int targright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Identifier> targ = (List<Identifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Stmt.typeName(id, targ);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // TypeArgOpt ::= TypeArg
                {
                    List<Identifier> RESULT = null;
                    int argleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int argright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    List<Identifier> arg = (List<Identifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = arg;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeArgOpt", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // TypeArgOpt ::=
                {
                    List<Identifier> RESULT = null;
                    RESULT = new ArrayList<>(0);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeArgOpt", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // TypeArg ::= LBRACKET IdentListComma RBRACKET
                {
                    List<Identifier> RESULT = null;
                    int argleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int argright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<Identifier> arg = (List<Identifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = arg;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeArg", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // IdentListComma ::= Ident
                {
                    List<Identifier> RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<>();
                    RESULT.add(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentListComma", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // IdentListComma ::= IdentListComma COMMA Ident
                {
                    List<Identifier> RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    List<Identifier> list = (List<Identifier>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = list;
                    RESULT.add(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentListComma", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // IfExpr ::= IF Expr LBRACE MethodBodyList RBRACE
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int b1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int b1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<NodeGeneratable< ?>> b1 = (List<NodeGeneratable< ?>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Expr.ifExpr(e, b1);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfExpr", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // IfExpr ::= IF Expr Expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int b1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int b1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression b1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.ifExpr(e, b1);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfExpr", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // IfExpr ::= IF Expr LBRACE MethodBodyList RBRACE ELSE LBRACE MethodBodyList RBRACE
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                    int b1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int b1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    List<NodeGeneratable< ?>> b1 = (List<NodeGeneratable< ?>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int b2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int b2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<NodeGeneratable< ?>> b2 = (List<NodeGeneratable< ?>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Expr.ifExpr(e, b1, b2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfExpr", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // IfExpr ::= IF Expr Expr ELSE Expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int b1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int b1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression b1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int b2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int b2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression b2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.ifExpr(e, b1, b2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfExpr", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // WhileExpr ::= WHILE Expr Expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression l = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Expr.whileExpr(e, l);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileExpr", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // WhileExpr ::= WHILE Expr LBRACE MethodBodyList RBRACE
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    List<NodeGeneratable< ?>> l = (List<NodeGeneratable< ?>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Expr.whileExpr(e, l);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileExpr", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // Goto ::= GOTO Label
                {
                    NodeGeneratable RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    NodeGeneratable l = (NodeGeneratable) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = Stmt.Goto(l);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Goto", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // Label ::= Ident COLON
                {
                    NodeGeneratable RESULT = null;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = Stmt.label(i);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Label", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                        "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        } /* end of method */


        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack,
            int CUP$Parser$top)
            throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                CUP$Parser$act_num,
                CUP$Parser$parser,
                CUP$Parser$stack,
                CUP$Parser$top);
        }
    }

}
