
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

package karaffe.compiler;

import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\060\005\000\002\056" +
    "\004\000\002\056\002\000\002\036\004\000\002\036\002" +
    "\000\002\031\003\000\002\031\002\000\002\030\004\000" +
    "\002\030\003\000\002\023\004\000\002\004\011\000\002" +
    "\025\003\000\002\025\002\000\002\024\004\000\002\024" +
    "\003\000\002\002\004\000\002\040\003\000\002\040\002" +
    "\000\002\037\004\000\002\037\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\005\011\000\002\044" +
    "\004\000\002\044\002\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\020\011\000" +
    "\002\050\015\000\002\051\006\000\002\022\003\000\002" +
    "\022\002\000\002\043\003\000\002\043\002\000\002\042" +
    "\005\000\002\042\003\000\002\057\004\000\002\041\004" +
    "\000\002\041\002\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\047\007\000\002" +
    "\032\003\000\002\032\005\000\002\021\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\017\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\013\003\000\002\012\003\000\002\012" +
    "\004\000\002\012\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\014\003\000" +
    "\002\014\003\000\002\011\010\000\002\011\006\000\002" +
    "\027\003\000\002\027\002\000\002\026\005\000\002\026" +
    "\003\000\002\003\003\000\002\046\003\000\002\046\002" +
    "\000\002\045\004\000\002\035\003\000\002\035\002\000" +
    "\002\034\005\000\002\033\003\000\002\033\005\000\002" +
    "\015\007\000\002\015\005\000\002\015\013\000\002\015" +
    "\007\000\002\016\005\000\002\016\007\000\002\054\004" +
    "\000\002\055\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\030\002\ufffe\004\ufffe\005\ufffe\006\ufffe\016" +
    "\ufffe\021\ufffe\027\006\031\ufffe\032\ufffe\033\ufffe\042\ufffe" +
    "\001\002\000\026\002\ufffc\004\ufffc\005\ufffc\006\ufffc\016" +
    "\ufffc\021\ufffc\031\ufffc\032\ufffc\033\ufffc\042\ufffc\001\002" +
    "\000\004\002\014\001\002\000\004\046\010\001\002\000" +
    "\030\002\uffce\004\uffce\005\uffce\006\uffce\012\uffce\016\uffce" +
    "\021\uffce\031\uffce\032\uffce\033\uffce\042\uffce\001\002\000" +
    "\110\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\001\002\000\030\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\012\012\016\uffff\021\uffff\031\uffff" +
    "\032\uffff\033\uffff\042\uffff\001\002\000\004\046\010\001" +
    "\002\000\030\002\uffcd\004\uffcd\005\uffcd\006\uffcd\012\uffcd" +
    "\016\uffcd\021\uffcd\031\uffcd\032\uffcd\033\uffcd\042\uffcd\001" +
    "\002\000\004\002\001\001\002\000\026\002\ufffa\004\ufff4" +
    "\005\023\006\ufff4\016\ufff4\021\026\031\ufff4\032\ufff4\033" +
    "\ufff4\042\ufff4\001\002\000\004\002\000\001\002\000\024" +
    "\004\ufff2\005\023\006\ufff2\011\ufff2\016\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\042\ufff2\001\002\000\022\004\ufff5\006\ufff5" +
    "\011\ufff5\016\ufff5\031\ufff5\032\ufff5\033\ufff5\042\ufff5\001" +
    "\002\000\020\004\032\006\uffef\016\040\031\037\032\036" +
    "\033\034\042\035\001\002\000\024\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\016\ufff8\031\ufff8\032\ufff8\033\ufff8\042\ufff8" +
    "\001\002\000\004\046\010\001\002\000\026\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\016\ufffd\021\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\042\ufffd\001\002\000\024\002\ufffb\004\ufff4\005" +
    "\023\006\ufff4\016\ufff4\031\ufff4\032\ufff4\033\ufff4\042\ufff4" +
    "\001\002\000\004\046\010\001\002\000\030\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\012\012\016\ufff7\021\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\042\ufff7\001\002\000\024\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\016\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\042\ufff9\001\002\000\024\004\ufff1\005\ufff1\006\ufff1\011" +
    "\ufff1\016\ufff1\031\ufff1\032\ufff1\033\ufff1\042\ufff1\001\002" +
    "\000\022\004\uffe9\006\uffe9\011\uffe9\016\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\042\uffe9\001\002\000\006\006\ufff0\011\ufff0" +
    "\001\002\000\022\004\uffec\006\uffec\011\uffec\016\uffec\031" +
    "\uffec\032\uffec\033\uffec\042\uffec\001\002\000\022\004\uffe8" +
    "\006\uffe8\011\uffe8\016\uffe8\031\uffe8\032\uffe8\033\uffe8\042" +
    "\uffe8\001\002\000\022\004\uffeb\006\uffeb\011\uffeb\016\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\042\uffeb\001\002\000\022\004" +
    "\uffea\006\uffea\011\uffea\016\uffea\031\uffea\032\uffea\033\uffea" +
    "\042\uffea\001\002\000\022\004\uffe7\006\uffe7\011\uffe7\016" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\042\uffe7\001\002\000\004" +
    "\006\044\001\002\000\022\004\032\006\uffed\011\uffed\016" +
    "\040\031\037\032\036\033\034\042\035\001\002\000\006" +
    "\006\uffee\011\uffee\001\002\000\004\046\010\001\002\000" +
    "\004\022\046\001\002\000\030\004\uffe4\005\uffe4\006\uffe4" +
    "\011\uffe4\016\uffe4\025\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\042\uffe4\001\002\000\030\004\ufff4\005\023\006\ufff4" +
    "\011\ufff4\016\ufff4\025\053\031\ufff4\032\ufff4\033\ufff4\034" +
    "\056\042\ufff4\001\002\000\030\004\uffe3\005\uffe3\006\uffe3" +
    "\011\uffe3\016\uffe3\025\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\042\uffe3\001\002\000\030\004\uffe2\005\uffe2\006\uffe2" +
    "\011\uffe2\016\uffe2\025\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\042\uffe2\001\002\000\022\004\032\006\uffef\011\uffef" +
    "\016\040\031\037\032\036\033\034\042\035\001\002\000" +
    "\004\022\060\001\002\000\030\004\uffe5\005\uffe5\006\uffe5" +
    "\011\uffe5\016\uffe5\025\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\042\uffe5\001\002\000\030\004\uffe1\005\uffe1\006\uffe1" +
    "\011\uffe1\016\uffe1\025\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\042\uffe1\001\002\000\024\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\016\ufff6\031\ufff6\032\ufff6\033\ufff6\042\ufff6\001" +
    "\002\000\030\004\uffe0\005\uffe0\006\uffe0\011\uffe0\016\uffe0" +
    "\025\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\042\uffe0\001" +
    "\002\000\032\011\uffd4\015\uffd4\017\uffd4\020\uffd4\024\uffd4" +
    "\026\uffd4\034\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\001\002\000\032\011\104\015\107\017\071\020\075" +
    "\024\100\026\106\034\065\043\074\044\070\046\010\047" +
    "\102\050\101\001\002\000\064\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\011\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\036\uffcb\042\uffcb\043\uffcb\044\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\001\002\000\074\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\001\002\000\032\011\uffd1\015\uffd1\017\uffd1\020" +
    "\uffd1\024\uffd1\026\uffd1\034\uffd1\043\uffd1\044\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\001\002\000\030\004\uffdd\005\uffdd\006" +
    "\uffdd\011\uffdd\016\uffdd\025\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\042\uffdd\001\002\000\072\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\011\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\040\204\041\203" +
    "\042\uffc4\043\uffc4\044\uffc4\046\uffc4\047\uffc4\050\uffc4\001" +
    "\002\000\066\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8" +
    "\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\022\uffc8\024" +
    "\uffc8\025\uffc8\026\201\030\200\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\036\uffc8\042\uffc8\043\uffc8\044\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\001\002\000\024\015\107\020\075\024\100" +
    "\026\106\043\074\044\070\046\010\047\102\050\101\001" +
    "\002\000\004\046\010\001\002\000\074\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\011\uffc0\012\132\013\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\001\002\000\032\011\uffd5\015\uffd5\017\uffd5\020" +
    "\uffd5\024\uffd5\026\uffd5\034\uffd5\043\uffd5\044\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\001\002\000\074\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\001\002\000\024\015\107\020\075\024\100\026\106" +
    "\043\074\044\070\046\010\047\102\050\101\001\002\000" +
    "\072\004\uffc1\005\uffc1\006\uffc1\007\uffc1\011\uffc1\013\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\022\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\036\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\001\002\000\032\011\uffd2\015\uffd2" +
    "\017\uffd2\020\uffd2\024\uffd2\026\uffd2\034\uffd2\043\uffd2\044" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\001\002\000\024\015\107" +
    "\020\075\024\100\026\106\043\074\044\070\046\010\047" +
    "\102\050\101\001\002\000\074\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\001\002\000\074\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\022\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\046\uffb8\047\uffb8\050\uffb8\001\002\000" +
    "\032\011\uffd3\015\uffd3\017\uffd3\020\uffd3\024\uffd3\026\uffd3" +
    "\034\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3\050\uffd3\001" +
    "\002\000\004\046\010\001\002\000\032\011\uffd0\015\uffd0" +
    "\017\uffd0\020\uffd0\024\uffd0\026\uffd0\034\uffd0\043\uffd0\044" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002\000\020\015\107" +
    "\024\100\026\106\043\074\046\010\047\102\050\101\001" +
    "\002\000\074\004\uffba\005\uffba\006\uffba\007\uffba\011\uffba" +
    "\012\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\022" +
    "\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\036\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\046\uffba\047\uffba\050\uffba\001\002\000\046" +
    "\010\115\011\uffbc\012\uffbc\014\114\015\uffbc\017\uffbc\020" +
    "\uffbc\024\116\026\uffbc\030\uffbc\034\uffbc\040\uffbc\041\uffbc" +
    "\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\001\002\000" +
    "\064\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\013\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9\001" +
    "\002\000\074\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\022" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\001\002\000\064" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\013\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\022\uffca\024\uffca\025\uffca" +
    "\026\uffca\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca\042" +
    "\uffca\043\uffca\044\uffca\046\uffca\047\uffca\050\uffca\001\002" +
    "\000\024\015\107\020\075\024\100\026\106\043\074\044" +
    "\070\046\010\047\102\050\101\001\002\000\032\011\uffa0" +
    "\015\uffa0\017\uffa0\020\uffa0\024\uffa0\026\uffa0\034\uffa0\043" +
    "\uffa0\044\uffa0\046\uffa0\047\uffa0\050\uffa0\001\002\000\026" +
    "\015\107\020\075\024\100\026\106\036\uffb3\043\074\044" +
    "\070\046\010\047\102\050\101\001\002\000\006\007\uffb0" +
    "\036\uffb0\001\002\000\004\036\126\001\002\000\006\007" +
    "\124\036\uffb1\001\002\000\076\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\114\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\022\uffbc\024\116\025\uffbc\026\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\036\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\001\002\000\004\036\uffb4\001\002\000\024\015" +
    "\107\020\075\024\100\026\106\043\074\044\070\046\010" +
    "\047\102\050\101\001\002\000\004\036\uffb2\001\002\000" +
    "\074\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\001\002\000\064\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000\074" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\022\uffbc\024\116" +
    "\025\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\036\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\001\002\000\074\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\022\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\001\002\000\004\046\010\001\002\000\004" +
    "\024\134\001\002\000\026\015\107\020\075\024\100\026" +
    "\106\036\uffb3\043\074\044\070\046\010\047\102\050\101" +
    "\001\002\000\004\036\136\001\002\000\074\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\022\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\001\002\000\004\046\010\001\002\000\014" +
    "\007\uffab\014\uffab\022\uffab\023\146\036\uffab\001\002\000" +
    "\004\014\142\001\002\000\024\015\107\020\075\024\100" +
    "\026\106\043\074\044\070\046\010\047\102\050\101\001" +
    "\002\000\032\011\uffcf\015\uffcf\017\uffcf\020\uffcf\024\uffcf" +
    "\026\uffcf\034\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\001\002\000\012\007\uffac\014\uffac\022\uffac\036\uffac" +
    "\001\002\000\012\007\uffad\014\uffad\022\uffad\036\uffad\001" +
    "\002\000\004\046\010\001\002\000\006\007\151\035\152" +
    "\001\002\000\006\007\uffa9\035\uffa9\001\002\000\004\046" +
    "\010\001\002\000\012\007\uffaa\014\uffaa\022\uffaa\036\uffaa" +
    "\001\002\000\006\007\uffa8\035\uffa8\001\002\000\004\036" +
    "\155\001\002\000\074\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\022\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\036\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd\001\002" +
    "\000\026\015\107\020\075\022\160\024\100\026\106\043" +
    "\074\044\070\046\010\047\102\050\101\001\002\000\064" +
    "\004\uffa6\005\uffa6\006\uffa6\007\uffa6\011\uffa6\013\167\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\036\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\046\uffa6\047\uffa6\050\uffa6\001\002" +
    "\000\032\011\uffd4\015\uffd4\017\uffd4\020\uffd4\024\uffd4\026" +
    "\uffd4\034\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\001\002\000\032\011\104\015\107\017\071\020\075\024" +
    "\100\026\106\034\162\043\074\044\070\046\010\047\102" +
    "\050\101\001\002\000\064\004\uffa7\005\uffa7\006\uffa7\007" +
    "\uffa7\011\uffa7\013\163\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\022\uffa7\024\uffa7\025\uffa7\026\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\036\uffa7\042\uffa7\043\uffa7\044\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\001\002\000\004\022\164\001\002\000" +
    "\032\011\uffd4\015\uffd4\017\uffd4\020\uffd4\024\uffd4\026\uffd4" +
    "\034\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4\001" +
    "\002\000\032\011\104\015\107\017\071\020\075\024\100" +
    "\026\106\034\166\043\074\044\070\046\010\047\102\050" +
    "\101\001\002\000\064\004\uffa5\005\uffa5\006\uffa5\007\uffa5" +
    "\011\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\022" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\036\uffa5\042\uffa5\043\uffa5\044\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\001\002\000\024\015\107\020\075\024\100" +
    "\026\106\043\074\044\070\046\010\047\102\050\101\001" +
    "\002\000\064\004\uffa4\005\uffa4\006\uffa4\007\uffa4\011\uffa4" +
    "\013\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\022\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\036\uffa4\042\uffa4\043\uffa4\044\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\001\002\000\004\010\115\001\002\000\032\011\uffa1" +
    "\015\uffa1\017\uffa1\020\uffa1\024\uffa1\026\uffa1\034\uffa1\043" +
    "\uffa1\044\uffa1\046\uffa1\047\uffa1\050\uffa1\001\002\000\026" +
    "\015\107\020\075\022\175\024\100\026\106\043\074\044" +
    "\070\046\010\047\102\050\101\001\002\000\064\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\011\uffa3\013\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\022\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\036\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\046\uffa3\047\uffa3\050\uffa3\001\002\000\032" +
    "\011\uffd4\015\uffd4\017\uffd4\020\uffd4\024\uffd4\026\uffd4\034" +
    "\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4\001\002" +
    "\000\032\011\104\015\107\017\071\020\075\024\100\026" +
    "\106\034\177\043\074\044\070\046\010\047\102\050\101" +
    "\001\002\000\064\004\uffa2\005\uffa2\006\uffa2\007\uffa2\011" +
    "\uffa2\013\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\022\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\036\uffa2\042\uffa2\043\uffa2\044\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\001\002\000\020\015\107\024\100\026\106\043" +
    "\074\046\010\047\102\050\101\001\002\000\020\015\107" +
    "\024\100\026\106\043\074\046\010\047\102\050\101\001" +
    "\002\000\072\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5" +
    "\013\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\022\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\036\uffc5\040\204\041\203\042\uffc5\043\uffc5\044" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\001\002\000\020\015\107" +
    "\024\100\026\106\043\074\046\010\047\102\050\101\001" +
    "\002\000\020\015\107\024\100\026\106\043\074\046\010" +
    "\047\102\050\101\001\002\000\072\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\011\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\001" +
    "\002\000\072\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3" +
    "\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\022\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000\072\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\011\uffc6\013\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\040" +
    "\204\041\203\042\uffc6\043\uffc6\044\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\001\002\000\006\006\212\011\211\001\002\000" +
    "\004\046\010\001\002\000\004\046\010\001\002\000\004" +
    "\022\214\001\002\000\030\004\uffe4\005\uffe4\006\uffe4\011" +
    "\uffe4\016\uffe4\025\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\042\uffe4\001\002\000\030\004\ufff4\005\023\006\ufff4\011" +
    "\ufff4\016\ufff4\025\053\031\ufff4\032\ufff4\033\ufff4\034\216" +
    "\042\ufff4\001\002\000\030\004\uffe6\005\uffe6\006\uffe6\011" +
    "\uffe6\016\uffe6\025\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\042\uffe6\001\002\000\006\024\221\046\010\001\002\000" +
    "\004\014\237\001\002\000\006\036\uffd9\046\010\001\002" +
    "\000\004\036\231\001\002\000\004\036\uffda\001\002\000" +
    "\004\046\010\001\002\000\006\007\226\036\uffd7\001\002" +
    "\000\004\046\010\001\002\000\004\036\uffd8\001\002\000" +
    "\006\007\uffd6\036\uffd6\001\002\000\006\022\uffae\046\010" +
    "\001\002\000\004\022\234\001\002\000\004\022\uffaf\001" +
    "\002\000\032\011\uffd4\015\uffd4\017\uffd4\020\uffd4\024\uffd4" +
    "\026\uffd4\034\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\001\002\000\032\011\104\015\107\017\071\020\075" +
    "\024\100\026\106\034\236\043\074\044\070\046\010\047" +
    "\102\050\101\001\002\000\030\004\uffde\005\uffde\006\uffde" +
    "\011\uffde\016\uffde\025\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\042\uffde\001\002\000\024\015\107\020\075\024\100" +
    "\026\106\043\074\044\070\046\010\047\102\050\101\001" +
    "\002\000\030\004\uffdf\005\uffdf\006\uffdf\011\uffdf\016\uffdf" +
    "\025\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\042\uffdf\001" +
    "\002\000\022\004\ufff3\006\ufff3\011\ufff3\016\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\042\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\006\056\003\060\004\001\001\000\004\036" +
    "\014\001\001\000\002\001\001\000\006\021\006\032\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\016\004\021\023\023\024\017\025" +
    "\020\030\024\031\015\001\001\000\002\001\001\000\006" +
    "\002\016\024\240\001\001\000\002\001\001\000\010\037" +
    "\032\040\040\052\041\001\001\000\002\001\001\000\004" +
    "\021\030\001\001\000\002\001\001\000\012\002\016\004" +
    "\027\024\017\025\020\001\001\000\006\021\006\032\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\042\052\041" +
    "\001\001\000\002\001\001\000\004\021\044\001\001\000" +
    "\002\001\001\000\004\044\046\001\001\000\022\002\016" +
    "\005\050\020\047\024\017\025\051\050\054\051\056\061" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\037\032\040\207\052\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\060\001\001\000\040\006\076\007" +
    "\066\010\065\011\062\012\071\013\075\014\111\015\061" +
    "\016\112\017\110\021\107\047\102\053\072\054\063\055" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\172\007\066\010\065\011\062\012\071" +
    "\013\075\014\111\015\061\016\112\017\110\021\121\001" +
    "\001\000\006\021\170\055\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\155\007" +
    "\066\010\065\011\062\012\071\013\075\014\111\015\061" +
    "\016\112\017\110\021\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\153\007\066\010\065\011\062" +
    "\012\071\013\075\014\111\015\061\016\112\017\110\021" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\136\001\001\000\002\001\001\000" +
    "\012\011\062\012\130\014\111\021\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\126\007\066\010\065" +
    "\011\062\012\071\013\075\014\111\015\061\016\112\017" +
    "\110\021\121\001\001\000\002\001\001\000\036\003\120" +
    "\006\116\007\066\010\065\011\062\012\071\013\075\014" +
    "\111\015\061\016\112\017\110\021\121\026\122\027\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\120" +
    "\006\116\007\066\010\065\011\062\012\071\013\075\014" +
    "\111\015\061\016\112\017\110\021\121\026\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\132\001\001" +
    "\000\002\001\001\000\036\003\120\006\116\007\066\010" +
    "\065\011\062\012\071\013\075\014\111\015\061\016\112" +
    "\017\110\021\121\026\122\027\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\137\045\140\001\001" +
    "\000\006\034\143\035\144\001\001\000\002\001\001\000" +
    "\030\006\142\007\066\010\065\011\062\012\071\013\075" +
    "\014\111\015\061\016\112\017\110\021\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\147\033\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\156\007\066\010\065\011\062\012\071\013\075\014\111" +
    "\015\061\016\112\017\110\021\121\001\001\000\002\001" +
    "\001\000\004\041\160\001\001\000\040\006\076\007\066" +
    "\010\065\011\062\012\071\013\075\014\111\015\061\016" +
    "\112\017\110\021\107\047\102\053\072\054\063\055\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\164\001\001\000\040\006\076\007\066\010\065\011\062" +
    "\012\071\013\075\014\111\015\061\016\112\017\110\021" +
    "\107\047\102\053\072\054\063\055\104\001\001\000\002" +
    "\001\001\000\030\006\167\007\066\010\065\011\062\012" +
    "\071\013\075\014\111\015\061\016\112\017\110\021\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\173\007\066\010\065\011\062\012\071" +
    "\013\075\014\111\015\061\016\112\017\110\021\121\001" +
    "\001\000\002\001\001\000\004\041\175\001\001\000\040" +
    "\006\076\007\066\010\065\011\062\012\071\013\075\014" +
    "\111\015\061\016\112\017\110\021\107\047\102\053\072" +
    "\054\063\055\104\001\001\000\002\001\001\000\016\010" +
    "\206\011\062\012\071\013\075\014\111\021\127\001\001" +
    "\000\016\010\201\011\062\012\071\013\075\014\111\021" +
    "\127\001\001\000\002\001\001\000\014\011\062\012\071" +
    "\013\205\014\111\021\127\001\001\000\014\011\062\012" +
    "\071\013\204\014\111\021\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\216\001\001\000\004\021\212\001\001\000\002" +
    "\001\001\000\004\044\214\001\001\000\022\002\016\005" +
    "\050\020\047\024\017\025\051\050\054\051\056\061\053" +
    "\001\001\000\002\001\001\000\006\021\137\045\217\001" +
    "\001\000\002\001\001\000\012\021\223\042\222\043\221" +
    "\057\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\137\045\227\001\001\000\002\001\001\000\010" +
    "\021\223\042\226\057\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\137\045\232\046\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\234\001" +
    "\001\000\040\006\076\007\066\010\065\011\062\012\071" +
    "\013\075\014\111\015\061\016\112\017\110\021\107\047" +
    "\102\053\072\054\063\055\104\001\001\000\002\001\001" +
    "\000\030\006\237\007\066\010\065\011\062\012\071\013" +
    "\075\014\111\015\061\016\112\017\110\021\121\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public Parser(Lexer lexer) {
        super(lexer);
    }

    public Program program() throws Exception{
        Program prog = (Program)this.parse().value;
        return prog;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompileUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CompileUnit ::= PackageDef ImportDefList ClassDefListOpt 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PackageDef p = (PackageDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ImportDef> il = (List<ImportDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ClassDef> c = (List<ClassDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Program(p, il, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompileUnit",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PackageDef ::= PACKAGE IdentList 
            {
              PackageDef RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Identifier> l = (List<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Stmt.packageDef(l, lleft, lright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageDef",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PackageDef ::= 
            {
              PackageDef RESULT =null;
		RESULT = PackageDef.none();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageDef",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ImportDefList ::= ImportDefList ImportDef 
            {
              List<ImportDef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ImportDef> list = (List<ImportDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ImportDef d = (ImportDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(d); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDefList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ImportDefList ::= 
            {
              List<ImportDef> RESULT =null;
		RESULT = new LinkedList<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDefList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDefListOpt ::= ClassDefList 
            {
              List<ClassDef> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ClassDef> c = (List<ClassDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDefListOpt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDefListOpt ::= 
            {
              List<ClassDef> RESULT =null;
		RESULT = new ArrayList<>(0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDefListOpt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassDefList ::= ClassDefList ClassDef 
            {
              List<ClassDef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ClassDef> list = (List<ClassDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(c); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDefList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ClassDefList ::= ClassDef 
            {
              List<ClassDef> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>();RESULT.add(c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDefList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ImportDef ::= IMPORT IdentList 
            {
              ImportDef RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Identifier> il = (List<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Stmt.importDef(il, illeft, ilright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDef",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassDef ::= AnnotationListOpt ClassModifierListOpt CLASS Ident LBRACE ClassBodyList RBRACE 
            {
              ClassDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Annotation> a = (List<Annotation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Modifier> m = (List<Modifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Stmt.classDef(a, m, i, l);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDef",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AnnotationListOpt ::= AnnotationList 
            {
              List<Annotation> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Annotation> l = (List<Annotation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AnnotationListOpt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AnnotationListOpt ::= 
            {
              List<Annotation> RESULT =null;
		RESULT = new LinkedList<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AnnotationListOpt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AnnotationList ::= Annotation AnnotationList 
            {
              List<Annotation> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Annotation a = (Annotation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Annotation> list = (List<Annotation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list; RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AnnotationList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AnnotationList ::= Annotation 
            {
              List<Annotation> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Annotation a = (Annotation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AnnotationList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Annotation ::= AT Ident 
            {
              Annotation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Annotation(id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Annotation",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ClassModifierListOpt ::= ClassModifierList 
            {
              List<Modifier> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Modifier> l = (List<Modifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifierListOpt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ClassModifierListOpt ::= 
            {
              List<Modifier> RESULT =null;
		RESULT = new LinkedList<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifierListOpt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassModifierList ::= ClassModifier ClassModifierList 
            {
              List<Modifier> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Modifier m = (Modifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Modifier> list = (List<Modifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list; RESULT.add(m);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifierList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ClassModifierList ::= ClassModifier 
            {
              List<Modifier> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Modifier m = (Modifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(m);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifierList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassModifier ::= PUBLIC 
            {
              Modifier RESULT =null;
		RESULT = Modifiers.PUBLIC;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ClassModifier ::= PROTECTED 
            {
              Modifier RESULT =null;
		RESULT = Modifiers.PROTECTED;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassModifier ::= PRIVATE 
            {
              Modifier RESULT =null;
		RESULT = Modifiers.PRIVATE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassModifier ::= ABSTRACT 
            {
              Modifier RESULT =null;
		RESULT = Modifiers.ABSTRACT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassModifier ::= STATIC 
            {
              Modifier RESULT =null;
		RESULT = Modifiers.STATIC;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassModifier ::= FINAL 
            {
              Modifier RESULT =null;
		RESULT = Modifiers.FINAL;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // InnerClassDef ::= AnnotationListOpt ClassModifierListOpt CLASS Ident LBRACE ClassBodyList RBRACE 
            {
              ClassDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Annotation> a = (List<Annotation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Modifier> m = (List<Modifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Stmt.innerClassDef(a, m, i, l);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDef",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassBodyList ::= ClassBodyList ClassBody 
            {
              List<Statement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> list = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(c); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBodyList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassBodyList ::= 
            {
              List<Statement> RESULT =null;
		RESULT = new LinkedList<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBodyList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassBody ::= FieldDef 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldDef f = (FieldDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassBody ::= InnerClassDef 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassBody ::= MethodDef 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassBody ::= MainDef 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDef m = (MethodDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassBody",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FieldDef ::= AnnotationListOpt ClassModifierListOpt DEF Ident TypeName EQ Expr 
            {
              FieldDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Annotation> a = (List<Annotation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Modifier> m = (List<Modifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeElement type = (TypeElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Stmt.fieldDef(id, type, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDef ::= AnnotationListOpt ClassModifierListOpt DEF Ident LPAREN ParameterListOpt RPAREN TypeNameOpt LBRACE MethodBodyList RBRACE 
            {
              MethodDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		List<Annotation> a = (List<Annotation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Modifier> m = (List<Modifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Parameter> p = (List<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeElement retType = (TypeElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodeGeneratable< ? >> b = (List<NodeGeneratable< ? >>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Stmt.methodDef(a, m, id, p, retType, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDef",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MainDef ::= MAIN LBRACE MethodBodyList RBRACE 
            {
              MethodDef RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodeGeneratable< ? >> b = (List<NodeGeneratable< ? >>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Stmt.mainDef(b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainDef",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IdentOpt ::= Ident 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentOpt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IdentOpt ::= 
            {
              Identifier RESULT =null;
		RESULT = Identifier.none();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentOpt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParameterListOpt ::= ParameterList 
            {
              List<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterListOpt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ParameterListOpt ::= 
            {
              List<Parameter> RESULT =null;
		RESULT = new LinkedList<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterListOpt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ParameterList ::= Parameter COMMA ParameterList 
            {
              List<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list; RESULT.add(p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParameterList ::= Parameter 
            {
              List<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>();RESULT.add(p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Parameter ::= Ident TypeName 
            {
              Parameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeElement type = (TypeElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Parameter(id, type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameter",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodBodyList ::= MethodBodyList MethodBody 
            {
              List<NodeGeneratable< ? >> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodeGeneratable< ? >> list = (List<NodeGeneratable< ? >>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeGeneratable b = (NodeGeneratable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(b); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBodyList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodBodyList ::= 
            {
              List<NodeGeneratable< ? >> RESULT =null;
		RESULT = new LinkedList<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBodyList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodBody ::= LocalVarDef 
            {
              NodeGeneratable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LocalVarDef l = (LocalVarDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodBody ::= Expr 
            {
              NodeGeneratable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodBody ::= Goto 
            {
              NodeGeneratable RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeGeneratable g = (NodeGeneratable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = g;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MethodBody ::= Label 
            {
              NodeGeneratable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeGeneratable l = (NodeGeneratable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LocalVarDef ::= DEF Ident TypeName EQ Expr 
            {
              LocalVarDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeElement type = (TypeElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Stmt.localVarDef(id, type, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IdentList ::= Ident 
            {
              List<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IdentList ::= IdentList DOT Ident 
            {
              List<Identifier> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Identifier> list = (List<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(id); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Ident ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.ident(id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ident",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= IfExpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= WhileExpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= AssignmentExpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AssignmentExpr ::= Ident EQ Expr 
            {
              Expression RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier target = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.assignmentExpr(target, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentExpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr1 ::= Expr1 PLUS Expr2 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.add(e1, e2, e1left, e1right, e2left, e2right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr1 ::= Expr1 MINUS Expr2 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.sub(e1, e2, e1left, e1right, e2left, e2right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr1 ::= Expr2 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr2 ::= Expr2 STAR Primary1 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.mul(e1, e2, e1left, e1right, e2left, e2right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr2 ::= Expr2 SLASH Primary1 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.div(e1, e2, e1left, e1right, e2left, e2right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr2 ::= Primary1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Primary1 ::= Primary 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary1",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Primary ::= Literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Primary ::= MINUS Primary 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.unaryMinus(e, eleft, eright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Primary ::= LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Primary ::= Ident 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier e = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Primary ::= TRUE 
            {
              Expression RESULT =null;
		RESULT = Expr.trueLiteral();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Primary ::= FALSE 
            {
              Expression RESULT =null;
		RESULT = Expr.falseLiteral();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Primary ::= MethodInvocation 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Literal ::= INT_LITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.intLiteral(i, ileft, iright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Literal ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.stringLiteral(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MethodInvocation ::= Primary DOT Ident LPAREN ArgListOpt RPAREN 
            {
              Expression RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression target = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Argument> argList = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Expr.methodInvocation(target, id, argList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodInvocation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MethodInvocation ::= Ident LPAREN ArgListOpt RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Argument> argList = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Expr.methodInvocation(Expr.ident("this",-1, -1) , id, argList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodInvocation",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ArgListOpt ::= ArgList 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgListOpt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ArgListOpt ::= 
            {
              List<Argument> RESULT =null;
		RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgListOpt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ArgList ::= Arg COMMA ArgList 
            {
              List<Argument> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> list = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(arg); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ArgList ::= Arg 
            {
              List<Argument> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(arg);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Arg ::= Expr 
            {
              Argument RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Argument(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arg",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TypeNameOpt ::= TypeName 
            {
              TypeElement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeElement t = (TypeElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNameOpt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TypeNameOpt ::= 
            {
              TypeElement RESULT =null;
		RESULT = TypeElement.none();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNameOpt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TypeName ::= Ident TypeArgOpt 
            {
              TypeElement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int targleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int targright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Identifier> targ = (List<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Stmt.typeName(id, targ);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TypeArgOpt ::= TypeArg 
            {
              List<Identifier> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Identifier> arg = (List<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = arg;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeArgOpt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TypeArgOpt ::= 
            {
              List<Identifier> RESULT =null;
		RESULT = new ArrayList<>(0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeArgOpt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TypeArg ::= LBRACKET IdentListComma RBRACKET 
            {
              List<Identifier> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Identifier> arg = (List<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = arg;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeArg",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IdentListComma ::= Ident 
            {
              List<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentListComma",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IdentListComma ::= IdentListComma COMMA Ident 
            {
              List<Identifier> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Identifier> list = (List<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list; RESULT.add(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentListComma",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IfExpr ::= IF Expr LBRACE MethodBodyList RBRACE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodeGeneratable< ? >> b1 = (List<NodeGeneratable< ? >>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Expr.ifExpr(e, b1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfExpr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IfExpr ::= IF Expr Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.ifExpr(e, b1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfExpr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IfExpr ::= IF Expr LBRACE MethodBodyList RBRACE ELSE LBRACE MethodBodyList RBRACE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<NodeGeneratable< ? >> b1 = (List<NodeGeneratable< ? >>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodeGeneratable< ? >> b2 = (List<NodeGeneratable< ? >>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Expr.ifExpr(e, b1, b2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfExpr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IfExpr ::= IF Expr Expr ELSE Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression b1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.ifExpr(e, b1, b2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfExpr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WhileExpr ::= WHILE Expr Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Expr.whileExpr(e, l);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // WhileExpr ::= WHILE Expr LBRACE MethodBodyList RBRACE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<NodeGeneratable< ? >> l = (List<NodeGeneratable< ? >>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Expr.whileExpr(e, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Goto ::= GOTO Label 
            {
              NodeGeneratable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeGeneratable l = (NodeGeneratable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Stmt.Goto(l);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Goto",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Label ::= Ident COLON 
            {
              NodeGeneratable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Stmt.label(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Label",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
