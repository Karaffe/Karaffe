/* Generated By:JavaCC: Do not edit this line. KaraffeParserConstants.java */
package net.nokok.karaffe.javacc;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KaraffeParserConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int NewLine1 = 6;
    /**
     * RegularExpression Id.
     */
    int Type = 9;
    /**
     * RegularExpression Id.
     */
    int This = 10;
    /**
     * RegularExpression Id.
     */
    int SideEffect = 11;
    /**
     * RegularExpression Id.
     */
    int Bool = 12;
    /**
     * RegularExpression Id.
     */
    int True = 13;
    /**
     * RegularExpression Id.
     */
    int False = 14;
    /**
     * RegularExpression Id.
     */
    int Switch = 15;
    /**
     * RegularExpression Id.
     */
    int Check = 16;
    /**
     * RegularExpression Id.
     */
    int GlobalScope = 17;
    /**
     * RegularExpression Id.
     */
    int Native = 18;
    /**
     * RegularExpression Id.
     */
    int Unary = 19;
    /**
     * RegularExpression Id.
     */
    int To = 20;
    /**
     * RegularExpression Id.
     */
    int Colon = 21;
    /**
     * RegularExpression Id.
     */
    int Undefined = 22;
    /**
     * RegularExpression Id.
     */
    int Assign = 23;
    /**
     * RegularExpression Id.
     */
    int LBracket = 24;
    /**
     * RegularExpression Id.
     */
    int RBracket = 25;
    /**
     * RegularExpression Id.
     */
    int Range = 26;
    /**
     * RegularExpression Id.
     */
    int ClosedRange = 27;
    /**
     * RegularExpression Id.
     */
    int VariableId = 28;
    /**
     * RegularExpression Id.
     */
    int Digit = 29;
    /**
     * RegularExpression Id.
     */
    int Zero = 30;
    /**
     * RegularExpression Id.
     */
    int NonZero = 31;
    /**
     * RegularExpression Id.
     */
    int TypeId = 32;
    /**
     * RegularExpression Id.
     */
    int Alphabet = 33;
    /**
     * RegularExpression Id.
     */
    int Upper = 34;
    /**
     * RegularExpression Id.
     */
    int Lower = 35;
    /**
     * RegularExpression Id.
     */
    int NewLine = 36;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;
    /**
     * Lexical state.
     */
    int InComment = 1;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
        "<EOF>",
        "\" \"",
        "\"\\t\"",
        "<token of kind 3>",
        "\"/*\"",
        "\"/*\"",
        "<NewLine1>",
        "\"*/\"",
        "<token of kind 8>",
        "\"type\"",
        "\"this\"",
        "\"seffect\"",
        "<Bool>",
        "<True>",
        "<False>",
        "\"switch\"",
        "\"check\"",
        "\"global\"",
        "\"native\"",
        "\"unary\"",
        "\"to\"",
        "\":\"",
        "\"undefined\"",
        "\"=\"",
        "\"[\"",
        "\"]\"",
        "\"..\"",
        "\".<\"",
        "<VariableId>",
        "<Digit>",
        "\"0\"",
        "<NonZero>",
        "<TypeId>",
        "<Alphabet>",
        "<Upper>",
        "<Lower>",
        "<NewLine>", };

}
