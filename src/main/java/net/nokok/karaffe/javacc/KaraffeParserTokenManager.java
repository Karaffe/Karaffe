/* KaraffeParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. KaraffeParserTokenManager.java */
package net.nokok.karaffe.javacc;

/**
 * Token Manager.
 */
@SuppressWarnings("unused")
public class KaraffeParserTokenManager implements KaraffeParserConstants {

    public static int commentNestCount = 0;

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch ( pos ) {
            case 0:
                if ( (active0 & 0x13e800L) != 0L ) {
                    jjmatchedKind = 32;
                    return 26;
                }
                if ( (active0 & 0x40000010L) != 0L ) {
                    return 0;
                }
                if ( (active0 & 0x40600L) != 0L ) {
                    jjmatchedKind = 32;
                    return 8;
                }
                if ( (active0 & 0x200000L) != 0L ) {
                    jjmatchedKind = 36;
                    return 25;
                }
                return -1;
            case 1:
                if ( (active0 & 0x200000L) != 0L ) {
                    jjmatchedKind = 36;
                    jjmatchedPos = 1;
                    return 25;
                }
                if ( (active0 & 0x40000L) != 0L ) {
                    return 26;
                }
                if ( (active0 & 0x13ee00L) != 0L ) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 1;
                    return 26;
                }
                return -1;
            case 2:
                if ( (active0 & 0x200000L) != 0L ) {
                    jjmatchedKind = 36;
                    jjmatchedPos = 2;
                    return 25;
                }
                if ( (active0 & 0x13ee00L) != 0L ) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 2;
                    return 26;
                }
                return -1;
            case 3:
                if ( (active0 & 0x13e800L) != 0L ) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 3;
                    return 26;
                }
                if ( (active0 & 0x200000L) != 0L ) {
                    return 25;
                }
                if ( (active0 & 0x600L) != 0L ) {
                    return 26;
                }
                return -1;
            case 4:
                if ( (active0 & 0x24000L) != 0L ) {
                    return 26;
                }
                if ( (active0 & 0x11a800L) != 0L ) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 4;
                    return 26;
                }
                return -1;
            case 5:
                if ( (active0 & 0x100800L) != 0L ) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 5;
                    return 26;
                }
                if ( (active0 & 0x1a000L) != 0L ) {
                    return 26;
                }
                return -1;
            case 6:
                if ( (active0 & 0x100000L) != 0L ) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 6;
                    return 26;
                }
                if ( (active0 & 0x800L) != 0L ) {
                    return 26;
                }
                return -1;
            case 7:
                if ( (active0 & 0x100000L) != 0L ) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 7;
                    return 26;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch ( curChar ) {
            case 9:
                return jjStopAtPos(0, 2);
            case 32:
                return jjStopAtPos(0, 1);
            case 37:
                return jjStopAtPos(0, 31);
            case 42:
                return jjStopAtPos(0, 29);
            case 43:
                return jjStopAtPos(0, 27);
            case 45:
                return jjStopAtPos(0, 28);
            case 46:
                return jjMoveStringLiteralDfa1_0(0x6000000L);
            case 47:
                jjmatchedKind = 30;
                return jjMoveStringLiteralDfa1_0(0x10L);
            case 48:
                return jjStopAtPos(0, 34);
            case 58:
                return jjStopAtPos(0, 19);
            case 61:
                return jjStopAtPos(0, 22);
            case 86:
                return jjMoveStringLiteralDfa1_0(0x200000L);
            case 91:
                return jjStopAtPos(0, 23);
            case 93:
                return jjStopAtPos(0, 24);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x4000L);
            case 103:
                return jjMoveStringLiteralDfa1_0(0x8000L);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x10000L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x2800L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x40600L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x120000L);
            default:
                return jjMoveNfa_0(5, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch ( curChar ) {
            case 42:
                if ( (active0 & 0x10L) != 0L ) {
                    return jjStopAtPos(1, 4);
                }
                break;
            case 46:
                if ( (active0 & 0x2000000L) != 0L ) {
                    return jjStopAtPos(1, 25);
                }
                break;
            case 60:
                if ( (active0 & 0x4000000L) != 0L ) {
                    return jjStopAtPos(1, 26);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x800L);
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x4400L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x120000L);
            case 111:
                if ( (active0 & 0x40000L) != 0L ) {
                    return jjStartNfaWithStates_0(1, 18, 26);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
            case 119:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
            case 121:
                return jjMoveStringLiteralDfa2_0(active0, 0x200L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if ( ((active0 &= old0)) == 0L ) {
            return jjStartNfa_0(0, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch ( curChar ) {
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
            case 100:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
            case 102:
                return jjMoveStringLiteralDfa3_0(active0, 0x800L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x202400L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0x200L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if ( ((active0 &= old0)) == 0L ) {
            return jjStartNfa_0(1, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch ( curChar ) {
            case 98:
                return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
            case 100:
                if ( (active0 & 0x200000L) != 0L ) {
                    return jjStartNfaWithStates_0(3, 21, 25);
                }
                break;
            case 101:
                if ( (active0 & 0x200L) != 0L ) {
                    return jjStartNfaWithStates_0(3, 9, 26);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
            case 102:
                return jjMoveStringLiteralDfa4_0(active0, 0x800L);
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
            case 115:
                if ( (active0 & 0x400L) != 0L ) {
                    return jjStartNfaWithStates_0(3, 10, 26);
                }
                break;
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if ( ((active0 &= old0)) == 0L ) {
            return jjStartNfa_0(2, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch ( curChar ) {
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
            case 101:
                return jjMoveStringLiteralDfa5_0(active0, 0x800L);
            case 102:
                return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
            case 107:
                if ( (active0 & 0x4000L) != 0L ) {
                    return jjStartNfaWithStates_0(4, 14, 26);
                }
                break;
            case 118:
                return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
            case 121:
                if ( (active0 & 0x20000L) != 0L ) {
                    return jjStartNfaWithStates_0(4, 17, 26);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if ( ((active0 &= old0)) == 0L ) {
            return jjStartNfa_0(3, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch ( curChar ) {
            case 99:
                return jjMoveStringLiteralDfa6_0(active0, 0x800L);
            case 101:
                if ( (active0 & 0x10000L) != 0L ) {
                    return jjStartNfaWithStates_0(5, 16, 26);
                }
                break;
            case 104:
                if ( (active0 & 0x2000L) != 0L ) {
                    return jjStartNfaWithStates_0(5, 13, 26);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
            case 108:
                if ( (active0 & 0x8000L) != 0L ) {
                    return jjStartNfaWithStates_0(5, 15, 26);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if ( ((active0 &= old0)) == 0L ) {
            return jjStartNfa_0(4, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch ( curChar ) {
            case 110:
                return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
            case 116:
                if ( (active0 & 0x800L) != 0L ) {
                    return jjStartNfaWithStates_0(6, 11, 26);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if ( ((active0 &= old0)) == 0L ) {
            return jjStartNfa_0(5, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch ( curChar ) {
            case 101:
                return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if ( ((active0 &= old0)) == 0L ) {
            return jjStartNfa_0(6, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch ( curChar ) {
            case 100:
                if ( (active0 & 0x100000L) != 0L ) {
                    return jjStartNfaWithStates_0(8, 20, 26);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(7, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }
    static final long[] jjbitVec0 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 26;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for ( ;; ) {
            if ( ++jjround == 0x7fffffff ) {
                ReInitRounds();
            }
            if ( curChar < 64 ) {
                long l = 1L << curChar;
                do {
                    switch ( jjstateSet[--i] ) {
                        case 26:
                        case 19:
                            if ( (0x3fe000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 32 ) {
                                kind = 32;
                            }
                             {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 8:
                            if ( (0x3fe000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 32 ) {
                                kind = 32;
                            }
                             {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 5:
                            if ( (0x3fe000000000000L & l) != 0L ) {
                                if ( kind > 33 ) {
                                    kind = 33;
                                }
                                {
                                    jjCheckNAdd(23);
                                }
                            } else if ( (0x2400L & l) != 0L ) {
                                if ( kind > 40 ) {
                                    kind = 40;
                                }
                            } else if ( curChar == 47 ) {
                                jjstateSet[jjnewStateCnt++] = 0;
                            }
                            if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            }
                            break;
                        case 0:
                            if ( curChar == 47 ) {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 1:
                            if ( (0xfffffffffffffbffL & l) != 0L ) {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 2:
                            if ( (0x2400L & l) != 0L && kind > 3 ) {
                                kind = 3;
                            }
                            break;
                        case 3:
                            if ( curChar == 10 && kind > 3 ) {
                                kind = 3;
                            }
                            break;
                        case 4:
                            if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 3;
                            }
                            break;
                        case 15:
                            if ( (0x2400L & l) != 0L && kind > 40 ) {
                                kind = 40;
                            }
                            break;
                        case 16:
                            if ( curChar == 10 && kind > 40 ) {
                                kind = 40;
                            }
                            break;
                        case 17:
                            if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            }
                            break;
                        case 20:
                            if ( curChar != 48 ) {
                                break;
                            }
                            if ( kind > 32 ) {
                                kind = 32;
                            }
                             {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 22:
                            if ( (0x3fe000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 33 ) {
                                kind = 33;
                            }
                             {
                                jjCheckNAdd(23);
                            }
                            break;
                        case 23:
                            if ( curChar != 48 ) {
                                break;
                            }
                            if ( kind > 33 ) {
                                kind = 33;
                            }
                             {
                                jjCheckNAdd(23);
                            }
                            break;
                        default:
                            break;
                    }
                } while ( i != startsAt );
            } else if ( curChar < 128 ) {
                long l = 1L << (curChar & 077);
                do {
                    switch ( jjstateSet[--i] ) {
                        case 26:
                        case 21:
                            if ( (0x7fffffe07fffffeL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 32 ) {
                                kind = 32;
                            }
                             {
                                jjCheckNAddTwoStates(19, 21);
                            }
                            break;
                        case 8:
                            if ( (0x7fffffe07fffffeL & l) != 0L ) {
                                if ( kind > 32 ) {
                                    kind = 32;
                                }
                                {
                                    jjCheckNAddTwoStates(19, 21);
                                }
                            }
                            if ( curChar == 114 ) {
                                jjstateSet[jjnewStateCnt++] = 7;
                            }
                            break;
                        case 5:
                            if ( (0x7fffffe07fffffeL & l) != 0L ) {
                                if ( kind > 37 ) {
                                    kind = 37;
                                }
                            }
                            if ( (0x7fffffeL & l) != 0L ) {
                                if ( kind > 36 ) {
                                    kind = 36;
                                }
                                {
                                    jjCheckNAdd(25);
                                }
                            } else if ( (0x7fffffe00000000L & l) != 0L ) {
                                if ( kind > 32 ) {
                                    kind = 32;
                                }
                                {
                                    jjCheckNAddTwoStates(19, 21);
                                }
                            }
                            if ( curChar == 102 ) {
                                jjstateSet[jjnewStateCnt++] = 12;
                            } else if ( curChar == 116 ) {
                                jjstateSet[jjnewStateCnt++] = 8;
                            }
                            break;
                        case 1: {
                            jjAddStates(3, 5);
                        }
                        break;
                        case 6:
                            if ( curChar == 101 && kind > 12 ) {
                                kind = 12;
                            }
                            break;
                        case 7:
                            if ( curChar == 117 ) {
                                jjCheckNAdd(6);
                            }
                            break;
                        case 9:
                            if ( curChar == 116 ) {
                                jjstateSet[jjnewStateCnt++] = 8;
                            }
                            break;
                        case 10:
                            if ( curChar == 115 ) {
                                jjCheckNAdd(6);
                            }
                            break;
                        case 11:
                            if ( curChar == 108 ) {
                                jjstateSet[jjnewStateCnt++] = 10;
                            }
                            break;
                        case 12:
                            if ( curChar == 97 ) {
                                jjstateSet[jjnewStateCnt++] = 11;
                            }
                            break;
                        case 13:
                            if ( curChar == 102 ) {
                                jjstateSet[jjnewStateCnt++] = 12;
                            }
                            break;
                        case 14:
                            if ( (0x7fffffe07fffffeL & l) != 0L && kind > 37 ) {
                                kind = 37;
                            }
                            break;
                        case 18:
                            if ( (0x7fffffe00000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 32 ) {
                                kind = 32;
                            }
                             {
                                jjCheckNAddTwoStates(19, 21);
                            }
                            break;
                        case 24:
                            if ( (0x7fffffeL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 36 ) {
                                kind = 36;
                            }
                             {
                                jjCheckNAdd(25);
                            }
                            break;
                        case 25:
                            if ( (0x7fffffe07fffffeL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 36 ) {
                                kind = 36;
                            }
                             {
                                jjCheckNAdd(25);
                            }
                            break;
                        default:
                            break;
                    }
                } while ( i != startsAt );
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch ( jjstateSet[--i] ) {
                        case 1:
                            if ( (jjbitVec0[i2] & l2) != 0L ) {
                                jjAddStates(3, 5);
                            }
                            break;
                        default:
                            break;
                    }
                } while ( i != startsAt );
            }
            if ( kind != 0x7fffffff ) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ( (i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)) ) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_1(int pos, long active0) {
        switch ( pos ) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch ( curChar ) {
            case 42:
                return jjMoveStringLiteralDfa1_1(0x80L);
            case 47:
                return jjMoveStringLiteralDfa1_1(0x20L);
            default:
                return jjMoveNfa_1(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_1(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(0, active0);
            return 1;
        }
        switch ( curChar ) {
            case 42:
                if ( (active0 & 0x20L) != 0L ) {
                    return jjStopAtPos(1, 5);
                }
                break;
            case 47:
                if ( (active0 & 0x80L) != 0L ) {
                    return jjStopAtPos(1, 7);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_1(0, active0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for ( ;; ) {
            if ( ++jjround == 0x7fffffff ) {
                ReInitRounds();
            }
            if ( curChar < 64 ) {
                long l = 1L << curChar;
                do {
                    switch ( jjstateSet[--i] ) {
                        case 0:
                            if ( (0x2400L & l) != 0L ) {
                                if ( kind > 6 ) {
                                    kind = 6;
                                }
                            }
                            if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 1:
                            if ( curChar == 10 && kind > 6 ) {
                                kind = 6;
                            }
                            break;
                        case 2:
                            if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        default:
                            break;
                    }
                } while ( i != startsAt );
            } else if ( curChar < 128 ) {
                long l = 1L << (curChar & 077);
                do {
                    switch ( jjstateSet[--i] ) {
                        default:
                            break;
                    }
                } while ( i != startsAt );
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch ( jjstateSet[--i] ) {
                        default:
                            break;
                    }
                } while ( i != startsAt );
            }
            if ( kind != 0x7fffffff ) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ( (i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)) ) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = {
        19, 20, 21, 1, 2, 4, };

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, "\164\171\160\145",
        "\164\150\151\163", "\163\145\146\146\145\143\164", null, "\163\167\151\164\143\150",
        "\143\150\145\143\153", "\147\154\157\142\141\154", "\156\141\164\151\166\145",
        "\165\156\141\162\171", "\164\157", "\72", "\165\156\144\145\146\151\156\145\144", "\126\157\151\144",
        "\75", "\133", "\135", "\56\56", "\56\74", "\53", "\55", "\52", "\57", "\45", null,
        null, "\60", null, null, null, null, null, null, };

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for ( ;; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            for ( ;; ) {
                switch ( curLexState ) {
                    case 0:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if ( jjmatchedPos == 0 && jjmatchedKind > 8 ) {
                            jjmatchedKind = 8;
                        }
                        break;
                }
                if ( jjmatchedKind != 0x7fffffff ) {
                    if ( jjmatchedPos + 1 < curPos ) {
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    }
                    if ( (jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L ) {
                        matchedToken = jjFillToken();
                        TokenLexicalActions(matchedToken);
                        if ( jjnewLexState[jjmatchedKind] != -1 ) {
                            curLexState = jjnewLexState[jjmatchedKind];
                        }
                        return matchedToken;
                    } else if ( (jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L ) {
                        SkipLexicalActions(null);
                        if ( jjnewLexState[jjmatchedKind] != -1 ) {
                            curLexState = jjnewLexState[jjmatchedKind];
                        }
                        continue EOFLoop;
                    }
                    MoreLexicalActions();
                    if ( jjnewLexState[jjmatchedKind] != -1 ) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if ( curChar == '\n' || curChar == '\r' ) {
                        error_line++;
                        error_column = 0;
                    } else {
                        error_column++;
                    }
                }
                if ( !EOFSeen ) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch ( jjmatchedKind ) {
            case 1:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("Space");
                break;
            case 2:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("Tab");
                break;
            case 3:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("//");
                break;
            case 4:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestCount++;
                CompileLog.print("/* : level " + commentNestCount);
                SwitchTo(InComment);
                break;
            case 5:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("/* : level" + commentNestCount);
                commentNestCount++;
                break;
            case 6:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("NewLine in comment");
                break;
            case 7:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("*/ : level " + commentNestCount);
                commentNestCount--;
                if ( commentNestCount == 0 ) {
                    CompileLog.print("End Blockcomment");
                    SwitchTo(DEFAULT);
                }
                break;
            default:
                break;
        }
    }

    void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch ( jjmatchedKind ) {
            case 8:
                image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                CompileLog.print("InComment MORE");
                break;
            default:
                break;
        }
    }

    void TokenLexicalActions(Token matchedToken) {
        switch ( jjmatchedKind ) {
            case 9:
                image.append(jjstrLiteralImages[9]);
                lengthOfMatch = jjstrLiteralImages[9].length();
                CompileLog.print("type");
                break;
            case 10:
                image.append(jjstrLiteralImages[10]);
                lengthOfMatch = jjstrLiteralImages[10].length();
                CompileLog.print("this");
                break;
            case 11:
                image.append(jjstrLiteralImages[11]);
                lengthOfMatch = jjstrLiteralImages[11].length();
                CompileLog.print("seffect");
                break;
            case 12:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("Bool");
                break;
            case 13:
                image.append(jjstrLiteralImages[13]);
                lengthOfMatch = jjstrLiteralImages[13].length();
                CompileLog.print("switch");
                break;
            case 14:
                image.append(jjstrLiteralImages[14]);
                lengthOfMatch = jjstrLiteralImages[14].length();
                CompileLog.print("check");
                break;
            case 15:
                image.append(jjstrLiteralImages[15]);
                lengthOfMatch = jjstrLiteralImages[15].length();
                CompileLog.print("global");
                break;
            case 16:
                image.append(jjstrLiteralImages[16]);
                lengthOfMatch = jjstrLiteralImages[16].length();
                CompileLog.print("native");
                break;
            case 17:
                image.append(jjstrLiteralImages[17]);
                lengthOfMatch = jjstrLiteralImages[17].length();
                CompileLog.print("unary");
                break;
            case 18:
                image.append(jjstrLiteralImages[18]);
                lengthOfMatch = jjstrLiteralImages[18].length();
                CompileLog.print("to");
                break;
            case 19:
                image.append(jjstrLiteralImages[19]);
                lengthOfMatch = jjstrLiteralImages[19].length();
                CompileLog.print(":");
                break;
            case 20:
                image.append(jjstrLiteralImages[20]);
                lengthOfMatch = jjstrLiteralImages[20].length();
                CompileLog.print("undefined");
                break;
            case 21:
                image.append(jjstrLiteralImages[21]);
                lengthOfMatch = jjstrLiteralImages[21].length();
                CompileLog.print("Void");
                break;
            case 22:
                image.append(jjstrLiteralImages[22]);
                lengthOfMatch = jjstrLiteralImages[22].length();
                CompileLog.print("=");
                break;
            case 23:
                image.append(jjstrLiteralImages[23]);
                lengthOfMatch = jjstrLiteralImages[23].length();
                CompileLog.print("[");
                break;
            case 24:
                image.append(jjstrLiteralImages[24]);
                lengthOfMatch = jjstrLiteralImages[24].length();
                CompileLog.print("]");
                break;
            case 25:
                image.append(jjstrLiteralImages[25]);
                lengthOfMatch = jjstrLiteralImages[25].length();
                CompileLog.print("..");
                break;
            case 26:
                image.append(jjstrLiteralImages[26]);
                lengthOfMatch = jjstrLiteralImages[26].length();
                CompileLog.print(".<");
                break;
            case 27:
                image.append(jjstrLiteralImages[27]);
                lengthOfMatch = jjstrLiteralImages[27].length();
                CompileLog.print("+");
                break;
            case 28:
                image.append(jjstrLiteralImages[28]);
                lengthOfMatch = jjstrLiteralImages[28].length();
                CompileLog.print("-");
                break;
            case 29:
                image.append(jjstrLiteralImages[29]);
                lengthOfMatch = jjstrLiteralImages[29].length();
                CompileLog.print("*");
                break;
            case 30:
                image.append(jjstrLiteralImages[30]);
                lengthOfMatch = jjstrLiteralImages[30].length();
                CompileLog.print("/");
                break;
            case 31:
                image.append(jjstrLiteralImages[31]);
                lengthOfMatch = jjstrLiteralImages[31].length();
                CompileLog.print("%");
                break;
            case 32:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("VariableId");
                break;
            case 33:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("Digit");
                break;
            case 34:
                image.append(jjstrLiteralImages[34]);
                lengthOfMatch = jjstrLiteralImages[34].length();
                CompileLog.print("0");
                break;
            case 35:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("1~9");
                break;
            case 36:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("TypeId");
                break;
            case 37:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("A~z");
                break;
            case 38:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("A~Z");
                break;
            case 39:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("a~z");
                break;
            case 40:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CompileLog.print("NewLine");
                break;
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if ( jjrounds[state] != jjround ) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while ( start++ != end );
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while ( start++ != end );
    }

    /**
     * Constructor.
     */
    public KaraffeParserTokenManager(SimpleCharStream stream) {

        if ( SimpleCharStream.staticFlag ) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }

        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public KaraffeParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for ( i = 26; i-- > 0; ) {
            jjrounds[i] = 0x80000000;
        }
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if ( lexState >= 2 || lexState < 0 ) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
        "DEFAULT",
        "InComment", };

    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = {
        0x1fffffffe01L, };
    static final long[] jjtoSkip = {
        0xfeL, };
    static final long[] jjtoMore = {
        0x100L, };
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[26];
    private final int[] jjstateSet = new int[2 * 26];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;

    protected char curChar;
}
