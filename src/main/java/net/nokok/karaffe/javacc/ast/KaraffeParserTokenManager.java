/* KaraffeParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. KaraffeParserTokenManager.java */
package net.nokok.karaffe.javacc.ast;

/**
 * Token Manager.
 */
@SuppressWarnings("unused")
public class KaraffeParserTokenManager implements KaraffeParserConstants {

    public static int commentNestLevel = 0;

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch ( pos ) {
            case 0:
                if ( (active0 & 0x10000010L) != 0L ) {
                    return 0;
                }
                if ( (active0 & 0x20000000100L) != 0L ) {
                    return 70;
                }
                if ( (active0 & 0x400L) != 0L ) {
                    jjmatchedKind = 12;
                    return 71;
                }
                if ( (active0 & 0x200L) != 0L ) {
                    jjmatchedKind = 13;
                    return 8;
                }
                if ( (active0 & 0x4000000L) != 0L ) {
                    return 51;
                }
                if ( (active0 & 0x800L) != 0L ) {
                    return 67;
                }
                return -1;
            case 1:
                if ( (active0 & 0x400L) != 0L ) {
                    jjmatchedKind = 12;
                    jjmatchedPos = 1;
                    return 71;
                }
                if ( (active0 & 0x200L) != 0L ) {
                    return 72;
                }
                return -1;
            case 2:
                if ( (active0 & 0x400L) != 0L ) {
                    jjmatchedKind = 12;
                    jjmatchedPos = 2;
                    return 71;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch ( curChar ) {
            case 9:
                return jjStopAtPos(0, 2);
            case 32:
                return jjStopAtPos(0, 1);
            case 33:
                return jjStopAtPos(0, 33);
            case 35:
                return jjStopAtPos(0, 40);
            case 36:
                return jjStartNfaWithStates_0(0, 41, 70);
            case 37:
                return jjStopAtPos(0, 29);
            case 38:
                return jjStopAtPos(0, 31);
            case 42:
                return jjStopAtPos(0, 27);
            case 43:
                return jjStopAtPos(0, 25);
            case 45:
                return jjStartNfaWithStates_0(0, 26, 51);
            case 46:
                jjmatchedKind = 39;
                return jjMoveStringLiteralDfa1_0(0x18000L);
            case 47:
                jjmatchedKind = 28;
                return jjMoveStringLiteralDfa1_0(0x10L);
            case 48:
                return jjStartNfaWithStates_0(0, 11, 67);
            case 58:
                return jjStopAtPos(0, 45);
            case 60:
                jjmatchedKind = 34;
                return jjMoveStringLiteralDfa1_0(0x2000000000L);
            case 61:
                return jjStopAtPos(0, 35);
            case 62:
                jjmatchedKind = 36;
                return jjMoveStringLiteralDfa1_0(0x4000000000L);
            case 63:
                return jjStopAtPos(0, 42);
            case 74:
                return jjMoveStringLiteralDfa1_0(0x400L);
            case 91:
                return jjStopAtPos(0, 43);
            case 93:
                return jjStopAtPos(0, 44);
            case 95:
                return jjStartNfaWithStates_0(0, 8, 70);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x200L);
            case 124:
                return jjStopAtPos(0, 32);
            case 126:
                return jjStopAtPos(0, 30);
            default:
                return jjMoveNfa_0(5, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch ( curChar ) {
            case 42:
                if ( (active0 & 0x10L) != 0L ) {
                    return jjStopAtPos(1, 4);
                }
                break;
            case 46:
                if ( (active0 & 0x8000L) != 0L ) {
                    return jjStopAtPos(1, 15);
                }
                break;
            case 60:
                if ( (active0 & 0x10000L) != 0L ) {
                    return jjStopAtPos(1, 16);
                }
                break;
            case 61:
                if ( (active0 & 0x2000000000L) != 0L ) {
                    return jjStopAtPos(1, 37);
                } else if ( (active0 & 0x4000000000L) != 0L ) {
                    return jjStopAtPos(1, 38);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x400L);
            case 111:
                if ( (active0 & 0x200L) != 0L ) {
                    return jjStartNfaWithStates_0(1, 9, 72);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if ( ((active0 &= old0)) == 0L ) {
            return jjStartNfa_0(0, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch ( curChar ) {
            case 118:
                return jjMoveStringLiteralDfa3_0(active0, 0x400L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if ( ((active0 &= old0)) == 0L ) {
            return jjStartNfa_0(1, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch ( curChar ) {
            case 97:
                if ( (active0 & 0x400L) != 0L ) {
                    return jjStartNfaWithStates_0(3, 10, 71);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }
    static final long[] jjbitVec0 = {
        0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec2 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 70;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for ( ;; ) {
            if ( ++jjround == 0x7fffffff ) {
                ReInitRounds();
            }
            if ( curChar < 64 ) {
                long l = 1L << curChar;
                do {
                    switch ( jjstateSet[--i] ) {
                        case 70:
                            if ( curChar == 46 ) {
                                if ( kind > 47 ) {
                                    kind = 47;
                                }
                                {
                                    jjCheckNAdd(34);
                                }
                            } else if ( curChar == 36 ) {
                                jjCheckNAddTwoStates(32, 33);
                            }
                            break;
                        case 5:
                            if ( kind > 57 ) {
                                kind = 57;
                            }
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 49 ) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAdd(61);
                                }
                            } else if ( (0x2400L & l) != 0L ) {
                                if ( kind > 56 ) {
                                    kind = 56;
                                }
                            } else if ( curChar == 45 ) {
                                jjAddStates(0, 2);
                            } else if ( curChar == 36 ) {
                                jjCheckNAddTwoStates(32, 33);
                            } else if ( curChar == 34 ) {
                                jjCheckNAddStates(3, 5);
                            } else if ( curChar == 47 ) {
                                jjstateSet[jjnewStateCnt++] = 0;
                            }
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 48 ) {
                                    kind = 48;
                                }
                                {
                                    jjCheckNAdd(60);
                                }
                            } else if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 38;
                            }
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 19 ) {
                                    kind = 19;
                                }
                            }
                            if ( (0x3fe000000000000L & l) != 0L ) {
                                if ( kind > 20 ) {
                                    kind = 20;
                                }
                                {
                                    jjCheckNAddStates(6, 9);
                                }
                            } else if ( curChar == 48 ) {
                                jjCheckNAddStates(10, 13);
                            }
                            if ( curChar == 48 ) {
                                jjCheckNAdd(16);
                            }
                            break;
                        case 72:
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 49 ) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAdd(61);
                                }
                            } else if ( curChar == 46 ) {
                                if ( kind > 47 ) {
                                    kind = 47;
                                }
                                {
                                    jjCheckNAdd(34);
                                }
                            } else if ( curChar == 36 ) {
                                jjCheckNAddTwoStates(32, 33);
                            }
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 13 ) {
                                    kind = 13;
                                }
                                {
                                    jjCheckNAdd(49);
                                }
                            }
                            break;
                        case 67:
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 49 ) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAdd(61);
                                }
                            } else if ( curChar == 46 ) {
                                jjCheckNAddTwoStates(17, 24);
                            }
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 48 ) {
                                    kind = 48;
                                }
                                {
                                    jjCheckNAdd(60);
                                }
                            }
                            break;
                        case 51:
                            if ( (0x3fe000000000000L & l) != 0L ) {
                                jjCheckNAddTwoStates(52, 16);
                            } else if ( curChar == 48 ) {
                                jjCheckNAddTwoStates(54, 56);
                            }
                            if ( curChar == 48 ) {
                                jjCheckNAdd(16);
                            }
                            break;
                        case 8:
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 49 ) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAdd(61);
                                }
                            } else if ( curChar == 46 ) {
                                if ( kind > 47 ) {
                                    kind = 47;
                                }
                                {
                                    jjCheckNAdd(34);
                                }
                            } else if ( curChar == 36 ) {
                                jjCheckNAddTwoStates(32, 33);
                            }
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 13 ) {
                                    kind = 13;
                                }
                                {
                                    jjCheckNAdd(49);
                                }
                            }
                            break;
                        case 71:
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                if ( kind > 12 ) {
                                    kind = 12;
                                }
                                {
                                    jjCheckNAdd(47);
                                }
                            } else if ( curChar == 46 ) {
                                if ( kind > 47 ) {
                                    kind = 47;
                                }
                                {
                                    jjCheckNAdd(34);
                                }
                            } else if ( curChar == 36 ) {
                                jjCheckNAddTwoStates(32, 33);
                            }
                            break;
                        case 0:
                            if ( curChar == 47 ) {
                                jjCheckNAddStates(14, 16);
                            }
                            break;
                        case 1:
                            if ( (0xfffffffffffffbffL & l) != 0L ) {
                                jjCheckNAddStates(14, 16);
                            }
                            break;
                        case 2:
                            if ( (0x2400L & l) != 0L && kind > 3 ) {
                                kind = 3;
                            }
                            break;
                        case 3:
                            if ( curChar == 10 && kind > 3 ) {
                                kind = 3;
                            }
                            break;
                        case 4:
                            if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 3;
                            }
                            break;
                        case 14:
                            if ( (0x3ff000000000000L & l) != 0L && kind > 19 ) {
                                kind = 19;
                            }
                            break;
                        case 15:
                            if ( curChar == 48 ) {
                                jjCheckNAdd(16);
                            }
                            break;
                        case 16:
                            if ( curChar == 46 ) {
                                jjCheckNAddTwoStates(17, 24);
                            }
                            break;
                        case 17:
                            if ( curChar == 48 ) {
                                jjCheckNAddTwoStates(17, 18);
                            }
                            break;
                        case 18:
                            if ( (0x3fe000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 23 ) {
                                kind = 23;
                            }
                             {
                                jjCheckNAddTwoStates(19, 20);
                            }
                            break;
                        case 19:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 23 ) {
                                kind = 23;
                            }
                             {
                                jjCheckNAddTwoStates(19, 20);
                            }
                            break;
                        case 21:
                            if ( curChar == 45 ) {
                                jjstateSet[jjnewStateCnt++] = 22;
                            }
                            break;
                        case 22:
                            if ( (0x3fe000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 23 ) {
                                kind = 23;
                            }
                             {
                                jjCheckNAdd(23);
                            }
                            break;
                        case 23:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 23 ) {
                                kind = 23;
                            }
                             {
                                jjCheckNAdd(23);
                            }
                            break;
                        case 24:
                            if ( (0x3fe000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 23 ) {
                                kind = 23;
                            }
                             {
                                jjCheckNAddTwoStates(25, 20);
                            }
                            break;
                        case 25:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 23 ) {
                                kind = 23;
                            }
                             {
                                jjCheckNAddTwoStates(25, 20);
                            }
                            break;
                        case 26:
                            if ( curChar == 34 ) {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 27: {
                            jjCheckNAddStates(3, 5);
                        }
                        break;
                        case 29:
                            if ( (0x8400000000L & l) != 0L ) {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 30:
                            if ( curChar == 34 && kind > 24 ) {
                                kind = 24;
                            }
                            break;
                        case 32:
                            if ( curChar == 36 ) {
                                jjCheckNAddTwoStates(32, 33);
                            }
                            break;
                        case 33:
                            if ( curChar != 46 ) {
                                break;
                            }
                            if ( kind > 47 ) {
                                kind = 47;
                            }
                             {
                                jjCheckNAdd(34);
                            }
                            break;
                        case 34:
                            if ( (0x3ff001000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 47 ) {
                                kind = 47;
                            }
                             {
                                jjCheckNAddTwoStates(35, 34);
                            }
                            break;
                        case 35:
                            if ( (0x3ff001000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 47 ) {
                                kind = 47;
                            }
                             {
                                jjCheckNAdd(35);
                            }
                            break;
                        case 37:
                            if ( (0x2400L & l) != 0L && kind > 56 ) {
                                kind = 56;
                            }
                            break;
                        case 38:
                            if ( curChar == 10 && kind > 56 ) {
                                kind = 56;
                            }
                            break;
                        case 39:
                            if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 38;
                            }
                            break;
                        case 41:
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                jjstateSet[jjnewStateCnt++] = 42;
                            }
                            break;
                        case 42:
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                jjstateSet[jjnewStateCnt++] = 43;
                            }
                            break;
                        case 43:
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                jjstateSet[jjnewStateCnt++] = 44;
                            }
                            break;
                        case 44:
                            if ( (0x3ff000000000000L & l) != 0L && kind > 60 ) {
                                kind = 60;
                            }
                            break;
                        case 47:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 12 ) {
                                kind = 12;
                            }
                             {
                                jjCheckNAdd(47);
                            }
                            break;
                        case 49:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 13 ) {
                                kind = 13;
                            }
                             {
                                jjCheckNAdd(49);
                            }
                            break;
                        case 50:
                            if ( curChar == 45 ) {
                                jjAddStates(0, 2);
                            }
                            break;
                        case 52:
                            if ( (0x3ff000000000000L & l) != 0L ) {
                                jjCheckNAddTwoStates(52, 16);
                            }
                            break;
                        case 53:
                            if ( curChar == 48 ) {
                                jjCheckNAddTwoStates(54, 56);
                            }
                            break;
                        case 55:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 20 ) {
                                kind = 20;
                            }
                            jjstateSet[jjnewStateCnt++] = 55;
                            break;
                        case 57:
                            if ( (0x3fe000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 20 ) {
                                kind = 20;
                            }
                             {
                                jjCheckNAddStates(6, 9);
                            }
                            break;
                        case 58:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 20 ) {
                                kind = 20;
                            }
                             {
                                jjCheckNAdd(58);
                            }
                            break;
                        case 59:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 21 ) {
                                kind = 21;
                            }
                             {
                                jjCheckNAdd(59);
                            }
                            break;
                        case 60:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 48 ) {
                                kind = 48;
                            }
                             {
                                jjCheckNAdd(60);
                            }
                            break;
                        case 61:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 49 ) {
                                kind = 49;
                            }
                             {
                                jjCheckNAdd(61);
                            }
                            break;
                        case 62:
                            if ( kind > 57 ) {
                                kind = 57;
                            }
                            break;
                        case 64:
                            if ( (0x8400000000L & l) != 0L && kind > 57 ) {
                                kind = 57;
                            }
                            break;
                        case 65:
                            if ( (0x8400000000L & l) != 0L && kind > 59 ) {
                                kind = 59;
                            }
                            break;
                        case 66:
                            if ( curChar == 48 ) {
                                jjCheckNAddStates(10, 13);
                            }
                            break;
                        case 68:
                            if ( (0x3ff000000000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 22 ) {
                                kind = 22;
                            }
                            jjstateSet[jjnewStateCnt++] = 68;
                            break;
                        default:
                            break;
                    }
                } while ( i != startsAt );
            } else if ( curChar < 128 ) {
                long l = 1L << (curChar & 077);
                do {
                    switch ( jjstateSet[--i] ) {
                        case 70:
                        case 32:
                            if ( (0x7fffffe87fffffeL & l) != 0L ) {
                                jjCheckNAddTwoStates(32, 33);
                            }
                            break;
                        case 5:
                            if ( kind > 57 ) {
                                kind = 57;
                            }
                            if ( (0x7fffffe87fffffeL & l) != 0L ) {
                                jjCheckNAddTwoStates(32, 33);
                            } else if ( curChar == 92 ) {
                                jjAddStates(17, 18);
                            }
                            if ( (0x7fffffe87fffffeL & l) != 0L ) {
                                if ( kind > 19 ) {
                                    kind = 19;
                                }
                            } else if ( curChar == 92 ) {
                                jjstateSet[jjnewStateCnt++] = 40;
                            }
                            if ( (0x7fffffe07fffffeL & l) != 0L ) {
                                if ( kind > 53 ) {
                                    kind = 53;
                                }
                            }
                            if ( (0x7fffffe0000007eL & l) != 0L ) {
                                if ( kind > 49 ) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAdd(61);
                                }
                            }
                            if ( (0x7fffffe00000000L & l) != 0L ) {
                                if ( kind > 13 ) {
                                    kind = 13;
                                }
                                {
                                    jjCheckNAdd(49);
                                }
                            } else if ( (0x7fffffeL & l) != 0L ) {
                                if ( kind > 12 ) {
                                    kind = 12;
                                }
                                {
                                    jjCheckNAdd(47);
                                }
                            }
                            if ( (0x2000000020L & l) != 0L ) {
                                if ( kind > 46 ) {
                                    kind = 46;
                                }
                            } else if ( curChar == 102 ) {
                                jjstateSet[jjnewStateCnt++] = 12;
                            } else if ( curChar == 116 ) {
                                jjstateSet[jjnewStateCnt++] = 8;
                            }
                            break;
                        case 72:
                            if ( (0x7fffffe87fffffeL & l) != 0L ) {
                                jjCheckNAddTwoStates(32, 33);
                            }
                            if ( (0x7fffffe87fffffeL & l) != 0L ) {
                                if ( kind > 13 ) {
                                    kind = 13;
                                }
                                {
                                    jjCheckNAdd(49);
                                }
                            }
                            if ( (0x7fffffe0000007eL & l) != 0L ) {
                                if ( kind > 49 ) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAdd(61);
                                }
                            }
                            break;
                        case 67:
                            if ( (0x7fffffe0000007eL & l) != 0L ) {
                                if ( kind > 49 ) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAdd(61);
                                }
                            } else if ( curChar == 88 ) {
                                jjCheckNAdd(68);
                            }
                            if ( curChar == 120 ) {
                                jjCheckNAdd(68);
                            } else if ( curChar == 88 ) {
                                jjCheckNAdd(55);
                            }
                            if ( curChar == 120 ) {
                                jjCheckNAdd(55);
                            }
                            break;
                        case 8:
                            if ( (0x7fffffe87fffffeL & l) != 0L ) {
                                jjCheckNAddTwoStates(32, 33);
                            }
                            if ( (0x7fffffe87fffffeL & l) != 0L ) {
                                if ( kind > 13 ) {
                                    kind = 13;
                                }
                                {
                                    jjCheckNAdd(49);
                                }
                            }
                            if ( (0x7fffffe0000007eL & l) != 0L ) {
                                if ( kind > 49 ) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAdd(61);
                                }
                            }
                            if ( curChar == 114 ) {
                                jjstateSet[jjnewStateCnt++] = 7;
                            }
                            break;
                        case 71:
                            if ( (0x7fffffe87fffffeL & l) != 0L ) {
                                jjCheckNAddTwoStates(32, 33);
                            }
                            if ( (0x7fffffe87fffffeL & l) != 0L ) {
                                if ( kind > 12 ) {
                                    kind = 12;
                                }
                                {
                                    jjCheckNAdd(47);
                                }
                            }
                            break;
                        case 1: {
                            jjAddStates(14, 16);
                        }
                        break;
                        case 6:
                            if ( curChar == 101 && kind > 14 ) {
                                kind = 14;
                            }
                            break;
                        case 7:
                            if ( curChar == 117 ) {
                                jjCheckNAdd(6);
                            }
                            break;
                        case 9:
                            if ( curChar == 116 ) {
                                jjstateSet[jjnewStateCnt++] = 8;
                            }
                            break;
                        case 10:
                            if ( curChar == 115 ) {
                                jjCheckNAdd(6);
                            }
                            break;
                        case 11:
                            if ( curChar == 108 ) {
                                jjstateSet[jjnewStateCnt++] = 10;
                            }
                            break;
                        case 12:
                            if ( curChar == 97 ) {
                                jjstateSet[jjnewStateCnt++] = 11;
                            }
                            break;
                        case 13:
                            if ( curChar == 102 ) {
                                jjstateSet[jjnewStateCnt++] = 12;
                            }
                            break;
                        case 14:
                            if ( (0x7fffffe87fffffeL & l) != 0L && kind > 19 ) {
                                kind = 19;
                            }
                            break;
                        case 20:
                            if ( (0x2000000020L & l) != 0L ) {
                                jjAddStates(19, 20);
                            }
                            break;
                        case 27: {
                            jjCheckNAddStates(3, 5);
                        }
                        break;
                        case 28:
                            if ( curChar == 92 ) {
                                jjstateSet[jjnewStateCnt++] = 29;
                            }
                            break;
                        case 29:
                            if ( (0x54400410000000L & l) != 0L ) {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 31:
                            if ( (0x2000000020L & l) != 0L && kind > 46 ) {
                                kind = 46;
                            }
                            break;
                        case 34:
                            if ( (0x7fffffe87fffffeL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 47 ) {
                                kind = 47;
                            }
                             {
                                jjCheckNAddTwoStates(35, 34);
                            }
                            break;
                        case 35:
                            if ( (0x7fffffe87fffffeL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 47 ) {
                                kind = 47;
                            }
                             {
                                jjCheckNAdd(35);
                            }
                            break;
                        case 36:
                            if ( (0x7fffffe07fffffeL & l) != 0L && kind > 53 ) {
                                kind = 53;
                            }
                            break;
                        case 40:
                            if ( curChar == 117 ) {
                                jjstateSet[jjnewStateCnt++] = 41;
                            }
                            break;
                        case 41:
                            if ( (0x7fffffe0000007eL & l) != 0L ) {
                                jjstateSet[jjnewStateCnt++] = 42;
                            }
                            break;
                        case 42:
                            if ( (0x7fffffe0000007eL & l) != 0L ) {
                                jjstateSet[jjnewStateCnt++] = 43;
                            }
                            break;
                        case 43:
                            if ( (0x7fffffe0000007eL & l) != 0L ) {
                                jjstateSet[jjnewStateCnt++] = 44;
                            }
                            break;
                        case 44:
                            if ( (0x7fffffe0000007eL & l) != 0L && kind > 60 ) {
                                kind = 60;
                            }
                            break;
                        case 45:
                            if ( curChar == 92 ) {
                                jjstateSet[jjnewStateCnt++] = 40;
                            }
                            break;
                        case 46:
                            if ( (0x7fffffeL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 12 ) {
                                kind = 12;
                            }
                             {
                                jjCheckNAdd(47);
                            }
                            break;
                        case 47:
                            if ( (0x7fffffe87fffffeL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 12 ) {
                                kind = 12;
                            }
                             {
                                jjCheckNAdd(47);
                            }
                            break;
                        case 48:
                            if ( (0x7fffffe00000000L & l) == 0L ) {
                                break;
                            }
                            if ( kind > 13 ) {
                                kind = 13;
                            }
                             {
                                jjCheckNAdd(49);
                            }
                            break;
                        case 49:
                            if ( (0x7fffffe87fffffeL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 13 ) {
                                kind = 13;
                            }
                             {
                                jjCheckNAdd(49);
                            }
                            break;
                        case 54:
                            if ( curChar == 120 ) {
                                jjCheckNAdd(55);
                            }
                            break;
                        case 55:
                            if ( (0x7fffffe0000007eL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 20 ) {
                                kind = 20;
                            }
                             {
                                jjCheckNAdd(55);
                            }
                            break;
                        case 56:
                            if ( curChar == 88 ) {
                                jjCheckNAdd(55);
                            }
                            break;
                        case 61:
                            if ( (0x7fffffe0000007eL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 49 ) {
                                kind = 49;
                            }
                             {
                                jjCheckNAdd(61);
                            }
                            break;
                        case 62:
                            if ( kind > 57 ) {
                                kind = 57;
                            }
                            break;
                        case 63:
                            if ( curChar == 92 ) {
                                jjAddStates(17, 18);
                            }
                            break;
                        case 64:
                            if ( (0x54400410000000L & l) != 0L && kind > 57 ) {
                                kind = 57;
                            }
                            break;
                        case 65:
                            if ( (0x54400410000000L & l) != 0L && kind > 59 ) {
                                kind = 59;
                            }
                            break;
                        case 68:
                            if ( (0x7fffffe0000007eL & l) == 0L ) {
                                break;
                            }
                            if ( kind > 22 ) {
                                kind = 22;
                            }
                             {
                                jjCheckNAdd(68);
                            }
                            break;
                        case 69:
                            if ( curChar == 88 ) {
                                jjCheckNAdd(68);
                            }
                            break;
                        default:
                            break;
                    }
                } while ( i != startsAt );
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch ( jjstateSet[--i] ) {
                        case 5:
                            if ( jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 57 ) {
                                kind = 57;
                            }
                            break;
                        case 1:
                            if ( jjCanMove_0(hiByte, i1, i2, l1, l2) ) {
                                jjAddStates(14, 16);
                            }
                            break;
                        case 27:
                            if ( jjCanMove_0(hiByte, i1, i2, l1, l2) ) {
                                jjAddStates(3, 5);
                            }
                            break;
                        default:
                            if ( i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0 ) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while ( i != startsAt );
            }
            if ( kind != 0x7fffffff ) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ( (i = jjnewStateCnt) == (startsAt = 70 - (jjnewStateCnt = startsAt)) ) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_1(int pos, long active0) {
        switch ( pos ) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch ( curChar ) {
            case 42:
                return jjMoveStringLiteralDfa1_1(0x80L);
            case 47:
                return jjMoveStringLiteralDfa1_1(0x20L);
            default:
                return jjMoveNfa_1(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_1(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(0, active0);
            return 1;
        }
        switch ( curChar ) {
            case 42:
                if ( (active0 & 0x20L) != 0L ) {
                    return jjStopAtPos(1, 5);
                }
                break;
            case 47:
                if ( (active0 & 0x80L) != 0L ) {
                    return jjStopAtPos(1, 7);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_1(0, active0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for ( ;; ) {
            if ( ++jjround == 0x7fffffff ) {
                ReInitRounds();
            }
            if ( curChar < 64 ) {
                long l = 1L << curChar;
                do {
                    switch ( jjstateSet[--i] ) {
                        case 0:
                            if ( (0x2400L & l) != 0L ) {
                                if ( kind > 6 ) {
                                    kind = 6;
                                }
                            }
                            if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 1:
                            if ( curChar == 10 && kind > 6 ) {
                                kind = 6;
                            }
                            break;
                        case 2:
                            if ( curChar == 13 ) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        default:
                            break;
                    }
                } while ( i != startsAt );
            } else if ( curChar < 128 ) {
                long l = 1L << (curChar & 077);
                do {
                    switch ( jjstateSet[--i] ) {
                        default:
                            break;
                    }
                } while ( i != startsAt );
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch ( jjstateSet[--i] ) {
                        default:
                            if ( i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0 ) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while ( i != startsAt );
            }
            if ( kind != 0x7fffffff ) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ( (i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)) ) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = {
        15, 51, 53, 27, 28, 30, 58, 59, 52, 16, 54, 56, 67, 69, 1, 2,
        4, 64, 65, 21, 22, };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch ( hiByte ) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ( (jjbitVec0[i1] & l1) != 0L ) {
                    return true;
                }
                return false;
        }
    }

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, "\137", "\164\157",
        "\112\141\166\141", "\60", null, null, null, "\56\56", "\56\74", null, null, null, null, null,
        null, null, null, "\53", "\55", "\52", "\57", "\45", "\176", "\46", "\174", "\41",
        "\74", "\75", "\76", "\74\75", "\76\75", "\56", "\43", "\44", "\77", "\133", "\135",
        "\72", null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, };

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for ( ;; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            switch ( curLexState ) {
                case 0:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    break;
            }
            if ( jjmatchedKind != 0x7fffffff ) {
                if ( jjmatchedPos + 1 < curPos ) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ( (jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L ) {
                    matchedToken = jjFillToken();
                    if ( jjnewLexState[jjmatchedKind] != -1 ) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    return matchedToken;
                } else {
                    SkipLexicalActions(null);
                    if ( jjnewLexState[jjmatchedKind] != -1 ) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if ( curChar == '\n' || curChar == '\r' ) {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if ( !EOFSeen ) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch ( jjmatchedKind ) {
            case 4:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestLevel++;
                SwitchTo(InComment);
                break;
            case 5:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestLevel++;
                break;
            case 7:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestLevel--;
                if ( commentNestLevel == 0 ) {
                    SwitchTo(DEFAULT);
                }
                break;
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if ( jjrounds[state] != jjround ) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while ( start++ != end );
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while ( start++ != end );
    }

    /**
     * Constructor.
     */
    public KaraffeParserTokenManager(SimpleCharStream stream) {

        if ( SimpleCharStream.staticFlag ) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }

        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public KaraffeParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for ( i = 70; i-- > 0; ) {
            jjrounds[i] = 0x80000000;
        }
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if ( lexState >= 2 || lexState < 0 ) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
        "DEFAULT",
        "InComment", };

    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = {
        0x1fffffffffffff01L, };
    static final long[] jjtoSkip = {
        0xfeL, };
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[70];
    private final int[] jjstateSet = new int[2 * 70];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;

    protected char curChar;
}
