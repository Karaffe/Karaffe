/* Generated By:JavaCC: Do not edit this line. KaraffeParserConstants.java */
package net.nokok.karaffe.javacc.ast;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KaraffeParserConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int EndOfLine = 6;
    /**
     * RegularExpression Id.
     */
    int Underscore = 8;
    /**
     * RegularExpression Id.
     */
    int To = 9;
    /**
     * RegularExpression Id.
     */
    int Java = 10;
    /**
     * RegularExpression Id.
     */
    int Zero = 11;
    /**
     * RegularExpression Id.
     */
    int TypeId = 12;
    /**
     * RegularExpression Id.
     */
    int VariableId = 13;
    /**
     * RegularExpression Id.
     */
    int BoolLiteral = 14;
    /**
     * RegularExpression Id.
     */
    int Range = 15;
    /**
     * RegularExpression Id.
     */
    int ClosedRange = 16;
    /**
     * RegularExpression Id.
     */
    int TypeIdHead = 17;
    /**
     * RegularExpression Id.
     */
    int VariableIdHead = 18;
    /**
     * RegularExpression Id.
     */
    int IdentifierCharacter = 19;
    /**
     * RegularExpression Id.
     */
    int IntLiteral = 20;
    /**
     * RegularExpression Id.
     */
    int Decimal = 21;
    /**
     * RegularExpression Id.
     */
    int Hexiadecimal = 22;
    /**
     * RegularExpression Id.
     */
    int FloatLiteral = 23;
    /**
     * RegularExpression Id.
     */
    int StringLiteral = 24;
    /**
     * RegularExpression Id.
     */
    int Plus = 25;
    /**
     * RegularExpression Id.
     */
    int Minus = 26;
    /**
     * RegularExpression Id.
     */
    int Star = 27;
    /**
     * RegularExpression Id.
     */
    int Slash = 28;
    /**
     * RegularExpression Id.
     */
    int Percent = 29;
    /**
     * RegularExpression Id.
     */
    int Tilde = 30;
    /**
     * RegularExpression Id.
     */
    int Ampersand = 31;
    /**
     * RegularExpression Id.
     */
    int VerticalBar = 32;
    /**
     * RegularExpression Id.
     */
    int Exclamation = 33;
    /**
     * RegularExpression Id.
     */
    int LessThan = 34;
    /**
     * RegularExpression Id.
     */
    int EqualSign = 35;
    /**
     * RegularExpression Id.
     */
    int GreaterThan = 36;
    /**
     * RegularExpression Id.
     */
    int LessThanEqualTo = 37;
    /**
     * RegularExpression Id.
     */
    int GreaterThanEqualTo = 38;
    /**
     * RegularExpression Id.
     */
    int Dot = 39;
    /**
     * RegularExpression Id.
     */
    int NumberSign = 40;
    /**
     * RegularExpression Id.
     */
    int DollarSign = 41;
    /**
     * RegularExpression Id.
     */
    int Question = 42;
    /**
     * RegularExpression Id.
     */
    int LeftBracket = 43;
    /**
     * RegularExpression Id.
     */
    int RightBracket = 44;
    /**
     * RegularExpression Id.
     */
    int Colon = 45;
    /**
     * RegularExpression Id.
     */
    int Exp = 46;
    /**
     * RegularExpression Id.
     */
    int JavaFQCN = 47;
    /**
     * RegularExpression Id.
     */
    int Digits = 48;
    /**
     * RegularExpression Id.
     */
    int HexDigits = 49;
    /**
     * RegularExpression Id.
     */
    int Digit = 50;
    /**
     * RegularExpression Id.
     */
    int HexDigit = 51;
    /**
     * RegularExpression Id.
     */
    int NonZero = 52;
    /**
     * RegularExpression Id.
     */
    int Alphabet = 53;
    /**
     * RegularExpression Id.
     */
    int Upper = 54;
    /**
     * RegularExpression Id.
     */
    int Lower = 55;
    /**
     * RegularExpression Id.
     */
    int NewLine = 56;
    /**
     * RegularExpression Id.
     */
    int UnicodeValue = 57;
    /**
     * RegularExpression Id.
     */
    int UnicodeChar = 58;
    /**
     * RegularExpression Id.
     */
    int EscapedChar = 59;
    /**
     * RegularExpression Id.
     */
    int UnicodeEscape = 60;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;
    /**
     * Lexical state.
     */
    int InComment = 1;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
        "<EOF>",
        "\" \"",
        "\"\\t\"",
        "<token of kind 3>",
        "\"/*\"",
        "\"/*\"",
        "<EndOfLine>",
        "\"*/\"",
        "\"_\"",
        "\"to\"",
        "\"Java\"",
        "\"0\"",
        "<TypeId>",
        "<VariableId>",
        "<BoolLiteral>",
        "\"..\"",
        "\".<\"",
        "<TypeIdHead>",
        "<VariableIdHead>",
        "<IdentifierCharacter>",
        "<IntLiteral>",
        "<Decimal>",
        "<Hexiadecimal>",
        "<FloatLiteral>",
        "<StringLiteral>",
        "\"+\"",
        "\"-\"",
        "\"*\"",
        "\"/\"",
        "\"%\"",
        "\"~\"",
        "\"&\"",
        "\"|\"",
        "\"!\"",
        "\"<\"",
        "\"=\"",
        "\">\"",
        "\"<=\"",
        "\">=\"",
        "\".\"",
        "\"#\"",
        "\"$\"",
        "\"?\"",
        "\"[\"",
        "\"]\"",
        "\":\"",
        "<Exp>",
        "<JavaFQCN>",
        "<Digits>",
        "<HexDigits>",
        "<Digit>",
        "<HexDigit>",
        "<NonZero>",
        "<Alphabet>",
        "<Upper>",
        "<Lower>",
        "<NewLine>",
        "<UnicodeValue>",
        "<UnicodeChar>",
        "<EscapedChar>",
        "<UnicodeEscape>", };

}
