/* KaraffeParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. KaraffeParserTokenManager.java */
package net.nokok.karaffe.parser;

/** Token Manager. */
@SuppressWarnings("unused")
public class KaraffeParserTokenManager implements KaraffeParserConstants {

    public static int commentNestLevel = 0;

    /** Debug output. */
    public java.io.PrintStream debugStream = System.out;

    /** Set debug output. */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active0 & 0x400000000000040L) != 0L || (active1 & 0x18L) != 0L) {
                    return 0;
                }
                if ((active0 & 0xd7ff806L) != 0L) {
                    jjmatchedKind = 40;
                    return 31;
                }
                if ((active0 & 0x2800000L) != 0L) {
                    jjmatchedKind = 40;
                    return 5;
                }
                return -1;
            case 1:
                if ((active0 & 0x40000L) != 0L) {
                    return 31;
                }
                if ((active0 & 0xffbf806L) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 40;
                        jjmatchedPos = 1;
                    }
                    return 31;
                }
                return -1;
            case 2:
                if ((active0 & 0x7fbf804L) != 0L) {
                    jjmatchedKind = 40;
                    jjmatchedPos = 2;
                    return 31;
                }
                if ((active0 & 0x8000002L) != 0L) {
                    return 31;
                }
                return -1;
            case 3:
                if ((active0 & 0x2812000L) != 0L) {
                    return 31;
                }
                if ((active0 & 0x57ad804L) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 40;
                        jjmatchedPos = 3;
                    }
                    return 31;
                }
                return -1;
            case 4:
                if ((active0 & 0x1000L) != 0L) {
                    return 31;
                }
                if ((active0 & 0x77ac804L) != 0L) {
                    jjmatchedKind = 40;
                    jjmatchedPos = 4;
                    return 31;
                }
                return -1;
            case 5:
                if ((active0 & 0x624000L) != 0L) {
                    return 31;
                }
                if ((active0 & 0x7188804L) != 0L) {
                    jjmatchedKind = 40;
                    jjmatchedPos = 5;
                    return 31;
                }
                return -1;
            case 6:
                if ((active0 & 0x6088800L) != 0L) {
                    jjmatchedKind = 40;
                    jjmatchedPos = 6;
                    return 31;
                }
                if ((active0 & 0x1100004L) != 0L) {
                    return 31;
                }
                return -1;
            case 7:
                if ((active0 & 0x80800L) != 0L) {
                    return 31;
                }
                if ((active0 & 0x6008000L) != 0L) {
                    jjmatchedKind = 40;
                    jjmatchedPos = 7;
                    return 31;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 33:
                jjmatchedKind = 72;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x600000L);
            case 35:
                jjmatchedKind = 44;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
            case 37:
                jjmatchedKind = 69;
                return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x40L);
            case 38:
                return jjStopAtPos(0, 73);
            case 40:
                return jjStopAtPos(0, 49);
            case 41:
                return jjStopAtPos(0, 50);
            case 42:
                jjmatchedKind = 66;
                return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
            case 43:
                jjmatchedKind = 64;
                return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
            case 44:
                return jjStopAtPos(0, 43);
            case 45:
                jjmatchedKind = 65;
                return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x10000L);
            case 46:
                jjmatchedKind = 53;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000L);
            case 47:
                jjmatchedKind = 67;
                return jjMoveStringLiteralDfa1_0(0x400000000000040L, 0x10L);
            case 58:
                jjmatchedKind = 51;
                return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
            case 60:
                jjmatchedKind = 60;
                return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x802000L);
            case 61:
                jjmatchedKind = 54;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x180000L);
            case 62:
                jjmatchedKind = 62;
                return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
            case 63:
                return jjStopAtPos(0, 76);
            case 64:
                return jjStopAtPos(0, 91);
            case 91:
                return jjStopAtPos(0, 45);
            case 93:
                return jjStopAtPos(0, 46);
            case 94:
                return jjStopAtPos(0, 75);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x2004L, 0x0L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0xc000L, 0x0L);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
            case 109:
                return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
            case 111:
                return jjMoveStringLiteralDfa1_0(0xc0000L, 0x0L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x600000L, 0x0L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x2800000L, 0x0L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x5000000L, 0x0L);
            case 118:
                return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
            case 123:
                return jjStopAtPos(0, 47);
            case 124:
                return jjStopAtPos(0, 74);
            case 125:
                return jjStopAtPos(0, 48);
            case 126:
                jjmatchedKind = 71;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x60000L);
            case 8592:
                return jjStopAtPos(0, 78);
            case 8594:
                return jjStopAtPos(0, 79);
            default:
                return jjMoveNfa_0(2, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
            case 40:
                if ((active1 & 0x10000000L) != 0L) {
                    return jjStopAtPos(1, 92);
                }
                break;
            case 42:
                if ((active0 & 0x40L) != 0L) {
                    return jjStopAtPos(1, 6);
                }
                break;
            case 45:
                if ((active1 & 0x2000L) != 0L) {
                    return jjStopAtPos(1, 77);
                }
                break;
            case 46:
                if ((active1 & 0x1000000L) != 0L) {
                    return jjStopAtPos(1, 88);
                }
                break;
            case 58:
                if ((active0 & 0x10000000000000L) != 0L) {
                    return jjStopAtPos(1, 52);
                }
                break;
            case 60:
                if ((active1 & 0x2000000L) != 0L) {
                    return jjStopAtPos(1, 89);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
            case 61:
                if ((active0 & 0x80000000000000L) != 0L) {
                    return jjStopAtPos(1, 55);
                } else if ((active0 & 0x100000000000000L) != 0L) {
                    return jjStopAtPos(1, 56);
                } else if ((active0 & 0x200000000000000L) != 0L) {
                    return jjStopAtPos(1, 57);
                } else if ((active0 & 0x400000000000000L) != 0L) {
                    return jjStopAtPos(1, 58);
                } else if ((active0 & 0x800000000000000L) != 0L) {
                    return jjStopAtPos(1, 59);
                } else if ((active0 & 0x2000000000000000L) != 0L) {
                    return jjStopAtPos(1, 61);
                } else if ((active0 & 0x8000000000000000L) != 0L) {
                    return jjStopAtPos(1, 63);
                } else if ((active1 & 0x100000L) != 0L) {
                    return jjStopAtPos(1, 84);
                } else if ((active1 & 0x200000L) != 0L) {
                    return jjStopAtPos(1, 85);
                }
                break;
            case 62:
                if ((active1 & 0x10000L) != 0L) {
                    return jjStopAtPos(1, 80);
                } else if ((active1 & 0x20000L) != 0L) {
                    jjmatchedKind = 81;
                    jjmatchedPos = 1;
                } else if ((active1 & 0x80000L) != 0L) {
                    return jjStopAtPos(1, 83);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x840000L);
            case 63:
                if ((active1 & 0x10L) != 0L) {
                    return jjStopAtPos(1, 68);
                } else if ((active1 & 0x40L) != 0L) {
                    return jjStopAtPos(1, 70);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x8010000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x200002L, active1, 0L);
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x500a000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
            case 112:
                if ((active0 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 18, 31);
                }
                break;
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
            case 118:
                return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
            case 119:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L);
            case 121:
                return jjMoveStringLiteralDfa2_0(active0, 0x2800000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(0, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (curChar) {
            case 61:
                if ((active1 & 0x800000L) != 0L) {
                    return jjStopAtPos(2, 87);
                }
                break;
            case 62:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L);
            case 63:
                if ((active1 & 0x40000L) != 0L) {
                    return jjStopAtPos(2, 82);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x1200000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa3_0(active0, 0x4020000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x81000L, active1, 0L);
            case 102:
                if ((active0 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(2, 1, 31);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x500000L, active1, 0L);
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0x2804000L, active1, 0L);
            case 114:
                if ((active0 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 27, 31);
                }
                break;
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x8004L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
            case 122:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(1, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (curChar) {
            case 61:
                if ((active1 & 0x400000L) != 0L) {
                    return jjStopAtPos(3, 86);
                }
                break;
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
            case 101:
                if ((active0 & 0x800000L) != 0L) {
                    jjmatchedKind = 23;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x6008004L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
            case 109:
                if ((active0 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 13, 31);
                }
                break;
            case 111:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0x1080000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x400800L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
            case 118:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
            case 121:
                if ((active0 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 16, 31);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(2, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, 0L);
            return 4;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x2100000L);
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
            case 101:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
            case 102:
                return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
            case 107:
                if ((active0 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 12, 31);
                }
                break;
            case 108:
                return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
            case 110:
                return jjMoveStringLiteralDfa5_0(active0, 0x4L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x8c800L);
            case 121:
                return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0, 0L);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(3, old0, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, 0L);
            return 5;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0x800L);
            case 100:
                if ((active0 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 21, 31);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x4L);
            case 101:
                if ((active0 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 17, 31);
                }
                break;
            case 102:
                return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
            case 104:
                if ((active0 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 22, 31);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x4080000L);
            case 108:
                return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
            case 111:
                return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
            case 116:
                if ((active0 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 14, 31);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0, 0L);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(4, old0, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, 0L);
            return 6;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
            case 99:
                return jjMoveStringLiteralDfa7_0(active0, 0x800L);
            case 100:
                return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
            case 101:
                if ((active0 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 20, 31);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
            case 110:
                return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
            case 112:
                if ((active0 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 24, 31);
                }
                break;
            case 115:
                if ((active0 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(6, 2, 31);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(5, active0, 0L);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(5, old0, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, 0L);
            return 7;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
            case 99:
                return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
            case 101:
                if ((active0 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 19, 31);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
            case 116:
                if ((active0 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(7, 11, 31);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(6, active0, 0L);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(6, old0, 0L);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, 0L);
            return 8;
        }
        switch (curChar) {
            case 100:
                if ((active0 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 26, 31);
                }
                break;
            case 101:
                if ((active0 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 15, 31);
                }
                break;
            case 115:
                if ((active0 & 0x2000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 25, 31);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(7, active0, 0L);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }
    static final long[] jjbitVec0 = {
        0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec2 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec3 = {
        0x0L, 0xffffffffffffc000L, 0xffffffffL, 0x0L
    };
    static final long[] jjbitVec4 = {
        0x0L, 0xfffffffffffffffeL, 0xfffffffe007fffffL, 0x7ffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 48;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 2:
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 29) {
                                    kind = 29;
                                }
                                {
                                    jjCheckNAddStates(0, 2);
                                }
                            } else if ((0x2400L & l) != 0L) {
                                if (kind > 90) {
                                    kind = 90;
                                }
                            } else if (curChar == 48) {
                                if (kind > 29) {
                                    kind = 29;
                                }
                                {
                                    jjCheckNAddTwoStates(36, 38);
                                }
                            } else if (curChar == 34) {
                                jjCheckNAddStates(3, 6);
                            } else if (curChar == 47) {
                                jjstateSet[jjnewStateCnt++] = 0;
                            }
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 33;
                            }
                            break;
                        case 5:
                        case 31:
                            if ((0x3ff008000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 40) {
                                kind = 40;
                            }
                             {
                                jjCheckNAdd(31);
                            }
                            break;
                        case 0:
                            if (curChar != 47) {
                                break;
                            }
                            if (kind > 5) {
                                kind = 5;
                            }
                             {
                                jjCheckNAdd(1);
                            }
                            break;
                        case 1:
                            if ((0xffffffffffffdbffL & l) == 0L) {
                                break;
                            }
                            if (kind > 5) {
                                kind = 5;
                            }
                             {
                                jjCheckNAdd(1);
                            }
                            break;
                        case 11:
                            if (curChar == 34) {
                                jjCheckNAddStates(3, 6);
                            }
                            break;
                        case 12:
                            if ((0xfffffffbffffdbffL & l) != 0L) {
                                jjCheckNAddStates(3, 6);
                            }
                            break;
                        case 14:
                            if ((0x8400000000L & l) != 0L) {
                                jjCheckNAddStates(3, 6);
                            }
                            break;
                        case 16:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 17;
                            }
                            break;
                        case 17:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 18;
                            }
                            break;
                        case 18:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 19;
                            }
                            break;
                        case 19:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddStates(3, 6);
                            }
                            break;
                        case 21:
                            if (curChar == 34 && kind > 36) {
                                kind = 36;
                            }
                            break;
                        case 23:
                            if ((0x8400000000L & l) != 0L && kind > 38) {
                                kind = 38;
                            }
                            break;
                        case 25:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 26;
                            }
                            break;
                        case 26:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 27;
                            }
                            break;
                        case 27:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 28;
                            }
                            break;
                        case 28:
                            if ((0x3ff000000000000L & l) != 0L && kind > 39) {
                                kind = 39;
                            }
                            break;
                        case 32:
                            if ((0x2400L & l) != 0L && kind > 90) {
                                kind = 90;
                            }
                            break;
                        case 33:
                            if (curChar == 10 && kind > 90) {
                                kind = 90;
                            }
                            break;
                        case 34:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 33;
                            }
                            break;
                        case 35:
                            if (curChar != 48) {
                                break;
                            }
                            if (kind > 29) {
                                kind = 29;
                            }
                             {
                                jjCheckNAddTwoStates(36, 38);
                            }
                            break;
                        case 37:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 30) {
                                kind = 30;
                            }
                            jjstateSet[jjnewStateCnt++] = 37;
                            break;
                        case 38:
                            if (curChar == 46) {
                                jjCheckNAdd(39);
                            }
                            break;
                        case 39:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 32) {
                                kind = 32;
                            }
                             {
                                jjCheckNAddTwoStates(39, 40);
                            }
                            break;
                        case 41:
                            if (curChar == 45) {
                                jjAddStates(7, 8);
                            }
                            break;
                        case 42:
                            if (curChar == 48 && kind > 32) {
                                kind = 32;
                            }
                            break;
                        case 43:
                            if ((0x3fe000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 32) {
                                kind = 32;
                            }
                             {
                                jjCheckNAdd(44);
                            }
                            break;
                        case 44:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 32) {
                                kind = 32;
                            }
                             {
                                jjCheckNAdd(44);
                            }
                            break;
                        case 45:
                            if ((0x3fe000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 29) {
                                kind = 29;
                            }
                             {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 46:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 29) {
                                kind = 29;
                            }
                             {
                                jjCheckNAdd(46);
                            }
                            break;
                        case 47:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(47, 38);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 2:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 40) {
                                    kind = 40;
                                }
                                {
                                    jjCheckNAdd(31);
                                }
                            } else if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 24;
                            }
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 23;
                            } else if (curChar == 102) {
                                jjstateSet[jjnewStateCnt++] = 9;
                            } else if (curChar == 116) {
                                jjstateSet[jjnewStateCnt++] = 5;
                            }
                            break;
                        case 5:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 40) {
                                    kind = 40;
                                }
                                {
                                    jjCheckNAdd(31);
                                }
                            }
                            if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 4;
                            }
                            break;
                        case 1:
                            if (kind > 5) {
                                kind = 5;
                            }
                            jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 3:
                            if (curChar == 101 && kind > 28) {
                                kind = 28;
                            }
                            break;
                        case 4:
                            if (curChar == 117) {
                                jjCheckNAdd(3);
                            }
                            break;
                        case 6:
                            if (curChar == 116) {
                                jjstateSet[jjnewStateCnt++] = 5;
                            }
                            break;
                        case 7:
                            if (curChar == 115) {
                                jjCheckNAdd(3);
                            }
                            break;
                        case 8:
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 7;
                            }
                            break;
                        case 9:
                            if (curChar == 97) {
                                jjstateSet[jjnewStateCnt++] = 8;
                            }
                            break;
                        case 10:
                            if (curChar == 102) {
                                jjstateSet[jjnewStateCnt++] = 9;
                            }
                            break;
                        case 12:
                            if ((0xffffffffefffffffL & l) != 0L) {
                                jjCheckNAddStates(3, 6);
                            }
                            break;
                        case 13:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 14;
                            }
                            break;
                        case 14:
                            if ((0x14404410000000L & l) != 0L) {
                                jjCheckNAddStates(3, 6);
                            }
                            break;
                        case 15:
                            if (curChar == 117) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            }
                            break;
                        case 16:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 17;
                            }
                            break;
                        case 17:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 18;
                            }
                            break;
                        case 18:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 19;
                            }
                            break;
                        case 19:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjCheckNAddStates(3, 6);
                            }
                            break;
                        case 20:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 15;
                            }
                            break;
                        case 22:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 23;
                            }
                            break;
                        case 23:
                            if ((0x14404410000000L & l) != 0L && kind > 38) {
                                kind = 38;
                            }
                            break;
                        case 24:
                            if (curChar == 117) {
                                jjstateSet[jjnewStateCnt++] = 25;
                            }
                            break;
                        case 25:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 26;
                            }
                            break;
                        case 26:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 27;
                            }
                            break;
                        case 27:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 28;
                            }
                            break;
                        case 28:
                            if ((0x7e0000007eL & l) != 0L && kind > 39) {
                                kind = 39;
                            }
                            break;
                        case 29:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 24;
                            }
                            break;
                        case 30:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 40) {
                                kind = 40;
                            }
                             {
                                jjCheckNAdd(31);
                            }
                            break;
                        case 31:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 40) {
                                kind = 40;
                            }
                             {
                                jjCheckNAdd(31);
                            }
                            break;
                        case 36:
                            if ((0x100000001000000L & l) != 0L) {
                                jjCheckNAdd(37);
                            }
                            break;
                        case 37:
                            if ((0x7e0000007eL & l) == 0L) {
                                break;
                            }
                            if (kind > 30) {
                                kind = 30;
                            }
                             {
                                jjCheckNAdd(37);
                            }
                            break;
                        case 40:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(9, 11);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 2:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 40) {
                                kind = 40;
                            }
                             {
                                jjCheckNAdd(31);
                            }
                            break;
                        case 5:
                        case 31:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 40) {
                                kind = 40;
                            }
                             {
                                jjCheckNAdd(31);
                            }
                            break;
                        case 1:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 5) {
                                kind = 5;
                            }
                            jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 12:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjAddStates(3, 6);
                            }
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_1(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_1(0x400L);
            case 47:
                return jjMoveStringLiteralDfa1_1(0x80L);
            default:
                return jjMoveNfa_1(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_1(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(0, active0);
            return 1;
        }
        switch (curChar) {
            case 42:
                if ((active0 & 0x80L) != 0L) {
                    return jjStopAtPos(1, 7);
                }
                break;
            case 47:
                if ((active0 & 0x400L) != 0L) {
                    return jjStopAtPos(1, 10);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_1(0, active0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 9) {
                                    kind = 9;
                                }
                            }
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 1:
                            if (curChar == 10 && kind > 9) {
                                kind = 9;
                            }
                            break;
                        case 2:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = {
        46, 47, 38, 12, 13, 20, 21, 42, 43, 41, 42, 43,};

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 48:
                return ((jjbitVec4[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
        "", "\144\145\146", "\145\170\164\145\156\144\163", null, null, null, null,
        null, null, null, null, "\141\142\163\164\162\141\143\164", "\143\150\145\143\153",
        "\145\156\165\155", "\151\155\160\157\162\164", "\151\156\164\145\162\146\141\143\145",
        "\154\141\172\171", "\155\157\144\165\154\145", "\157\160", "\157\166\145\162\162\151\144\145",
        "\160\162\151\166\141\164\145", "\163\145\141\154\145\144", "\163\167\151\164\143\150", "\164\171\160\145",
        "\165\156\141\162\171\157\160", "\164\171\160\145\141\154\151\141\163",
        "\165\156\144\145\146\151\156\145\144", "\166\141\162", null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, "\54", "\43", "\133", "\135", "\173", "\175", "\50",
        "\51", "\72", "\72\72", "\56", "\75", "\53\75", "\55\75", "\52\75", "\57\75",
        "\45\75", "\74", "\74\75", "\76", "\76\75", "\53", "\55", "\52", "\57", "\57\77", "\45",
        "\45\77", "\176", "\41", "\46", "\174", "\136", "\77", "\74\55", "\u2190", "\u2192",
        "\55\76", "\176\76", "\176\76\77", "\75\76", "\75\75", "\41\75", "\41\74\76\75",
        "\74\76\75", "\56\56", "\56\74", null, "\100", "\43\50",};

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /** Get the next Token. */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            switch (curLexState) {
                case 0:
                    try {
                        input_stream.backup(0);
                        while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L) {
                            curChar = input_stream.BeginToken();
                        }
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    if (jjmatchedPos == 0 && jjmatchedKind > 8) {
                        jjmatchedKind = 8;
                    }
                    break;
            }
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    if (jjnewLexState[jjmatchedKind] != -1) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    return matchedToken;
                } else {
                    SkipLexicalActions(null);
                    if (jjnewLexState[jjmatchedKind] != -1) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            case 6:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestLevel++;
                SwitchTo(InComment);
                break;
            case 7:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestLevel++;
                break;
            case 10:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestLevel--;
                if (commentNestLevel == 0) {
                    SwitchTo(DEFAULT);
                }
                break;
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    /** Constructor. */
    public KaraffeParserTokenManager(SimpleCharStream stream) {

        if (SimpleCharStream.staticFlag) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }

        input_stream = stream;
    }

    /** Constructor. */
    public KaraffeParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 48; i-- > 0;) {
            jjrounds[i] = 0x80000000;
        }
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    public void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    /** Lexer state names. */
    public static final String[] lexStateNames = {
        "DEFAULT",
        "InComment",};

    /** Lex State array. */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,};
    static final long[] jjtoToken = {
        0xfffff9d17ffff807L, 0x1fffffffL,};
    static final long[] jjtoSkip = {
        0x7f8L, 0x0L,};
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[48];
    private final int[] jjstateSet = new int[2 * 48];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;

    protected char curChar;
}
