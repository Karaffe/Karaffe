/* KaraffeParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. KaraffeParserTokenManager.java */
package net.nokok.karaffe.parser;
import net.nokok.karaffe.parser.util.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings("unused")public class KaraffeParserTokenManager implements KaraffeParserConstants {
    public static int commentNestLevel = 0;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000000010L) != 0L || (active1 & 0xcL) != 0L)
            return 0;
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x8001L) != 0L)
            return 47;
         if ((active0 & 0x6bffe00L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 0;
            return 61;
         }
         if ((active0 & 0x1400000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 0;
            return 8;
         }
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 61;
         if ((active0 & 0x7fdfe00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 1;
            }
            return 61;
         }
         return -1;
      case 2:
         if ((active0 & 0x4000000L) != 0L)
            return 61;
         if ((active0 & 0x3fdfe00L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
            return 61;
         }
         return -1;
      case 3:
         if ((active0 & 0x1409000L) != 0L)
            return 61;
         if ((active0 & 0x2bd6e00L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 3;
            }
            return 61;
         }
         return -1;
      case 4:
         if ((active0 & 0x400L) != 0L)
            return 61;
         if ((active0 & 0x3bd6a00L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
            return 61;
         }
         return -1;
      case 5:
         if ((active0 & 0x312000L) != 0L)
            return 61;
         if ((active0 & 0x38c4a00L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
            return 61;
         }
         return -1;
      case 6:
         if ((active0 & 0x880000L) != 0L)
            return 61;
         if ((active0 & 0x3044a00L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
            return 61;
         }
         return -1;
      case 7:
         if ((active0 & 0x40200L) != 0L)
            return 61;
         if ((active0 & 0x3004800L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 7;
            return 61;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         {
         jjmatchedKind = 71;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000L);
      case 37:
         {
         jjmatchedKind = 68;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x20L);
      case 38:
         return jjStopAtPos(0, 72);
      case 40:
         return jjStopAtPos(0, 48);
      case 41:
         return jjStopAtPos(0, 49);
      case 42:
         {
         jjmatchedKind = 65;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 43:
         {
         jjmatchedKind = 63;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 45:
         {
         jjmatchedKind = 64;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x8000L);
      case 46:
         {
         jjmatchedKind = 52;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000L);
      case 47:
         {
         jjmatchedKind = 66;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x200000000000010L, 0x8L);
      case 58:
         {
         jjmatchedKind = 50;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 60:
         {
         jjmatchedKind = 59;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x401000L);
      case 61:
         {
         jjmatchedKind = 53;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000L);
      case 62:
         {
         jjmatchedKind = 61;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 75);
      case 64:
         return jjStopAtPos(0, 90);
      case 91:
         return jjStopAtPos(0, 44);
      case 93:
         return jjStopAtPos(0, 45);
      case 94:
         return jjStopAtPos(0, 74);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x6000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x60000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1400000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2800000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 46);
      case 124:
         return jjStopAtPos(0, 73);
      case 125:
         return jjStopAtPos(0, 47);
      case 126:
         {
         jjmatchedKind = 70;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000L);
      case 8592:
         return jjStopAtPos(0, 77);
      case 8594:
         return jjStopAtPos(0, 78);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 45:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         break;
      case 46:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 58:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 60:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 61:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 62:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x420000L);
      case 63:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4008000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2805800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 112:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 61);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(2, 86);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 63:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(2, 81);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010800L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40400L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1402000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 61);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(3, 85);
         break;
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3004000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 109:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 61);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x840000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1080000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 107:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 61);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x46200L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 61);
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 61);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 104:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 61);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2040000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 61);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 61);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 112:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 61);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 61);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 61);
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 61);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 61);
         break;
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xffffffffffffc000L, 0xffffffffL, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0xfffffffffffffffeL, 0xfffffffe007fffffL, 0x7ffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                  }
                  else if (curChar == 45)
                     { jjCheckNAddStates(3, 7); }
                  else if (curChar == 48)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAddTwoStates(37, 39); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(8, 11); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 47:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(53, 39); }
                  else if (curChar == 45)
                     { jjCheckNAdd(52); }
                  else if (curChar == 48)
                     { jjCheckNAdd(39); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 48)
                     { jjCheckNAdd(37); }
                  break;
               case 61:
                  if ((0x3ff008000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAddTwoStates(57, 58); }
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if ((0x3ff008000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(56); }
                  }
                  break;
               case 8:
                  if ((0x3ff008000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAddTwoStates(57, 58); }
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if ((0x3ff008000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(56); }
                  }
                  break;
               case 0:
                  if (curChar == 47)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 3:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 14:
                  if (curChar == 34)
                     { jjCheckNAddStates(8, 11); }
                  break;
               case 15:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(8, 11); }
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(8, 11); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(8, 11); }
                  break;
               case 24:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 33:
                  if ((0x2400L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 34:
                  if (curChar == 10 && kind > 89)
                     kind = 89;
                  break;
               case 35:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar != 48)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAddTwoStates(37, 39); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if (curChar == 46)
                     { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 42:
                  if (curChar == 48 && kind > 31)
                     kind = 31;
                  break;
               case 43:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if (curChar == 45)
                     { jjCheckNAddStates(3, 7); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAdd(48); }
                  break;
               case 49:
                  if (curChar == 48)
                     { jjCheckNAdd(37); }
                  break;
               case 50:
                  if (curChar == 48)
                     { jjCheckNAdd(39); }
                  break;
               case 51:
                  if (curChar == 45)
                     { jjCheckNAdd(52); }
                  break;
               case 52:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(53, 39); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(53, 39); }
                  break;
               case 54:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 56:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(56); }
                  break;
               case 57:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 58:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 60:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(58, 60); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddStates(15, 17); }
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAddTwoStates(57, 58); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(56); }
                  }
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAddTwoStates(57, 58); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(56); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  { jjAddStates(12, 14); }
                  break;
               case 6:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 7:
                  if (curChar == 117)
                     { jjCheckNAdd(6); }
                  break;
               case 9:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 115)
                     { jjCheckNAdd(6); }
                  break;
               case 11:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(8, 11); }
                  break;
               case 16:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(8, 11); }
                  break;
               case 18:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(8, 11); }
                  break;
               case 23:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 25:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 27:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 32:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 37:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(38); }
                  break;
               case 38:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(38); }
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(18, 20); }
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(56); }
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 59:
               case 60:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(58, 60); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 61:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(56); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAddTwoStates(57, 58); }
                  }
                  break;
               case 8:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(56); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAddTwoStates(57, 58); }
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(12, 14); }
                  break;
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(8, 11); }
                  break;
               case 56:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(56); }
                  break;
               case 57:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 59:
               case 60:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(58, 60); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   48, 53, 39, 47, 49, 50, 51, 52, 15, 16, 23, 24, 1, 2, 4, 56, 
   57, 58, 42, 43, 44, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\143\150\145\143\153", "\145\156\144\155\157\144\165\154\145", 
"\145\156\165\155", "\151\155\160\157\162\164", "\151\156\164\145\162\146\141\143\145", 
"\154\141\172\171", "\155\157\144\165\154\145", "\157\160", "\157\166\145\162\162\151\144\145", 
"\160\162\151\166\141\164\145", "\163\145\141\154\145\144", "\163\167\151\164\143\150", "\164\171\160\145", 
"\165\156\141\162\171\157\160", "\164\171\160\145\141\154\151\141\163", 
"\165\156\144\145\146\151\156\145\144", "\166\141\162", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\133", "\135", "\173", "\175", "\50", 
"\51", "\72", "\72\72", "\56", "\75", "\53\75", "\55\75", "\52\75", "\57\75", 
"\45\75", "\74", "\74\75", "\76", "\76\75", "\53", "\55", "\52", "\57", "\57\77", "\45", 
"\45\77", "\176", "\41", "\46", "\174", "\136", "\77", "\74\55", "\u2190", "\u2192", 
"\55\76", "\176\76", "\176\76\77", "\75\76", "\75\75", "\41\75", "\41\74\76\75", 
"\74\76\75", "\56\56", "\56\74", null, "\100", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 43;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 6)
       {
          jjmatchedKind = 6;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

int[] jjemptyLineNo = new int[2];
int[] jjemptyColNo = new int[2];
boolean[] jjbeenHere = new boolean[2];
void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         break;
      case 2 :
         break;
      case 3 :
         break;
      case 4 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        commentNestLevel++;
        SwitchTo(InComment);
         break;
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        commentNestLevel++;
         break;
      case 8 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        commentNestLevel--;
        if(commentNestLevel == 0){
            SwitchTo(DEFAULT);
        }
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 31 :
         break;
      case 35 :
         break;
      case 37 :
         break;
      case 38 :
         break;
      case 39 :
         break;
      case 42 :
         break;
      case 43 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 44 :
         break;
      case 45 :
         break;
      case 46 :
         break;
      case 47 :
         break;
      case 48 :
         break;
      case 49 :
         break;
      case 50 :
         break;
      case 51 :
         break;
      case 52 :
         break;
      case 53 :
         break;
      case 54 :
         break;
      case 55 :
         break;
      case 56 :
         break;
      case 57 :
         break;
      case 58 :
         break;
      case 59 :
         break;
      case 60 :
         break;
      case 61 :
         break;
      case 62 :
         break;
      case 63 :
         break;
      case 64 :
         break;
      case 65 :
         break;
      case 66 :
         break;
      case 67 :
         break;
      case 68 :
         break;
      case 69 :
         break;
      case 70 :
         break;
      case 71 :
         break;
      case 72 :
         break;
      case 73 :
         break;
      case 74 :
         break;
      case 75 :
         break;
      case 76 :
         break;
      case 77 :
         break;
      case 78 :
         break;
      case 79 :
         break;
      case 80 :
         break;
      case 81 :
         break;
      case 82 :
         break;
      case 83 :
         break;
      case 84 :
         break;
      case 85 :
         break;
      case 86 :
         break;
      case 87 :
         break;
      case 88 :
         break;
      case 89 :
         break;
      case 90 :
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public KaraffeParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public KaraffeParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "InComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffce8bffffe01L, 0x7ffffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[61];
    private final int[] jjstateSet = new int[2 * 61];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
