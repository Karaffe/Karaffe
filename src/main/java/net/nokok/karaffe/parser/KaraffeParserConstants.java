/* Generated By:JJTree&JavaCC: Do not edit this line. KaraffeParserConstants.java */
package net.nokok.karaffe.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KaraffeParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EndOfLine = 7;
  /** RegularExpression Id. */
  int Check = 9;
  /** RegularExpression Id. */
  int EndModule = 10;
  /** RegularExpression Id. */
  int Import = 11;
  /** RegularExpression Id. */
  int Interface = 12;
  /** RegularExpression Id. */
  int Module = 13;
  /** RegularExpression Id. */
  int Switch = 14;
  /** RegularExpression Id. */
  int To = 15;
  /** RegularExpression Id. */
  int Type = 16;
  /** RegularExpression Id. */
  int Undefined = 17;
  /** RegularExpression Id. */
  int BoolLiteral = 18;
  /** RegularExpression Id. */
  int IntLiteral = 19;
  /** RegularExpression Id. */
  int Hexadecimal = 20;
  /** RegularExpression Id. */
  int HexDigit = 21;
  /** RegularExpression Id. */
  int FloatLiteral = 22;
  /** RegularExpression Id. */
  int Zero = 23;
  /** RegularExpression Id. */
  int NonZero = 24;
  /** RegularExpression Id. */
  int Exp = 25;
  /** RegularExpression Id. */
  int StringLiteral = 26;
  /** RegularExpression Id. */
  int StringCharacter = 27;
  /** RegularExpression Id. */
  int StringEscapeSeq = 28;
  /** RegularExpression Id. */
  int UnicodeEscape = 29;
  /** RegularExpression Id. */
  int Identifier = 30;
  /** RegularExpression Id. */
  int IdentifierBeginOrEnd = 31;
  /** RegularExpression Id. */
  int IdentifierCharacter = 32;
  /** RegularExpression Id. */
  int TypeParameter = 33;
  /** RegularExpression Id. */
  int LeftBracket = 34;
  /** RegularExpression Id. */
  int RightBracket = 35;
  /** RegularExpression Id. */
  int LeftBrace = 36;
  /** RegularExpression Id. */
  int RightBrace = 37;
  /** RegularExpression Id. */
  int LeftParen = 38;
  /** RegularExpression Id. */
  int RightParen = 39;
  /** RegularExpression Id. */
  int Colon = 40;
  /** RegularExpression Id. */
  int Dot = 41;
  /** RegularExpression Id. */
  int EqualSign = 42;
  /** RegularExpression Id. */
  int Lt = 43;
  /** RegularExpression Id. */
  int LtE = 44;
  /** RegularExpression Id. */
  int Gt = 45;
  /** RegularExpression Id. */
  int GtE = 46;
  /** RegularExpression Id. */
  int Plus = 47;
  /** RegularExpression Id. */
  int Minus = 48;
  /** RegularExpression Id. */
  int Star = 49;
  /** RegularExpression Id. */
  int Slash = 50;
  /** RegularExpression Id. */
  int SafeDiv = 51;
  /** RegularExpression Id. */
  int Percent = 52;
  /** RegularExpression Id. */
  int SafeRem = 53;
  /** RegularExpression Id. */
  int Tilde = 54;
  /** RegularExpression Id. */
  int Bang = 55;
  /** RegularExpression Id. */
  int And = 56;
  /** RegularExpression Id. */
  int Or = 57;
  /** RegularExpression Id. */
  int Hat = 58;
  /** RegularExpression Id. */
  int Question = 59;
  /** RegularExpression Id. */
  int ReverseArrow = 60;
  /** RegularExpression Id. */
  int ReverseArrowChar = 61;
  /** RegularExpression Id. */
  int SingleArrowChar = 62;
  /** RegularExpression Id. */
  int SingleArrow = 63;
  /** RegularExpression Id. */
  int DoubleArrow = 64;
  /** RegularExpression Id. */
  int EqualTo = 65;
  /** RegularExpression Id. */
  int NotEqualTo = 66;
  /** RegularExpression Id. */
  int NonComparable = 67;
  /** RegularExpression Id. */
  int Comparable = 68;
  /** RegularExpression Id. */
  int IsUndefined = 69;
  /** RegularExpression Id. */
  int NewLine = 70;
  /** RegularExpression Id. */
  int Atmark = 71;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int InComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "<token of kind 3>",
    "\"/*\"",
    "\"/*\"",
    "<token of kind 6>",
    "<EndOfLine>",
    "\"*/\"",
    "\"check\"",
    "\"endmodule\"",
    "\"import\"",
    "\"interface\"",
    "\"module\"",
    "\"switch\"",
    "\"to\"",
    "\"type\"",
    "\"undefined\"",
    "<BoolLiteral>",
    "<IntLiteral>",
    "<Hexadecimal>",
    "<HexDigit>",
    "<FloatLiteral>",
    "\"0\"",
    "<NonZero>",
    "<Exp>",
    "<StringLiteral>",
    "<StringCharacter>",
    "<StringEscapeSeq>",
    "<UnicodeEscape>",
    "<Identifier>",
    "<IdentifierBeginOrEnd>",
    "<IdentifierCharacter>",
    "<TypeParameter>",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"/?\"",
    "\"%\"",
    "\"%?\"",
    "\"~\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"?\"",
    "\"<-\"",
    "\"\\u2190\"",
    "\"\\u2192\"",
    "\"->\"",
    "\"=>\"",
    "\"==\"",
    "\"!=\"",
    "\"!<>=\"",
    "\"<>=\"",
    "\"??\"",
    "<NewLine>",
    "\"@\"",
    "\"::\"",
  };

}
