/* Generated By:JJTree&JavaCC: Do not edit this line. KaraffeParserConstants.java */
package net.nokok.karaffe.parser;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KaraffeParserConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int EndOfLine = 9;
    /** RegularExpression Id. */
    int Abstract = 11;
    /** RegularExpression Id. */
    int Check = 12;
    /** RegularExpression Id. */
    int Enum = 13;
    /** RegularExpression Id. */
    int Import = 14;
    /** RegularExpression Id. */
    int Interface = 15;
    /** RegularExpression Id. */
    int Lazy = 16;
    /** RegularExpression Id. */
    int Module = 17;
    /** RegularExpression Id. */
    int Operator = 18;
    /** RegularExpression Id. */
    int Override = 19;
    /** RegularExpression Id. */
    int Private = 20;
    /** RegularExpression Id. */
    int Sealed = 21;
    /** RegularExpression Id. */
    int Switch = 22;
    /** RegularExpression Id. */
    int Type = 23;
    /** RegularExpression Id. */
    int UnaryOperator = 24;
    /** RegularExpression Id. */
    int TypeAlias = 25;
    /** RegularExpression Id. */
    int Undefined = 26;
    /** RegularExpression Id. */
    int Variable = 27;
    /** RegularExpression Id. */
    int BoolLiteral = 28;
    /** RegularExpression Id. */
    int IntLiteral = 29;
    /** RegularExpression Id. */
    int Hexadecimal = 30;
    /** RegularExpression Id. */
    int HexDigit = 31;
    /** RegularExpression Id. */
    int FloatLiteral = 32;
    /** RegularExpression Id. */
    int Zero = 33;
    /** RegularExpression Id. */
    int NonZero = 34;
    /** RegularExpression Id. */
    int Exp = 35;
    /** RegularExpression Id. */
    int StringLiteral = 36;
    /** RegularExpression Id. */
    int StringCharacter = 37;
    /** RegularExpression Id. */
    int StringEscapeSeq = 38;
    /** RegularExpression Id. */
    int UnicodeEscape = 39;
    /** RegularExpression Id. */
    int Identifier = 40;
    /** RegularExpression Id. */
    int IdentifierHead = 41;
    /** RegularExpression Id. */
    int IdentifierChar = 42;
    /** RegularExpression Id. */
    int LeftBracket = 45;
    /** RegularExpression Id. */
    int RightBracket = 46;
    /** RegularExpression Id. */
    int LeftBrace = 47;
    /** RegularExpression Id. */
    int RightBrace = 48;
    /** RegularExpression Id. */
    int LeftParen = 49;
    /** RegularExpression Id. */
    int RightParen = 50;
    /** RegularExpression Id. */
    int Colon = 51;
    /** RegularExpression Id. */
    int DoubleColon = 52;
    /** RegularExpression Id. */
    int Dot = 53;
    /** RegularExpression Id. */
    int EqualSign = 54;
    /** RegularExpression Id. */
    int AA = 55;
    /** RegularExpression Id. */
    int SA = 56;
    /** RegularExpression Id. */
    int MA = 57;
    /** RegularExpression Id. */
    int DA = 58;
    /** RegularExpression Id. */
    int RA = 59;
    /** RegularExpression Id. */
    int Lt = 60;
    /** RegularExpression Id. */
    int LtE = 61;
    /** RegularExpression Id. */
    int Gt = 62;
    /** RegularExpression Id. */
    int GtE = 63;
    /** RegularExpression Id. */
    int Plus = 64;
    /** RegularExpression Id. */
    int Minus = 65;
    /** RegularExpression Id. */
    int Star = 66;
    /** RegularExpression Id. */
    int Slash = 67;
    /** RegularExpression Id. */
    int SafeDiv = 68;
    /** RegularExpression Id. */
    int Percent = 69;
    /** RegularExpression Id. */
    int SafeRem = 70;
    /** RegularExpression Id. */
    int Tilde = 71;
    /** RegularExpression Id. */
    int Bang = 72;
    /** RegularExpression Id. */
    int And = 73;
    /** RegularExpression Id. */
    int Or = 74;
    /** RegularExpression Id. */
    int Hat = 75;
    /** RegularExpression Id. */
    int Question = 76;
    /** RegularExpression Id. */
    int ReverseArrow = 77;
    /** RegularExpression Id. */
    int ReverseArrowChar = 78;
    /** RegularExpression Id. */
    int SingleArrowChar = 79;
    /** RegularExpression Id. */
    int SingleArrow = 80;
    /** RegularExpression Id. */
    int CastArrow = 81;
    /** RegularExpression Id. */
    int TypeCheckArrow = 82;
    /** RegularExpression Id. */
    int DoubleArrow = 83;
    /** RegularExpression Id. */
    int EqualTo = 84;
    /** RegularExpression Id. */
    int NotEqualTo = 85;
    /** RegularExpression Id. */
    int NonComparable = 86;
    /** RegularExpression Id. */
    int Comparable = 87;
    /** RegularExpression Id. */
    int ClosedRange = 88;
    /** RegularExpression Id. */
    int HalfOpenRange = 89;
    /** RegularExpression Id. */
    int NewLine = 90;
    /** RegularExpression Id. */
    int Atmark = 91;

    /** Lexical state. */
    int DEFAULT = 0;
    /** Lexical state. */
    int InComment = 1;

    /** Literal token values. */
    String[] tokenImage = {
        "<EOF>",
        "\"def\"",
        "\"extends\"",
        "\" \"",
        "\"\\t\"",
        "<token of kind 5>",
        "\"/*\"",
        "\"/*\"",
        "<token of kind 8>",
        "<EndOfLine>",
        "\"*/\"",
        "\"abstract\"",
        "\"check\"",
        "\"enum\"",
        "\"import\"",
        "\"interface\"",
        "\"lazy\"",
        "\"module\"",
        "\"op\"",
        "\"override\"",
        "\"private\"",
        "\"sealed\"",
        "\"switch\"",
        "\"type\"",
        "\"unaryop\"",
        "\"typealias\"",
        "\"undefined\"",
        "\"var\"",
        "<BoolLiteral>",
        "<IntLiteral>",
        "<Hexadecimal>",
        "<HexDigit>",
        "<FloatLiteral>",
        "\"0\"",
        "<NonZero>",
        "<Exp>",
        "<StringLiteral>",
        "<StringCharacter>",
        "<StringEscapeSeq>",
        "<UnicodeEscape>",
        "<Identifier>",
        "<IdentifierHead>",
        "<IdentifierChar>",
        "\",\"",
        "\"#\"",
        "\"[\"",
        "\"]\"",
        "\"{\"",
        "\"}\"",
        "\"(\"",
        "\")\"",
        "\":\"",
        "\"::\"",
        "\".\"",
        "\"=\"",
        "\"+=\"",
        "\"-=\"",
        "\"*=\"",
        "\"/=\"",
        "\"%=\"",
        "\"<\"",
        "\"<=\"",
        "\">\"",
        "\">=\"",
        "\"+\"",
        "\"-\"",
        "\"*\"",
        "\"/\"",
        "\"/?\"",
        "\"%\"",
        "\"%?\"",
        "\"~\"",
        "\"!\"",
        "\"&\"",
        "\"|\"",
        "\"^\"",
        "\"?\"",
        "\"<-\"",
        "\"\\u2190\"",
        "\"\\u2192\"",
        "\"->\"",
        "\"~>\"",
        "\"~>?\"",
        "\"=>\"",
        "\"==\"",
        "\"!=\"",
        "\"!<>=\"",
        "\"<>=\"",
        "\"..\"",
        "\".<\"",
        "<NewLine>",
        "\"@\"",
        "\"#(\"",};

}
