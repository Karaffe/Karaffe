/* Generated By:JJTree&JavaCC: Do not edit this line. KaraffeParserConstants.java */
package net.nokok.karaffe.parser;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KaraffeParserConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int EndOfLine = 6;
    /** RegularExpression Id. */
    int Check = 8;
    /** RegularExpression Id. */
    int Interface = 9;
    /** RegularExpression Id. */
    int Public = 10;
    /** RegularExpression Id. */
    int SideEffect = 11;
    /** RegularExpression Id. */
    int Switch = 12;
    /** RegularExpression Id. */
    int To = 13;
    /** RegularExpression Id. */
    int Type = 14;
    /** RegularExpression Id. */
    int Undefined = 15;
    /** RegularExpression Id. */
    int BoolLiteral = 16;
    /** RegularExpression Id. */
    int IntLiteral = 17;
    /** RegularExpression Id. */
    int Hexadecimal = 18;
    /** RegularExpression Id. */
    int HexDigit = 19;
    /** RegularExpression Id. */
    int FloatLiteral = 20;
    /** RegularExpression Id. */
    int Minus = 21;
    /** RegularExpression Id. */
    int Zero = 22;
    /** RegularExpression Id. */
    int NonZero = 23;
    /** RegularExpression Id. */
    int Exp = 24;
    /** RegularExpression Id. */
    int StringLiteral = 25;
    /** RegularExpression Id. */
    int StringCharacter = 26;
    /** RegularExpression Id. */
    int StringEscapeSeq = 27;
    /** RegularExpression Id. */
    int UnicodeEscape = 28;
    /** RegularExpression Id. */
    int Identifier = 29;
    /** RegularExpression Id. */
    int IdentifierHead = 30;
    /** RegularExpression Id. */
    int IdentifierCharacter = 31;
    /** RegularExpression Id. */
    int TypeParameter = 32;
    /** RegularExpression Id. */
    int LeftBracket = 33;
    /** RegularExpression Id. */
    int RightBracket = 34;
    /** RegularExpression Id. */
    int Colon = 35;
    /** RegularExpression Id. */
    int EqualSign = 36;
    /** RegularExpression Id. */
    int Dot = 37;
    /** RegularExpression Id. */
    int NewLine = 38;

    /** Lexical state. */
    int DEFAULT = 0;
    /** Lexical state. */
    int InComment = 1;

    /** Literal token values. */
    String[] tokenImage = {
        "<EOF>",
        "\" \"",
        "\"\\t\"",
        "<token of kind 3>",
        "\"/*\"",
        "\"/*\"",
        "<EndOfLine>",
        "\"*/\"",
        "\"check\"",
        "\"interface\"",
        "\"public\"",
        "\"seffect\"",
        "\"switch\"",
        "\"to\"",
        "\"type\"",
        "\"undefined\"",
        "<BoolLiteral>",
        "<IntLiteral>",
        "<Hexadecimal>",
        "<HexDigit>",
        "<FloatLiteral>",
        "\"-\"",
        "\"0\"",
        "<NonZero>",
        "<Exp>",
        "<StringLiteral>",
        "<StringCharacter>",
        "<StringEscapeSeq>",
        "<UnicodeEscape>",
        "<Identifier>",
        "<IdentifierHead>",
        "<IdentifierCharacter>",
        "<TypeParameter>",
        "\"[\"",
        "\"]\"",
        "\":\"",
        "\"=\"",
        "\".\"",
        "<NewLine>",};

}
