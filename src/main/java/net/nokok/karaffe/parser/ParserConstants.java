/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package net.nokok.karaffe.parser;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int UndefinedLiteral = 65;
    /** RegularExpression Id. */
    int NullLiteral = 66;
    /** RegularExpression Id. */
    int BoolLiteral = 67;
    /** RegularExpression Id. */
    int DecimalNumeral = 68;
    /** RegularExpression Id. */
    int Digit = 69;
    /** RegularExpression Id. */
    int Zero = 70;
    /** RegularExpression Id. */
    int NonZero = 71;
    /** RegularExpression Id. */
    int HexNumeral = 72;
    /** RegularExpression Id. */
    int HexDigit = 73;
    /** RegularExpression Id. */
    int OctalIntLiteral = 74;
    /** RegularExpression Id. */
    int OctalDigit = 75;
    /** RegularExpression Id. */
    int BinaryNumeral = 76;
    /** RegularExpression Id. */
    int BinaryDigit = 77;
    /** RegularExpression Id. */
    int DecimalFPLiteral = 78;
    /** RegularExpression Id. */
    int Exp = 79;
    /** RegularExpression Id. */
    int HexadecimalFPLiteral = 80;
    /** RegularExpression Id. */
    int HexSignificand = 81;
    /** RegularExpression Id. */
    int BinaryExp = 82;
    /** RegularExpression Id. */
    int CharLiteral = 83;
    /** RegularExpression Id. */
    int StringLiteral = 84;
    /** RegularExpression Id. */
    int StringCharacter = 85;
    /** RegularExpression Id. */
    int StringEscapeSeq = 86;
    /** RegularExpression Id. */
    int UnicodeEscape = 87;
    /** RegularExpression Id. */
    int RawStringLiteral = 88;
    /** RegularExpression Id. */
    int EndOfLine = 108;
    /** RegularExpression Id. */
    int Identifier = 110;
    /** RegularExpression Id. */
    int IDHead = 111;
    /** RegularExpression Id. */
    int IDBody = 112;

    /** Lexical state. */
    int DEFAULT = 0;
    /** Lexical state. */
    int InComment = 1;

    /** Literal token values. */
    String[] tokenImage = {
        "<EOF>",
        "\"package\"",
        "\"import\"",
        "\"->\"",
        "\".\"",
        "\"*\"",
        "\"funcalias\"",
        "\"{\"",
        "\"}\"",
        "\"@\"",
        "\"type\"",
        "\"enum\"",
        "\"case\"",
        "\"interface\"",
        "\"typealias\"",
        "\"[\"",
        "\",\"",
        "\"]\"",
        "\"<\"",
        "\"&\"",
        "\"<-\"",
        "\"func\"",
        "\"this\"",
        "\"def\"",
        "\"final\"",
        "\"(\"",
        "\")\"",
        "\"super\"",
        "\"=\"",
        "\"|\"",
        "\"+=\"",
        "\"-=\"",
        "\"*=\"",
        "\"/=\"",
        "\"%=\"",
        "\"&=\"",
        "\"|=\"",
        "\"^=\"",
        "\"|>\"",
        "\"<|\"",
        "\"==\"",
        "\"!=\"",
        "\">\"",
        "\"<=\"",
        "\">=\"",
        "\"..\"",
        "\".<\"",
        "\"+\"",
        "\"-\"",
        "\"+?\"",
        "\"-?\"",
        "\"/\"",
        "\"%\"",
        "\"*?\"",
        "\"/?\"",
        "\"%?\"",
        "\"!\"",
        "\"~>\"",
        "\"~>?\"",
        "\"if\"",
        "\"else\"",
        "\"switch\"",
        "\"=>\"",
        "\":\"",
        "\"while\"",
        "\"undefined\"",
        "\"null\"",
        "<BoolLiteral>",
        "<DecimalNumeral>",
        "<Digit>",
        "\"0\"",
        "<NonZero>",
        "<HexNumeral>",
        "<HexDigit>",
        "<OctalIntLiteral>",
        "<OctalDigit>",
        "<BinaryNumeral>",
        "<BinaryDigit>",
        "<DecimalFPLiteral>",
        "<Exp>",
        "<HexadecimalFPLiteral>",
        "<HexSignificand>",
        "<BinaryExp>",
        "<CharLiteral>",
        "<StringLiteral>",
        "<StringCharacter>",
        "<StringEscapeSeq>",
        "<UnicodeEscape>",
        "<RawStringLiteral>",
        "\"public\"",
        "\"protected\"",
        "\"private\"",
        "\"abstract\"",
        "\"static\"",
        "\"sealed\"",
        "\"var\"",
        "\"override\"",
        "\"auto\"",
        "\"self\"",
        "<token of kind 99>",
        "\"/*\"",
        "\" \"",
        "\"\\t\"",
        "\"\\r\"",
        "\"\\n\"",
        "\"\\r\\n\"",
        "\"/*\"",
        "<token of kind 107>",
        "<EndOfLine>",
        "\"*/\"",
        "<Identifier>",
        "<IDHead>",
        "<IDBody>",};

}
