/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package net.nokok.karaffe.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int UndefinedLiteral = 67;
  /** RegularExpression Id. */
  int BoolLiteral = 68;
  /** RegularExpression Id. */
  int DecimalNumeral = 69;
  /** RegularExpression Id. */
  int Digit = 70;
  /** RegularExpression Id. */
  int Zero = 71;
  /** RegularExpression Id. */
  int NonZero = 72;
  /** RegularExpression Id. */
  int HexNumeral = 73;
  /** RegularExpression Id. */
  int HexDigit = 74;
  /** RegularExpression Id. */
  int OctalIntLiteral = 75;
  /** RegularExpression Id. */
  int OctalDigit = 76;
  /** RegularExpression Id. */
  int BinaryNumeral = 77;
  /** RegularExpression Id. */
  int BinaryDigit = 78;
  /** RegularExpression Id. */
  int DecimalFPLiteral = 79;
  /** RegularExpression Id. */
  int Exp = 80;
  /** RegularExpression Id. */
  int HexadecimalFPLiteral = 81;
  /** RegularExpression Id. */
  int HexSignificand = 82;
  /** RegularExpression Id. */
  int BinaryExp = 83;
  /** RegularExpression Id. */
  int CharLiteral = 84;
  /** RegularExpression Id. */
  int StringLiteral = 85;
  /** RegularExpression Id. */
  int StringCharacter = 86;
  /** RegularExpression Id. */
  int StringEscapeSeq = 87;
  /** RegularExpression Id. */
  int UnicodeEscape = 88;
  /** RegularExpression Id. */
  int RawStringLiteral = 89;
  /** RegularExpression Id. */
  int EndOfLine = 101;
  /** RegularExpression Id. */
  int Identifier = 103;
  /** RegularExpression Id. */
  int IDHead = 104;
  /** RegularExpression Id. */
  int IDBody = 105;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int InComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"package\"",
    "\"import\"",
    "\".\"",
    "\"*\"",
    "\"->\"",
    "\"type\"",
    "\"enum\"",
    "\"case\"",
    "\"interface\"",
    "\"typealias\"",
    "\"public\"",
    "\"protected\"",
    "\"private\"",
    "\"abstract\"",
    "\"static\"",
    "\"final\"",
    "\"[\"",
    "\",\"",
    "\"]\"",
    "\"<\"",
    "\"&\"",
    "\":\"",
    "\"<-\"",
    "\"{\"",
    "\"}\"",
    "\"def\"",
    "\"(\"",
    "\")\"",
    "\"this\"",
    "\"=\"",
    "\"super\"",
    "\"var\"",
    "\"sealed\"",
    "\"|\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"..\"",
    "\".<\"",
    "\"+\"",
    "\"-\"",
    "\"+?\"",
    "\"-?\"",
    "\"/\"",
    "\"%\"",
    "\"*?\"",
    "\"/?\"",
    "\"%?\"",
    "\"!\"",
    "\"~>\"",
    "\"~>?\"",
    "\"d[\"",
    "\"t[\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"undefined\"",
    "<BoolLiteral>",
    "<DecimalNumeral>",
    "<Digit>",
    "\"0\"",
    "<NonZero>",
    "<HexNumeral>",
    "<HexDigit>",
    "<OctalIntLiteral>",
    "<OctalDigit>",
    "<BinaryNumeral>",
    "<BinaryDigit>",
    "<DecimalFPLiteral>",
    "<Exp>",
    "<HexadecimalFPLiteral>",
    "<HexSignificand>",
    "<BinaryExp>",
    "<CharLiteral>",
    "<StringLiteral>",
    "<StringCharacter>",
    "<StringEscapeSeq>",
    "<UnicodeEscape>",
    "<RawStringLiteral>",
    "\"funcalias\"",
    "<token of kind 91>",
    "\"/*\"",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\r\\n\"",
    "\";\"",
    "\"/*\"",
    "<token of kind 100>",
    "<EndOfLine>",
    "\"*/\"",
    "<Identifier>",
    "<IDHead>",
    "<IDBody>",
  };

}
