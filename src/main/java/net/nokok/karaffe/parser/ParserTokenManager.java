/* ParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package net.nokok.karaffe.parser;

/** Token Manager. */
@SuppressWarnings("unused")
public class ParserTokenManager implements ParserConstants {

    public static int commentNestLevel = 0;

    /** Debug output. */
    public java.io.PrintStream debugStream = System.out;

    /** Set debug output. */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active0 & 0x1200040L) != 0L) {
                    jjmatchedKind = 110;
                    return 6;
                }
                if ((active0 & 0x404400L) != 0L) {
                    jjmatchedKind = 110;
                    return 2;
                }
                if ((active0 & 0x48000200000000L) != 0L || (active1 & 0x1000000000L) != 0L) {
                    return 47;
                }
                if ((active0 & 0x3800000008803806L) != 0L || (active1 & 0x7fe000007L) != 0L) {
                    jjmatchedKind = 110;
                    return 51;
                }
                return -1;
            case 1:
                if ((active0 & 0x3000000009e07c46L) != 0L || (active1 & 0x7fe000007L) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 110;
                        jjmatchedPos = 1;
                    }
                    return 51;
                }
                if ((active0 & 0x800000000000000L) != 0L) {
                    return 51;
                }
                return -1;
            case 2:
                if ((active0 & 0x800000L) != 0L || (active1 & 0x80000000L) != 0L) {
                    return 51;
                }
                if ((active0 & 0x3000000009607c46L) != 0L || (active1 & 0x77e000007L) != 0L) {
                    jjmatchedKind = 110;
                    jjmatchedPos = 2;
                    return 51;
                }
                return -1;
            case 3:
                if ((active0 & 0x1000000000605c40L) != 0L || (active1 & 0x600000004L) != 0L) {
                    return 51;
                }
                if ((active0 & 0x2000000009002006L) != 0L || (active1 & 0x17e000003L) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 110;
                        jjmatchedPos = 3;
                    }
                    return 51;
                }
                return -1;
            case 4:
                if ((active0 & 0x9000000L) != 0L || (active1 & 0x1L) != 0L) {
                    return 51;
                }
                if ((active0 & 0x2000000000006046L) != 0L || (active1 & 0x17e000002L) != 0L) {
                    jjmatchedKind = 110;
                    jjmatchedPos = 4;
                    return 51;
                }
                return -1;
            case 5:
                if ((active0 & 0x6042L) != 0L || (active1 & 0x11c000002L) != 0L) {
                    jjmatchedKind = 110;
                    jjmatchedPos = 5;
                    return 51;
                }
                if ((active0 & 0x2000000000000004L) != 0L || (active1 & 0x62000000L) != 0L) {
                    return 51;
                }
                return -1;
            case 6:
                if ((active0 & 0x2L) != 0L || (active1 & 0x8000000L) != 0L) {
                    return 51;
                }
                if ((active0 & 0x6040L) != 0L || (active1 & 0x114000002L) != 0L) {
                    jjmatchedKind = 110;
                    jjmatchedPos = 6;
                    return 51;
                }
                return -1;
            case 7:
                if ((active1 & 0x110000000L) != 0L) {
                    return 51;
                }
                if ((active0 & 0x6040L) != 0L || (active1 & 0x4000002L) != 0L) {
                    jjmatchedKind = 110;
                    jjmatchedPos = 7;
                    return 51;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 9:
                return jjStopAtPos(0, 102);
            case 10:
                return jjStopAtPos(0, 104);
            case 13:
                jjmatchedKind = 103;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
            case 32:
                return jjStopAtPos(0, 101);
            case 33:
                jjmatchedKind = 56;
                return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
            case 37:
                jjmatchedKind = 52;
                return jjMoveStringLiteralDfa1_0(0x80000400000000L, 0x0L);
            case 38:
                jjmatchedKind = 19;
                return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
            case 40:
                return jjStopAtPos(0, 25);
            case 41:
                return jjStopAtPos(0, 26);
            case 42:
                jjmatchedKind = 5;
                return jjMoveStringLiteralDfa1_0(0x20000100000000L, 0x0L);
            case 43:
                jjmatchedKind = 47;
                return jjMoveStringLiteralDfa1_0(0x2000040000000L, 0x0L);
            case 44:
                return jjStopAtPos(0, 16);
            case 45:
                jjmatchedKind = 48;
                return jjMoveStringLiteralDfa1_0(0x4000080000008L, 0x0L);
            case 46:
                jjmatchedKind = 4;
                return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x0L);
            case 47:
                jjmatchedKind = 51;
                return jjMoveStringLiteralDfa1_0(0x40000200000000L, 0x1000000000L);
            case 58:
                return jjStopAtPos(0, 63);
            case 60:
                jjmatchedKind = 18;
                return jjMoveStringLiteralDfa1_0(0x88000100000L, 0x0L);
            case 61:
                jjmatchedKind = 28;
                return jjMoveStringLiteralDfa1_0(0x4000010000000000L, 0x0L);
            case 62:
                jjmatchedKind = 42;
                return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
            case 64:
                return jjStopAtPos(0, 9);
            case 91:
                return jjStopAtPos(0, 15);
            case 93:
                return jjStopAtPos(0, 17);
            case 94:
                return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x210000000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x1000000000000800L, 0x0L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x1200040L, 0x0L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x800000000002004L, 0x0L);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
            case 111:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x2L, 0xe000000L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x2000000008000000L, 0x460000000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x404400L, 0x0L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
            case 118:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
            case 119:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
            case 123:
                return jjStopAtPos(0, 7);
            case 124:
                jjmatchedKind = 29;
                return jjMoveStringLiteralDfa1_0(0x5000000000L, 0x0L);
            case 125:
                return jjStopAtPos(0, 8);
            case 126:
                return jjMoveStringLiteralDfa1_0(0x600000000000000L, 0x0L);
            default:
                return jjMoveNfa_0(3, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
            case 10:
                if ((active1 & 0x20000000000L) != 0L) {
                    return jjStopAtPos(1, 105);
                }
                break;
            case 42:
                if ((active1 & 0x1000000000L) != 0L) {
                    return jjStopAtPos(1, 100);
                }
                break;
            case 45:
                if ((active0 & 0x100000L) != 0L) {
                    return jjStopAtPos(1, 20);
                }
                break;
            case 46:
                if ((active0 & 0x200000000000L) != 0L) {
                    return jjStopAtPos(1, 45);
                }
                break;
            case 60:
                if ((active0 & 0x400000000000L) != 0L) {
                    return jjStopAtPos(1, 46);
                }
                break;
            case 61:
                if ((active0 & 0x40000000L) != 0L) {
                    return jjStopAtPos(1, 30);
                } else if ((active0 & 0x80000000L) != 0L) {
                    return jjStopAtPos(1, 31);
                } else if ((active0 & 0x100000000L) != 0L) {
                    return jjStopAtPos(1, 32);
                } else if ((active0 & 0x200000000L) != 0L) {
                    return jjStopAtPos(1, 33);
                } else if ((active0 & 0x400000000L) != 0L) {
                    return jjStopAtPos(1, 34);
                } else if ((active0 & 0x800000000L) != 0L) {
                    return jjStopAtPos(1, 35);
                } else if ((active0 & 0x1000000000L) != 0L) {
                    return jjStopAtPos(1, 36);
                } else if ((active0 & 0x2000000000L) != 0L) {
                    return jjStopAtPos(1, 37);
                } else if ((active0 & 0x10000000000L) != 0L) {
                    return jjStopAtPos(1, 40);
                } else if ((active0 & 0x20000000000L) != 0L) {
                    return jjStopAtPos(1, 41);
                } else if ((active0 & 0x80000000000L) != 0L) {
                    return jjStopAtPos(1, 43);
                } else if ((active0 & 0x100000000000L) != 0L) {
                    return jjStopAtPos(1, 44);
                }
                break;
            case 62:
                if ((active0 & 0x8L) != 0L) {
                    return jjStopAtPos(1, 3);
                } else if ((active0 & 0x4000000000L) != 0L) {
                    return jjStopAtPos(1, 38);
                } else if ((active0 & 0x200000000000000L) != 0L) {
                    jjmatchedKind = 57;
                    jjmatchedPos = 1;
                } else if ((active0 & 0x4000000000000000L) != 0L) {
                    return jjStopAtPos(1, 62);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
            case 63:
                if ((active0 & 0x2000000000000L) != 0L) {
                    return jjStopAtPos(1, 49);
                } else if ((active0 & 0x4000000000000L) != 0L) {
                    return jjStopAtPos(1, 50);
                } else if ((active0 & 0x20000000000000L) != 0L) {
                    return jjStopAtPos(1, 53);
                } else if ((active0 & 0x40000000000000L) != 0L) {
                    return jjStopAtPos(1, 54);
                } else if ((active0 & 0x80000000000000L) != 0L) {
                    return jjStopAtPos(1, 55);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x1002L, active1, 0x80000000L);
            case 98:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0x440000000L);
            case 102:
                if ((active0 & 0x800000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 59, 51);
                }
                break;
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0x1L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x2800L, active1, 0x2L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000000L);
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x8200040L, active1, 0x202000004L);
            case 118:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
            case 119:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
            case 121:
                return jjMoveStringLiteralDfa2_0(active0, 0x4400L, active1, 0L);
            case 124:
                if ((active0 & 0x8000000000L) != 0L) {
                    return jjStopAtPos(1, 39);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(0, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (curChar) {
            case 63:
                if ((active0 & 0x400000000000000L) != 0L) {
                    return jjStopAtPos(2, 58);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x60000000L);
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000L);
            case 99:
                return jjMoveStringLiteralDfa3_0(active0, 0x2L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L);
            case 102:
                if ((active0 & 0x800000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 23, 51);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000000400000L, active1, 0x8000001L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000004L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x1200040L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000L);
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0x8004404L, active1, 0L);
            case 114:
                if ((active1 & 0x80000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 95, 51);
                }
                break;
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000000001000L, active1, 0x10000000L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x200000000L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(1, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
            case 99:
                if ((active0 & 0x200000L) != 0L) {
                    jjmatchedKind = 21;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x40L, active1, 0L);
            case 101:
                if ((active0 & 0x400L) != 0L) {
                    jjmatchedKind = 10;
                    jjmatchedPos = 3;
                } else if ((active0 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 12, 51);
                } else if ((active0 & 0x1000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 60, 51);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x8006000L, active1, 0x2L);
            case 102:
                if ((active1 & 0x400000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 98, 51);
                }
                break;
            case 107:
                return jjMoveStringLiteralDfa4_0(active0, 0x2L, active1, 0L);
            case 108:
                if ((active1 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(3, 66, 51);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x42000001L);
            case 109:
                if ((active0 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(3, 11, 51);
                }
                break;
            case 111:
                if ((active1 & 0x200000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 97, 51);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x4L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L);
            case 115:
                if ((active0 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 22, 51);
                }
                break;
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x34000000L);
            case 118:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(2, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1);
            return 4;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x4042L, active1, 0x8000000L);
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
            case 101:
                if ((active1 & 0x1L) != 0L) {
                    return jjStartNfaWithStates_0(4, 64, 51);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x44000000L);
            case 102:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x22000000L);
            case 108:
                if ((active0 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 24, 51);
                }
                break;
            case 114:
                if ((active0 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 27, 51);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x2004L, active1, 0x110000000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0, active1);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(3, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1);
            return 5;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000L);
            case 99:
                if ((active1 & 0x2000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 89, 51);
                } else if ((active1 & 0x20000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 93, 51);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L);
            case 100:
                if ((active1 & 0x40000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 94, 51);
                }
                break;
            case 102:
                return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L);
            case 103:
                return jjMoveStringLiteralDfa6_0(active0, 0x2L, active1, 0L);
            case 104:
                if ((active0 & 0x2000000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 61, 51);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000002L);
            case 108:
                return jjMoveStringLiteralDfa6_0(active0, 0x4040L, active1, 0L);
            case 116:
                if ((active0 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(5, 2, 51);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0, active1);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(4, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, active1);
            return 6;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L);
            case 100:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L);
            case 101:
                if ((active0 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(6, 1, 51);
                } else if ((active1 & 0x8000000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 91, 51);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa7_0(active0, 0x4040L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
            case 116:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0, active1);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(5, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, active1);
            return 7;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa8_0(active0, 0x4040L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0L);
            case 101:
                if ((active1 & 0x100000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 96, 51);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000002L);
            case 116:
                if ((active1 & 0x10000000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 92, 51);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(6, active0, active1);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) {
            return jjStartNfa_0(6, old0, old1);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, active1);
            return 8;
        }
        switch (curChar) {
            case 100:
                if ((active1 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(8, 65, 51);
                } else if ((active1 & 0x4000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 90, 51);
                }
                break;
            case 101:
                if ((active0 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 13, 51);
                }
                break;
            case 115:
                if ((active0 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(8, 6, 51);
                } else if ((active0 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 14, 51);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(7, active0, active1);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }
    static final long[] jjbitVec0 = {
        0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec2 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec3 = {
        0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
    };
    static final long[] jjbitVec4 = {
        0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
    };
    static final long[] jjbitVec5 = {
        0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
    };
    static final long[] jjbitVec6 = {
        0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
    };
    static final long[] jjbitVec7 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
    };
    static final long[] jjbitVec8 = {
        0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
    };
    static final long[] jjbitVec9 = {
        0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
    };
    static final long[] jjbitVec10 = {
        0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
    };
    static final long[] jjbitVec11 = {
        0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
    };
    static final long[] jjbitVec12 = {
        0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
    };
    static final long[] jjbitVec13 = {
        0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
    };
    static final long[] jjbitVec14 = {
        0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
    };
    static final long[] jjbitVec15 = {
        0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
    };
    static final long[] jjbitVec16 = {
        0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
    };
    static final long[] jjbitVec17 = {
        0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
    };
    static final long[] jjbitVec18 = {
        0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
    };
    static final long[] jjbitVec19 = {
        0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
    };
    static final long[] jjbitVec20 = {
        0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
    };
    static final long[] jjbitVec21 = {
        0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
    };
    static final long[] jjbitVec22 = {
        0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
    };
    static final long[] jjbitVec23 = {
        0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
    };
    static final long[] jjbitVec24 = {
        0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
    };
    static final long[] jjbitVec25 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
    };
    static final long[] jjbitVec26 = {
        0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
    };
    static final long[] jjbitVec27 = {
        0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
    };
    static final long[] jjbitVec28 = {
        0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
    };
    static final long[] jjbitVec29 = {
        0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
    };
    static final long[] jjbitVec30 = {
        0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
    };
    static final long[] jjbitVec31 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
    };
    static final long[] jjbitVec32 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
    };
    static final long[] jjbitVec33 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
    };
    static final long[] jjbitVec34 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
    };
    static final long[] jjbitVec35 = {
        0x3fffffffffffL, 0x0L, 0x0L, 0x0L
    };
    static final long[] jjbitVec36 = {
        0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
    };
    static final long[] jjbitVec37 = {
        0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
    };
    static final long[] jjbitVec38 = {
        0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
    };
    static final long[] jjbitVec39 = {
        0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
    };
    static final long[] jjbitVec40 = {
        0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
    };
    static final long[] jjbitVec41 = {
        0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
    };
    static final long[] jjbitVec42 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
    };
    static final long[] jjbitVec43 = {
        0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
    };
    static final long[] jjbitVec44 = {
        0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
    };
    static final long[] jjbitVec45 = {
        0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
    };
    static final long[] jjbitVec46 = {
        0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
    };
    static final long[] jjbitVec47 = {
        0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
    };
    static final long[] jjbitVec48 = {
        0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
    };
    static final long[] jjbitVec49 = {
        0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
    };
    static final long[] jjbitVec50 = {
        0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
    };
    static final long[] jjbitVec51 = {
        0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
    };
    static final long[] jjbitVec52 = {
        0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
    };
    static final long[] jjbitVec53 = {
        0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
    };
    static final long[] jjbitVec54 = {
        0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
    };
    static final long[] jjbitVec55 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
    };
    static final long[] jjbitVec56 = {
        0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
    };
    static final long[] jjbitVec57 = {
        0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
    };
    static final long[] jjbitVec58 = {
        0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
    };
    static final long[] jjbitVec59 = {
        0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
    };
    static final long[] jjbitVec60 = {
        0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
    };
    static final long[] jjbitVec61 = {
        0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 72;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 6:
                        case 51:
                            if ((0x3ff00100fffc1ffL & l) == 0L) {
                                break;
                            }
                            if (kind > 110) {
                                kind = 110;
                            }
                             {
                                jjCheckNAdd(51);
                            }
                            break;
                        case 2:
                            if ((0x3ff00100fffc1ffL & l) == 0L) {
                                break;
                            }
                            if (kind > 110) {
                                kind = 110;
                            }
                             {
                                jjCheckNAdd(51);
                            }
                            break;
                        case 3:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 69) {
                                    kind = 69;
                                }
                                {
                                    jjCheckNAddTwoStates(66, 67);
                                }
                            } else if (curChar == 36) {
                                if (kind > 110) {
                                    kind = 110;
                                }
                                {
                                    jjCheckNAdd(51);
                                }
                            } else if (curChar == 47) {
                                jjstateSet[jjnewStateCnt++] = 47;
                            } else if (curChar == 34) {
                                jjstateSet[jjnewStateCnt++] = 45;
                            } else if (curChar == 39) {
                                jjAddStates(0, 2);
                            }
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 68) {
                                    kind = 68;
                                }
                                {
                                    jjCheckNAdd(9);
                                }
                            } else if (curChar == 48) {
                                if (kind > 68) {
                                    kind = 68;
                                }
                                {
                                    jjCheckNAddStates(3, 6);
                                }
                            } else if (curChar == 34) {
                                jjCheckNAddStates(7, 10);
                            }
                            break;
                        case 8:
                            if ((0x3fe000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 68) {
                                kind = 68;
                            }
                             {
                                jjCheckNAdd(9);
                            }
                            break;
                        case 9:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 68) {
                                kind = 68;
                            }
                             {
                                jjCheckNAdd(9);
                            }
                            break;
                        case 10:
                            if (curChar == 39) {
                                jjAddStates(0, 2);
                            }
                            break;
                        case 11:
                            if ((0xfffffffbffffdbffL & l) != 0L) {
                                jjCheckNAdd(12);
                            }
                            break;
                        case 12:
                            if (curChar == 39 && kind > 83) {
                                kind = 83;
                            }
                            break;
                        case 14:
                            if ((0x8400000000L & l) != 0L) {
                                jjCheckNAdd(12);
                            }
                            break;
                        case 16:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 17;
                            }
                            break;
                        case 17:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 18;
                            }
                            break;
                        case 18:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 19;
                            }
                            break;
                        case 19:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAdd(12);
                            }
                            break;
                        case 21:
                            if (curChar == 34) {
                                jjCheckNAddStates(7, 10);
                            }
                            break;
                        case 22:
                            if ((0xfffffffbffffdbffL & l) != 0L) {
                                jjCheckNAddStates(7, 10);
                            }
                            break;
                        case 24:
                            if ((0x8400000000L & l) != 0L) {
                                jjCheckNAddStates(7, 10);
                            }
                            break;
                        case 26:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 27;
                            }
                            break;
                        case 27:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 28;
                            }
                            break;
                        case 28:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 29;
                            }
                            break;
                        case 29:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddStates(7, 10);
                            }
                            break;
                        case 31:
                            if (curChar == 34 && kind > 84) {
                                kind = 84;
                            }
                            break;
                        case 33:
                            if ((0x8400000000L & l) != 0L && kind > 86) {
                                kind = 86;
                            }
                            break;
                        case 35:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 36;
                            }
                            break;
                        case 36:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 37;
                            }
                            break;
                        case 37:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 38;
                            }
                            break;
                        case 38:
                            if ((0x3ff000000000000L & l) != 0L && kind > 87) {
                                kind = 87;
                            }
                            break;
                        case 40:
                            if (curChar == 34) {
                                jjCheckNAddTwoStates(41, 44);
                            }
                            break;
                        case 41: {
                            jjCheckNAddTwoStates(41, 44);
                        }
                        break;
                        case 42:
                            if (curChar == 34 && kind > 88) {
                                kind = 88;
                            }
                            break;
                        case 43:
                            if (curChar == 34) {
                                jjstateSet[jjnewStateCnt++] = 42;
                            }
                            break;
                        case 44:
                            if (curChar == 34) {
                                jjstateSet[jjnewStateCnt++] = 43;
                            }
                            break;
                        case 45:
                            if (curChar == 34) {
                                jjstateSet[jjnewStateCnt++] = 40;
                            }
                            break;
                        case 46:
                            if (curChar == 34) {
                                jjstateSet[jjnewStateCnt++] = 45;
                            }
                            break;
                        case 47:
                            if (curChar != 47) {
                                break;
                            }
                            if (kind > 99) {
                                kind = 99;
                            }
                             {
                                jjCheckNAdd(48);
                            }
                            break;
                        case 48:
                            if ((0xffffffffffffdbffL & l) == 0L) {
                                break;
                            }
                            if (kind > 99) {
                                kind = 99;
                            }
                             {
                                jjCheckNAdd(48);
                            }
                            break;
                        case 49:
                            if (curChar == 47) {
                                jjstateSet[jjnewStateCnt++] = 47;
                            }
                            break;
                        case 50:
                            if (curChar != 36) {
                                break;
                            }
                            if (kind > 110) {
                                kind = 110;
                            }
                             {
                                jjCheckNAdd(51);
                            }
                            break;
                        case 52:
                            if (curChar != 48) {
                                break;
                            }
                            if (kind > 68) {
                                kind = 68;
                            }
                             {
                                jjCheckNAddStates(3, 6);
                            }
                            break;
                        case 54:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 72) {
                                kind = 72;
                            }
                            jjstateSet[jjnewStateCnt++] = 54;
                            break;
                        case 55:
                            if ((0xff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 74) {
                                kind = 74;
                            }
                             {
                                jjCheckNAdd(55);
                            }
                            break;
                        case 57:
                            if ((0x3000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 76) {
                                kind = 76;
                            }
                            jjstateSet[jjnewStateCnt++] = 57;
                            break;
                        case 59:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjAddStates(11, 12);
                            }
                            break;
                        case 60:
                            if (curChar == 46) {
                                jjCheckNAdd(61);
                            }
                            break;
                        case 61:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(61, 62);
                            }
                            break;
                        case 63:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(64);
                            }
                            break;
                        case 64:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 80) {
                                kind = 80;
                            }
                             {
                                jjCheckNAdd(64);
                            }
                            break;
                        case 65:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 69) {
                                kind = 69;
                            }
                             {
                                jjCheckNAddTwoStates(66, 67);
                            }
                            break;
                        case 66:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(66, 67);
                            }
                            break;
                        case 67:
                            if (curChar == 46) {
                                jjCheckNAdd(68);
                            }
                            break;
                        case 68:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 78) {
                                kind = 78;
                            }
                             {
                                jjCheckNAddTwoStates(68, 69);
                            }
                            break;
                        case 70:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(71);
                            }
                            break;
                        case 71:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 78) {
                                kind = 78;
                            }
                             {
                                jjCheckNAdd(71);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 6:
                            if ((0x87fffffe87fffffeL & l) != 0L) {
                                if (kind > 110) {
                                    kind = 110;
                                }
                                {
                                    jjCheckNAdd(51);
                                }
                            }
                            if (curChar == 97) {
                                jjstateSet[jjnewStateCnt++] = 5;
                            }
                            break;
                        case 2:
                            if ((0x87fffffe87fffffeL & l) != 0L) {
                                if (kind > 110) {
                                    kind = 110;
                                }
                                {
                                    jjCheckNAdd(51);
                                }
                            }
                            if (curChar == 114) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 3:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 110) {
                                    kind = 110;
                                }
                                {
                                    jjCheckNAdd(51);
                                }
                            } else if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 34;
                            }
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 33;
                            } else if (curChar == 102) {
                                jjstateSet[jjnewStateCnt++] = 6;
                            } else if (curChar == 116) {
                                jjstateSet[jjnewStateCnt++] = 2;
                            }
                            break;
                        case 0:
                            if (curChar == 101 && kind > 67) {
                                kind = 67;
                            }
                            break;
                        case 1:
                            if (curChar == 117) {
                                jjCheckNAdd(0);
                            }
                            break;
                        case 4:
                            if (curChar == 115) {
                                jjCheckNAdd(0);
                            }
                            break;
                        case 5:
                            if (curChar == 108) {
                                jjstateSet[jjnewStateCnt++] = 4;
                            }
                            break;
                        case 7:
                            if (curChar == 102) {
                                jjstateSet[jjnewStateCnt++] = 6;
                            }
                            break;
                        case 9:
                            if (curChar != 95) {
                                break;
                            }
                            if (kind > 68) {
                                kind = 68;
                            }
                            jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 11:
                            if ((0xffffffffefffffffL & l) != 0L) {
                                jjCheckNAdd(12);
                            }
                            break;
                        case 13:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 14;
                            }
                            break;
                        case 14:
                            if ((0x14404410000000L & l) != 0L) {
                                jjCheckNAdd(12);
                            }
                            break;
                        case 15:
                            if (curChar == 117) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            }
                            break;
                        case 16:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 17;
                            }
                            break;
                        case 17:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 18;
                            }
                            break;
                        case 18:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 19;
                            }
                            break;
                        case 19:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjCheckNAdd(12);
                            }
                            break;
                        case 20:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 15;
                            }
                            break;
                        case 22:
                            if ((0xffffffffefffffffL & l) != 0L) {
                                jjCheckNAddStates(7, 10);
                            }
                            break;
                        case 23:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 24;
                            }
                            break;
                        case 24:
                            if ((0x14404410000000L & l) != 0L) {
                                jjCheckNAddStates(7, 10);
                            }
                            break;
                        case 25:
                            if (curChar == 117) {
                                jjstateSet[jjnewStateCnt++] = 26;
                            }
                            break;
                        case 26:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 27;
                            }
                            break;
                        case 27:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 28;
                            }
                            break;
                        case 28:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 29;
                            }
                            break;
                        case 29:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjCheckNAddStates(7, 10);
                            }
                            break;
                        case 30:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 25;
                            }
                            break;
                        case 32:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 33;
                            }
                            break;
                        case 33:
                            if ((0x14404410000000L & l) != 0L && kind > 86) {
                                kind = 86;
                            }
                            break;
                        case 34:
                            if (curChar == 117) {
                                jjstateSet[jjnewStateCnt++] = 35;
                            }
                            break;
                        case 35:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 36;
                            }
                            break;
                        case 36:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 37;
                            }
                            break;
                        case 37:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 38;
                            }
                            break;
                        case 38:
                            if ((0x7e0000007eL & l) != 0L && kind > 87) {
                                kind = 87;
                            }
                            break;
                        case 39:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 34;
                            }
                            break;
                        case 41: {
                            jjAddStates(13, 14);
                        }
                        break;
                        case 48:
                            if (kind > 99) {
                                kind = 99;
                            }
                            jjstateSet[jjnewStateCnt++] = 48;
                            break;
                        case 50:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 110) {
                                kind = 110;
                            }
                             {
                                jjCheckNAdd(51);
                            }
                            break;
                        case 51:
                            if ((0x87fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 110) {
                                kind = 110;
                            }
                             {
                                jjCheckNAdd(51);
                            }
                            break;
                        case 53:
                            if ((0x100000001000000L & l) != 0L) {
                                jjCheckNAdd(54);
                            }
                            break;
                        case 54:
                            if ((0x7e8000007eL & l) == 0L) {
                                break;
                            }
                            if (kind > 72) {
                                kind = 72;
                            }
                             {
                                jjCheckNAdd(54);
                            }
                            break;
                        case 55:
                            if (curChar != 95) {
                                break;
                            }
                            if (kind > 74) {
                                kind = 74;
                            }
                            jjstateSet[jjnewStateCnt++] = 55;
                            break;
                        case 56:
                            if ((0x400000004L & l) == 0L) {
                                break;
                            }
                            if (kind > 76) {
                                kind = 76;
                            }
                             {
                                jjCheckNAdd(57);
                            }
                            break;
                        case 57:
                            if (curChar != 95) {
                                break;
                            }
                            if (kind > 76) {
                                kind = 76;
                            }
                             {
                                jjCheckNAdd(57);
                            }
                            break;
                        case 58:
                            if ((0x100000001000000L & l) != 0L) {
                                jjCheckNAdd(59);
                            }
                            break;
                        case 59:
                            if ((0x7e8000007eL & l) != 0L) {
                                jjCheckNAddTwoStates(59, 60);
                            }
                            break;
                        case 61:
                            if ((0x7e0000007eL & l) != 0L) {
                                jjAddStates(15, 16);
                            }
                            break;
                        case 62:
                            if ((0x1000000010000L & l) != 0L) {
                                jjAddStates(17, 18);
                            }
                            break;
                        case 69:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(19, 20);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 6:
                        case 51:
                            if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 110) {
                                kind = 110;
                            }
                             {
                                jjCheckNAdd(51);
                            }
                            break;
                        case 2:
                            if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 110) {
                                kind = 110;
                            }
                             {
                                jjCheckNAdd(51);
                            }
                            break;
                        case 3:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 110) {
                                kind = 110;
                            }
                             {
                                jjCheckNAdd(51);
                            }
                            break;
                        case 11:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjstateSet[jjnewStateCnt++] = 12;
                            }
                            break;
                        case 22:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjAddStates(7, 10);
                            }
                            break;
                        case 41:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjAddStates(13, 14);
                            }
                            break;
                        case 48:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 99) {
                                kind = 99;
                            }
                            jjstateSet[jjnewStateCnt++] = 48;
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 72 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_1(int pos, long active0, long active1) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_1(0x200000000000L);
            case 47:
                return jjMoveStringLiteralDfa1_1(0x40000000000L);
            default:
                return jjMoveNfa_1(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_1(long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(0, 0L, active1);
            return 1;
        }
        switch (curChar) {
            case 42:
                if ((active1 & 0x40000000000L) != 0L) {
                    return jjStopAtPos(1, 106);
                }
                break;
            case 47:
                if ((active1 & 0x200000000000L) != 0L) {
                    return jjStopAtPos(1, 109);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_1(0, 0L, active1);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 108) {
                                    kind = 108;
                                }
                            }
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 1:
                            if (curChar == 10 && kind > 108) {
                                kind = 108;
                            }
                            break;
                        case 2:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = {
        11, 13, 20, 53, 55, 56, 58, 22, 23, 30, 31, 59, 60, 41, 44, 61,
        62, 63, 64, 70, 71,};

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 2:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 3:
                return ((jjbitVec6[i2] & l2) != 0L);
            case 4:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 5:
                return ((jjbitVec8[i2] & l2) != 0L);
            case 6:
                return ((jjbitVec9[i2] & l2) != 0L);
            case 7:
                return ((jjbitVec10[i2] & l2) != 0L);
            case 9:
                return ((jjbitVec11[i2] & l2) != 0L);
            case 10:
                return ((jjbitVec12[i2] & l2) != 0L);
            case 11:
                return ((jjbitVec13[i2] & l2) != 0L);
            case 12:
                return ((jjbitVec14[i2] & l2) != 0L);
            case 13:
                return ((jjbitVec15[i2] & l2) != 0L);
            case 14:
                return ((jjbitVec16[i2] & l2) != 0L);
            case 15:
                return ((jjbitVec17[i2] & l2) != 0L);
            case 16:
                return ((jjbitVec18[i2] & l2) != 0L);
            case 17:
                return ((jjbitVec19[i2] & l2) != 0L);
            case 18:
                return ((jjbitVec20[i2] & l2) != 0L);
            case 19:
                return ((jjbitVec21[i2] & l2) != 0L);
            case 20:
                return ((jjbitVec0[i2] & l2) != 0L);
            case 22:
                return ((jjbitVec22[i2] & l2) != 0L);
            case 23:
                return ((jjbitVec23[i2] & l2) != 0L);
            case 24:
                return ((jjbitVec24[i2] & l2) != 0L);
            case 30:
                return ((jjbitVec25[i2] & l2) != 0L);
            case 31:
                return ((jjbitVec26[i2] & l2) != 0L);
            case 32:
                return ((jjbitVec27[i2] & l2) != 0L);
            case 33:
                return ((jjbitVec28[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec29[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec30[i2] & l2) != 0L);
            case 77:
                return ((jjbitVec31[i2] & l2) != 0L);
            case 159:
                return ((jjbitVec32[i2] & l2) != 0L);
            case 164:
                return ((jjbitVec33[i2] & l2) != 0L);
            case 215:
                return ((jjbitVec34[i2] & l2) != 0L);
            case 250:
                return ((jjbitVec35[i2] & l2) != 0L);
            case 251:
                return ((jjbitVec36[i2] & l2) != 0L);
            case 253:
                return ((jjbitVec37[i2] & l2) != 0L);
            case 254:
                return ((jjbitVec38[i2] & l2) != 0L);
            case 255:
                return ((jjbitVec39[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec40[i2] & l2) != 0L);
            case 2:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 3:
                return ((jjbitVec41[i2] & l2) != 0L);
            case 4:
                return ((jjbitVec42[i2] & l2) != 0L);
            case 5:
                return ((jjbitVec43[i2] & l2) != 0L);
            case 6:
                return ((jjbitVec44[i2] & l2) != 0L);
            case 7:
                return ((jjbitVec45[i2] & l2) != 0L);
            case 9:
                return ((jjbitVec46[i2] & l2) != 0L);
            case 10:
                return ((jjbitVec47[i2] & l2) != 0L);
            case 11:
                return ((jjbitVec48[i2] & l2) != 0L);
            case 12:
                return ((jjbitVec49[i2] & l2) != 0L);
            case 13:
                return ((jjbitVec50[i2] & l2) != 0L);
            case 14:
                return ((jjbitVec51[i2] & l2) != 0L);
            case 15:
                return ((jjbitVec52[i2] & l2) != 0L);
            case 16:
                return ((jjbitVec53[i2] & l2) != 0L);
            case 17:
                return ((jjbitVec19[i2] & l2) != 0L);
            case 18:
                return ((jjbitVec20[i2] & l2) != 0L);
            case 19:
                return ((jjbitVec54[i2] & l2) != 0L);
            case 20:
                return ((jjbitVec0[i2] & l2) != 0L);
            case 22:
                return ((jjbitVec22[i2] & l2) != 0L);
            case 23:
                return ((jjbitVec55[i2] & l2) != 0L);
            case 24:
                return ((jjbitVec56[i2] & l2) != 0L);
            case 30:
                return ((jjbitVec25[i2] & l2) != 0L);
            case 31:
                return ((jjbitVec26[i2] & l2) != 0L);
            case 32:
                return ((jjbitVec57[i2] & l2) != 0L);
            case 33:
                return ((jjbitVec28[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec58[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec30[i2] & l2) != 0L);
            case 77:
                return ((jjbitVec31[i2] & l2) != 0L);
            case 159:
                return ((jjbitVec32[i2] & l2) != 0L);
            case 164:
                return ((jjbitVec33[i2] & l2) != 0L);
            case 215:
                return ((jjbitVec34[i2] & l2) != 0L);
            case 250:
                return ((jjbitVec35[i2] & l2) != 0L);
            case 251:
                return ((jjbitVec59[i2] & l2) != 0L);
            case 253:
                return ((jjbitVec37[i2] & l2) != 0L);
            case 254:
                return ((jjbitVec60[i2] & l2) != 0L);
            case 255:
                return ((jjbitVec61[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
        "", "\160\141\143\153\141\147\145", "\151\155\160\157\162\164", "\55\76",
        "\56", "\52", "\146\165\156\143\141\154\151\141\163", "\173", "\175", "\100",
        "\164\171\160\145", "\145\156\165\155", "\143\141\163\145",
        "\151\156\164\145\162\146\141\143\145", "\164\171\160\145\141\154\151\141\163", "\133", "\54", "\135", "\74", "\46",
        "\74\55", "\146\165\156\143", "\164\150\151\163", "\144\145\146",
        "\146\151\156\141\154", "\50", "\51", "\163\165\160\145\162", "\75", "\174", "\53\75", "\55\75",
        "\52\75", "\57\75", "\45\75", "\46\75", "\174\75", "\136\75", "\174\76", "\74\174",
        "\75\75", "\41\75", "\76", "\74\75", "\76\75", "\56\56", "\56\74", "\53", "\55",
        "\53\77", "\55\77", "\57", "\45", "\52\77", "\57\77", "\45\77", "\41", "\176\76",
        "\176\76\77", "\151\146", "\145\154\163\145", "\163\167\151\164\143\150", "\75\76", "\72",
        "\167\150\151\154\145", "\165\156\144\145\146\151\156\145\144", "\156\165\154\154", null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, "\160\165\142\154\151\143",
        "\160\162\157\164\145\143\164\145\144", "\160\162\151\166\141\164\145", "\141\142\163\164\162\141\143\164",
        "\163\164\141\164\151\143", "\163\145\141\154\145\144", "\166\141\162",
        "\157\166\145\162\162\151\144\145", "\141\165\164\157", "\163\145\154\146", null, null, null, null, null, null,
        null, null, null, null, null, null, null, null,};

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /** Get the next Token. */
    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            switch (curLexState) {
                case 0:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    if (jjmatchedPos == 0 && jjmatchedKind > 107) {
                        jjmatchedKind = 107;
                    }
                    break;
            }
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    matchedToken.specialToken = specialToken;
                    if (jjnewLexState[jjmatchedKind] != -1) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    return matchedToken;
                } else {
                    if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        if (specialToken == null) {
                            specialToken = matchedToken;
                        } else {
                            matchedToken.specialToken = specialToken;
                            specialToken = (specialToken.next = matchedToken);
                        }
                        SkipLexicalActions(matchedToken);
                    } else {
                        SkipLexicalActions(null);
                    }
                    if (jjnewLexState[jjmatchedKind] != -1) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            case 100:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestLevel++;
                SwitchTo(InComment);
                break;
            case 106:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestLevel++;
                break;
            case 109:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestLevel--;
                if (commentNestLevel == 0) {
                    SwitchTo(DEFAULT);
                }
                break;
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream) {

        if (SimpleCharStream.staticFlag) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }

        input_stream = stream;
    }

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 72; i-- > 0;) {
            jjrounds[i] = 0x80000000;
        }
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    public void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    /** Lexer state names. */
    public static final String[] lexStateNames = {
        "DEFAULT",
        "InComment",};

    /** Lex State array. */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,};
    static final long[] jjtoToken = {
        0xffffffffffffffffL, 0x4007ffd9553fL,};
    static final long[] jjtoSkip = {
        0x0L, 0x3ff800000000L,};
    static final long[] jjtoSpecial = {
        0x0L, 0x3e000000000L,};
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[72];
    private final int[] jjstateSet = new int[2 * 72];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;

    protected char curChar;
}
