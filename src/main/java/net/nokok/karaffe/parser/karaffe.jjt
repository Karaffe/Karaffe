//Karaffe Javacc file

options {
    STATIC = false;
    IGNORE_CASE = false;
    UNICODE_INPUT = true;
    MULTI = true;
    VISITOR = true;
    VISITOR_EXCEPTION = "net.nokok.karaffe.parser.excptn.KaraffeParserException";
}

PARSER_BEGIN(KaraffeParser)
package net.nokok.karaffe.parser;

import net.nokok.karaffe.parser.util.*;
import java.util.*;

public class KaraffeParser{

    public KaraffeParser(String sourceCode){
        this(new java.io.StringReader(sourceCode));
    }

    public int getCurrentTokenBeginColumn(){
        return jj_input_stream.getBeginColumn();
    }

    public int getCurrentTokenEndColumn(){
        return jj_input_stream.getEndColumn();
    }

    public int getCurrentLine(){
        return jj_input_stream.getEndLine();
    }
}


PARSER_END(KaraffeParser)

TOKEN_MGR_DECLS:
{
    public static int commentNestLevel = 0;
}

//文法定義
ASTCompileUnit CompileUnit():
{}
{
    (Statement() | NewLineToken())* <EOF> {
        return jjtThis;
    }
}

void Statement() #void:
{}
{
    Declaration()
    | ModuleStatement()
    | EndOfModule()
}

void Declaration() #void:
{}
{
    VariableDeclaration()
}

/**
    VariableDeclaration

    修飾子 識別子        = 式
    修飾子 識別子 : 型名 = 式
 */
void VariableDeclaration():
{
    Token id;
    Token type = null;
}
{
    (Modifier())* id = <Identifier> (<Colon> type = <Identifier>) <EqualSign> Expression() {
        jjtThis.jjtSetValue(new VariableDeclarationData(id,type));
    }
}

void ModuleStatement():
{
    Token t;
}
{
    <Module> t = <Identifier> {
        jjtThis.jjtSetValue(t);
    }
}

void EndOfModule():
{}
{
    <EndModule>
}

/*
コメントの処理
*/
SKIP:
{
    " "
    | "\t"
    | < "//" (~["\n"])* <NewLine> >
    | "/*" {
        commentNestLevel++;
        SwitchTo(InComment);
    }
}

<InComment> SKIP:
{
    "/*" {
        commentNestLevel++;
    }
    | < ~[]>
    | <EndOfLine : <NewLine>> 
    | "*/" {
        commentNestLevel--;
        if(commentNestLevel == 0){
            SwitchTo(DEFAULT);
        }
    }
}

/**
    Reserved keywords 
*/
TOKEN:
{
      < Check : "check" >
    | < EndModule : "endmodule" >
    | < Import : "import" >
    | < Interface : "interface" >
    | < Module : "module" >
    | < Switch : "switch" >
    | < To : "to" >
    | < Type : "type" >
    | < Undefined : "undefined" >
}

/**
    Literals
*/
TOKEN:
{
      < BoolLiteral : "true"
                    | "false" >
    | < IntLiteral : <Zero> | (<Minus>)? <NonZero> (<Zero> | <NonZero>)* >
    | < Hexadecimal : (<Minus>)? "0" ["x","X"] (<HexDigit>)+ >
    | < #HexDigit : ["0"-"9" , "A"-"F" , "a"-"f"] > 
    | < FloatLiteral : (<Minus>)? (<Zero> | <IntLiteral>) <Dot> (<Zero> | <NonZero>)+ (<Exp> <IntLiteral> )? >
    | < #Zero : "0" >
    | < #NonZero : ["1"-"9"] >
    | < #Exp : "e" | "E" >
    | < StringLiteral : "\"" (<StringCharacter>)* "\"" >
    | < #StringCharacter : (~["\"","\\","\n","\r"]) 
                         | <StringEscapeSeq> 
                         | <UnicodeEscape> >
    | < StringEscapeSeq : "\\" ["b","t","n","f","r","\"","\\","\'"] >
    | < UnicodeEscape : "\\u" <HexDigit> <HexDigit> <HexDigit> <HexDigit> >
}

void Literal() #void:
{
    Token t;
}
{
    BoolLiteral()
    | IntLiteral()
    | FloatLiteral()
    | StringLiteral()
    | <Undefined> 
}

void BoolLiteral():
{
    Token t;
}
{
    t = <BoolLiteral> {
        jjtThis.jjtSetValue(t.image);
    }
}


void IntLiteral():
{
    Token t;
}
{
    t = <IntLiteral> {
        jjtThis.jjtSetValue(t.image);
    }
}

void FloatLiteral():
{
    Token t;
}
{
    t = <FloatLiteral> {
        jjtThis.jjtSetValue(t.image);
    }
}

void StringLiteral():
{
    Token t;
}
{
    t = <StringLiteral> {
        jjtThis.jjtSetValue(t.image);
    }
}

void UndefinedLiteral():
{}
{
    <Undefined> {
        jjtThis.jjtSetValue(new UndefinedLiteral());
    }
}

/**
    Identifiers
*/
TOKEN:
{
      < Identifier : <IdentifierBeginOrEnd> ((<IdentifierCharacter>)* <IdentifierBeginOrEnd>)? >
    | < #IdentifierBeginOrEnd :      [
                                    "\u0041"-"\u005A", //A-Z
                                    "\u0061"-"\u007A", //a-z
                                    "\u005F",          //_
                                    "\u3040"-"\u309F", //ひらがな Hiragana
                                    "\u30A0"-"\u30FF", //カタカナ Katakana
                                    "\u4E00"-"\u9FFF"  //漢字     CJK Unified Ideographs
                               ]  >
    | < #IdentifierCharacter :      "\u002E"          //.
                                    | <IdentifierBeginOrEnd>
                                  >
    | < TypeParameter : ["\u0041"-"\u005A"] > //A-Z
}

/**
    Delimiters
*/
TOKEN:
{
      < LeftBracket : "[" >
    | < RightBracket : "]" >
    | < LeftBrace : "{" >
    | < RightBrace : "}" >
    | < LeftParen : "(" >
    | < RightParen : ")" >
    | < Colon : ":" >
    | < Dot : "." >
}

/**
    Operators
 */
TOKEN:
{

    < EqualSign : "=" >
    | < Lt : "<" >
    | < LtE : "<=" >
    | < Gt : ">" >
    | < GtE : ">=" >
    | < Plus : "+" >
    | < Minus : "-" >
    | < Star : "*" >
    | < Slash : "/" >
    | < SafeDiv : "/?" >
    | < Percent : "%" >
    | < SafeRem : "%?" >
    | < Tilde : "~" >
    | < Bang : "!" >
    | < And : "&" > 
    | < Or : "|" >
    | < Hat : "^" >
    | < Question : "?" >
    | < ReverseArrow : "<-" >
    | < ReverseArrowChar : "←" >
    | < SingleArrowChar : "→" >
    | < SingleArrow : "->" >
    | < DoubleArrow : "=>" >
    | < EqualTo : "==" >
    | < NotEqualTo : "!=" >
    | < NonComparable : "!<>=" >
    | < Comparable : "<>=" >
    | < IsUndefined : "??" >

}

/**
    Other tokens
*/
TOKEN:
{
      < NewLine : "\r"
                | "\n" 
                | "\r\n" >
      | < Atmark : "@" >
}

void NewLineToken():
{}
{
    <NewLine>
}

/**
    Expressionの評価優先度
    低い順から
    AssignExpr =
    ↓
    OrOperatorExpr |
    ↓
    AndOperatorExpr &
    ↓
    EqualityOperatorExpr == !=
    ↓
    ComparisonOperatorExpr <= >= < >
    ↓
    AdditiveOperatorExpr + -
    ↓
    MultiplyOperatorExpr * / /? % %? 
    ↓
    UnaryOperatorExpr - ~ !
    ↓
    FunctionApply
 */
void Expression() #void:
{}
{
    AssignExpr()
}

/**
    =
 */
void AssignExpr() #void:
{}
{
    (
        OrOperatorExpr() 
        (LOOKAHEAD(2) "=" OrOperatorExpr())*
    ) #AssignExpr(>1)
}

/**
    |
 */
void OrOperatorExpr() #void:
{}
{
    (
        AndOperatorExpr() 
        (LOOKAHEAD(2) "|" AndOperatorExpr())*
    ) #OrOpExpr(>1)
}

/**
    &   
 */
void AndOperatorExpr() #void:
{}
{
    (
        ComparisonOperatorExpr()
        (LOOKAHEAD(2) "&" ComparisonOperatorExpr())* 
    ) #AndOpExpr(>1)
}

/**
    ==, !=, >=, <= !<>= <>=
 */
void ComparisonOperatorExpr() #void:
{}
{
    (
        AdditiveOperatorExpr() 
        (LOOKAHEAD(2) ("==" | "!=" | ">=" | "<=" | "!<>=" | "<>=") AdditiveOperatorExpr())*
    ) #ComparisonOpExpr(>1)
}

/**
    +, -
 */
void AdditiveOperatorExpr() #void:
{}
{
    (
        MultiplyOperatorExpr() 
        (LOOKAHEAD(2) ("+" | "-" )
            MultiplyOperatorExpr())*
    ) #AdditiveOpExpr(>1)
}

/**
    *, /, %, /?, %?   
 */
void MultiplyOperatorExpr() #void:
{}
{
    (
        UnaryOperatorExpr() 
        (LOOKAHEAD(2) ("*" | "/" | "%" | "/?" | "%?") UnaryOperatorExpr())*
    ) #MultiplyOpExpr(>1)
}

/**
    -, ~, ! 
 */
void UnaryOperatorExpr() #void:
{}
{
    (
        "!" UnaryOperatorExpr()
        |"-" UnaryOperatorExpr()
        | "(" AssignExpr() ")"
        | PrimaryExpression()
    ) #UnaryOpExpr(>1)
}

void PrimaryExpression() #void:
{}
{
    (
        ExplicitModuleElementAccess() (LOOKAHEAD(2) Expression())*
        | Literal()
    )#PrimaryExpr(>1)
}

/**
    ModuleName::ElementName
 */
void ExplicitModuleElementAccess():
{
    Token moduleName;
    Token elementName;
    Token[] ids = new Token[2];
}
{
    moduleName = <Identifier> {ids[0] = moduleName;} "::" elementName = <Identifier> {ids[1] = elementName;jjtThis.jjtSetValue(ids);} 
}

/**
    Modifier 

    - : プライベート
    ! : 変数
    指定なし : 公開定数
 */
void Modifier():
{
    
}
{
    "-" {
        jjtThis.jjtSetValue(Modifier.PRIVATE);
    }
    | "!" {
        jjtThis.jjtSetValue(Modifier.VARIABLE);
    }
}
