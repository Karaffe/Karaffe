//Karaffe Javacc file

options {
    STATIC = false;
    IGNORE_CASE = false;
    UNICODE_INPUT = true;
    MULTI = true;
    VISITOR = true;
    VISITOR_EXCEPTION = "net.nokok.karaffe.parser.excptn.KaraffeParserException";
}

PARSER_BEGIN(KaraffeParser)
package net.nokok.karaffe.parser;

public class KaraffeParser{

    public KaraffeParser(String sourceCode){
        this(new java.io.StringReader(sourceCode));
    }

    public int getCurrentTokenBeginColumn(){
        return jj_input_stream.getBeginColumn();
    }

    public int getCurrentTokenEndColumn(){
        return jj_input_stream.getEndColumn();
    }

    public int getCurrentLine(){
        return jj_input_stream.getEndLine();
    }
}


PARSER_END(KaraffeParser)

TOKEN_MGR_DECLS:
{
    public static int commentNestLevel = 0;
}

/*
コメントの処理
*/
SKIP:
{
    " "
    | "\t"
    | < "//" (~["\n"])* <NewLine> >
    | "/*" {
        commentNestLevel++;
        SwitchTo(InComment);
    }
}

<InComment> SKIP:
{
    "/*" {
        commentNestLevel++;
    }
    | < ~[]>
    | <EndOfLine : <NewLine>> 
    | "*/" {
        commentNestLevel--;
        if(commentNestLevel == 0){
            SwitchTo(DEFAULT);
        }
    }
}

/**
    Reserved keywords 
*/
TOKEN:
{
      < Check : "check" >
    | < Interface : "interface" >
    | < Public : "public" >
    | < SideEffect : "seffect" >
    | < Switch : "switch" >
    | < To : "to" >
    | < Type : "type" >
    | < Undefined : "undefined" >
}

/**
    Literals
*/
TOKEN:
{
      < BoolLiteral : "true"
                    | "false" >
    | < IntLiteral : <Zero> | (<Minus>)? <NonZero> (<Zero> | <NonZero>)* >
    | < Hexadecimal : (<Minus>)? "0" ["x","X"] (<HexDigit>)+ >
    | < #HexDigit : ["0"-"9" , "A"-"F" , "a"-"f"] > 
    | < FloatLiteral : (<Minus>)? (<Zero> | <IntLiteral>) <Dot> (<Zero> | <NonZero>)+ (<Exp> <IntLiteral> )? >
    | < #Zero : "0" >
    | < #NonZero : ["1"-"9"] >
    | < #Exp : "e" | "E" >
    | < StringLiteral : "\"" (<StringCharacter>)* "\"" >
    | < #StringCharacter : (~["\"","\\","\n","\r"]) 
                         | <StringEscapeSeq> 
                         | <UnicodeEscape> >
    | < StringEscapeSeq : "\\" ["b","t","n","f","r","\"","\\","\'"] >
    | < UnicodeEscape : "\\u" <HexDigit> <HexDigit> <HexDigit> <HexDigit> >
}

/**
    Identifiers
*/
TOKEN:
{
      < Identifier : <IdentifierHead> (<IdentifierHead> | <IdentifierCharacter>)* ("[" "]")?>
    | < #IdentifierHead :      [
                                    "\u0041"-"\u005A", //A-Z
                                    "\u0061"-"\u007A", //a-z
                                    "\u005F",          //_
                                    "\u3040"-"\u309F", //ひらがな Hiragana
                                    "\u30A0"-"\u30FF", //カタカナ Katakana
                                    "\u4E00"-"\u9FFF"  //漢字     CJK Unified Ideographs
                               ]  >
    | < #IdentifierCharacter : [
                                    "\u002E",          //.
                                    "\u0030"-"\u0039", //0-9
                                    "\u0041"-"\u005A", //A-Z
                                    "\u0061"-"\u007A", //a-z
                                    "\u005F",          //_
                                    "\u3040"-"\u309F", //ひらがな Hiragana
                                    "\u30A0"-"\u30FF", //カタカナ Katakana
                                    "\u4E00"-"\u9FFF"  //漢字     CJK Unified Ideographs
                               ] >
    | < TypeParameter : ["\u0041"-"\u005A"] > //A-Z
}

/**
    Delimiters
*/
TOKEN:
{
      < LeftBracket : "[" >
    | < RightBracket : "]" >
    | < LeftBrace : "{" >
    | < RightBrace : "}" >
    | < LeftParen : "(" >
    | < RightParen : ")" >
    | < Colon : ":" >
    | < Dot : "." >
}

/**
    Operators
 */
TOKEN:
{

    < EqualSign : "=" >
    | < Lt : "<" >
    | < LtE : "<=" >
    | < Gt : ">" >
    | < GtE : ">=" >
    | < Plus : "+" >
    | < Minus : "-" >
    | < Star : "*" >
    | < Slash : "/" >
    | < SafeDiv : "/?" >
    | < Percent : "%" >
    | < SafeRem : "%?" >
    | < Tilde : "~" >
    | < Bang : "!" >
    | < And : "&" > 
    | < Or : "|" >
    | < Hat : "^" >
    | < Question : "?" >
    | < Arrow : "=>" >
    | < EqualTo : "==" >
    | < NotEqualTo : "!=" >

}

/**
    Other tokens
*/
TOKEN:
{
      < NewLine : "\r"
                | "\n" 
                | "\r\n" >
}

/**
 * CompileUnit = (Statement)* EOF
 */
public ASTCompileUnit CompileUnit():
{
}
{
    (Statement() | NewLine())* <EOF> {
        return jjtThis;
    }
}

//Statement

/**
    Statement = Declaration
              | FunctionApply
 */
void Statement():
{}
{
    LOOKAHEAD(3) Declaration()
    | FunctionApply()
}


// Declaration

/**
 Declaration = TypeDcl
             | InterfaceDcl
             | VariableDcl
 */
void Declaration():
{}
{
     LOOKAHEAD(3) TypeDcl()
     | InterfaceDcl()
     | (Modifier())? VariableDcl()
}

void Modifier():
{}
{
    Minus()
}

void Block():
{}
{
    LeftBrace() (LOOKAHEAD(2) NewLine())? (LOOKAHEAD(2)(NewLine())? Statement() (LOOKAHEAD(2) NewLine())?)* (NewLine())? RightBrace()
}

/**
    TypeDcl         = SimpleTypeDcl 
                    | TypeAlias
                    | Inheritance
    SimpleTypeDcl   = "type" Identifier TypeParameters?
    TypeAlias       = SimpleTypeDcl "=" (Identifier TypeParameters?)+
    Inheritance     = SimpleTypeDcl "<" (Identifier TypeParameters?)+
    
    e.g.
    type Foo 

    type Bar[A]

    type Baz[A B C]

    //TypeAlias
    type Foo = Bar

    type Foo[A] = Bar[A]

    //Inheritance
    type Foo < Bar

    type Foo[A] < Bar[A]

 */
void TypeDcl():
{}
{
    <Type> Identifier() (TypeParameters())? ((EqualOperator() | LessThanOperator()) (Identifier() (TypeParameters())?)*)* NewLine()
}

/**
    InterfaceDcl = "interface" InterfaceName TypeParameters? NewLine 

    e.g.
    interface Foo

    interface Foo[A]
 */
void InterfaceDcl():
{}
{
    <Interface> Identifier() NewLine() 
}

/**
    VariableDcl     = Identifier TypeParameters? VariableTypeDcl? "=" Expression? NewLine 
    VariableTypeDcl = VariableType
                    | FunctionType

    e.g.
    varName
    
    varName = Expr

    varName : TypeName = Expr
    
    functionName : TypeName to TypeName = Expr
    
    functionName[T] : T to T = Expr

    funcName[T < Num] : T to T = Expr

    funcName[A B] : A to B = Expr

    funcName[A > Num] : A to A = Expr

    funcName[A < Num B] : A to B = Expr

    funcName : TypeName to TypeName {
        Block
    }
 */
void VariableDcl():
{}
{
    Identifier() (LOOKAHEAD(2) TypeParameters())? (<Colon> VariableTypeDcl())? (EqualOperator())? (Expression() | Block()) NewLine()
}

/**
    VariableTypeDcl = (Identifier TypeParameters?)+ ("to" Identifier TypeParameters?)? 

    e.g.
    TypeName

    TypeName to TypeName

    TypeName1 TypeName2 to TypeName

    TypeName[A] to TypeName

    TypeName[A] to TypeName[A]

 */
void VariableTypeDcl():
{
}
{
    (LOOKAHEAD(2) Identifier() (LOOKAHEAD(2) TypeParameters())?)+ (<To> Identifier() (LOOKAHEAD(2) TypeParameters())?)? 
}

/**
    TypeParameters = "[" TypeParameter1 TypeParameter2 ... "]"
 */
void TypeParameters():
{}
{
    LeftBracket() (TypeParameter())+ RightBracket()
}

/**
    TypeParameter = BoundedTypes
                  | Identifier
    BoundedTypes  = Identifier Lt/GtOperator Identifier
 */
void TypeParameter():
{}
{
    Identifier() ((LessThanOperator() | GreaterThanOperator()) Identifier())? 
}

//Expressions

/**
    Expression = ConditionalExpressionsOrAssign

    Expressionの評価優先度
    低い順から
    AssignExpr =
    ↓
    OrOperatorExpr |
    ↓
    AndOperatorExpr &
    ↓
    EqualityOperatorExpr == !=
    ↓
    ComparisonOperatorExpr <= >= < >
    ↓
    AdditiveOperatorExpr + -
    ↓
    MultiplyOperatorExpr * / /? % %? 
    ↓
    UnaryOperatorExpr - ~ !
    ↓
    ArrayElement //未実装
    ↓
    FunctionApply
    
 */
void Expression():
{}
{
    AssignExpr()
}


void AssignExpr():
{}
{
    OrOperatorExpr() (LOOKAHEAD(2) EqualOperator() OrOperatorExpr())*
}

void OrOperatorExpr():
{}
{
    AndOperatorExpr() (LOOKAHEAD(2) OrOperator() AndOperatorExpr())*
}

void AndOperatorExpr():
{}
{
    EqualityOperatorExpr() (LOOKAHEAD(2) AndOperator() EqualityOperatorExpr())*
}

void EqualityOperatorExpr():
{}
{
    ComparisonOperatorExpr() (LOOKAHEAD(2) EqualOperator() ComparisonOperatorExpr())*
}

void ComparisonOperatorExpr():
{}
{
    AdditiveOperatorExpr() (LOOKAHEAD(2) (EqualTo() | NotEqualTo() | GreaterThanOperator() | LessThanOperator()) AdditiveOperatorExpr())*
}

void AdditiveOperatorExpr():
{}
{
    MultiplyOperatorExpr() (LOOKAHEAD(2) (Plus() | Minus()) MultiplyOperatorExpr())*
}

void MultiplyOperatorExpr():
{}
{
    UnaryOperatorExpr() (LOOKAHEAD(2) (StarOperator() | SlashOperator() | PercentOperator() | SafeDiv() | SafeRem()) UnaryOperatorExpr())*
}

void UnaryOperatorExpr():
{}
{
    Minus() UnaryOperatorExpr()
    | TildeOperator() UnaryOperatorExpr()
    | BangOperator() UnaryOperatorExpr()
    | LeftParen() AssignExpr() RightParen()
    | FunctionApply() (LOOKAHEAD(2) UnaryOperatorExpr())?
}

void FunctionApply():
{}
{
    (LOOKAHEAD(2) Identifier())+ (LOOKAHEAD(2) Expression())?
    | Literal()
}

/**
    Literal = BoolLiteral
            | IntLiteral
            | FloatLiteral
            | StringLiteral
            | UndefinedLiteral
 */
void Literal():
{
    Token t;
}
{
      t = <BoolLiteral> {
        jjtThis.jjtSetValue(t);
    }
    | t = <IntLiteral> {
        jjtThis.jjtSetValue(t);
    }
    | t = <FloatLiteral> {
        jjtThis.jjtSetValue(t);
    }
    | t = <StringLiteral> {
        jjtThis.jjtSetValue(t);
    }
    | t = <Undefined> {
        jjtThis.jjtSetValue(t);
    }
    | FunctionLiteral()
}

/**
    FunctionLiteral = "[" FunctionVariableBinding "]" "=>" Block

    e.g.

    [] => {...}
 */
void FunctionLiteral():
{}
{
    LeftBracket() (FunctionVariableBinding())* RightBracket() ArrowOperator() Block()
}

/**
    FunctionVariableBinding = Identifier
                            | DefaultValueBinding
                            | ExplicitTypeBinding
                            | ExplicitTypeDefaultBinding
    DefaultValueBinding     = Identifier "=" Literal
    ExplicitTypeBinding     = Identifier ":" Identifier
    ExplicitTypeDefaultBinding = ExplicitTypeBinding "=" Literal

 */
void FunctionVariableBinding():
{}
{
    Identifier() (<Colon> Identifier() EqualOperator() Literal())?
}

//Identifiers

/**
    Identifier = IdentifierHead IdentifierCharacter
 */
void Identifier():
{
    Token t;
}
{
    t = <Identifier> {
        jjtThis.jjtSetValue(t);
    }
}

//Delimiters

void LeftBracket():
{}
{
    <LeftBracket>
}

void RightBracket():
{}
{
    <RightBracket>
}

void LeftBrace():
{}
{
    <LeftBrace>
}

void RightParen():
{}
{
    <RightParen>
}

void LeftParen():
{}
{
    <LeftParen>
}

void RightBrace():
{}
{
    <RightBrace>
}

void Colon():
{}
{
    <Colon>
}

void Dot():
{}
{
    <Dot>
}
//Operators

void EqualOperator():
{}
{
    <EqualSign>
}

void LessThanOperator():
{}
{
    <Lt>
}

void LessThanEqualToOperator():
{}
{
    <LtE>
}

void GreaterThanOperator():
{}
{
    <Gt>
}

void GreaterThanEqualToOperator():
{}
{
    <GtE>
}
void Plus():
{}
{
    <Plus>
}

void Minus():
{}
{
    <Minus>
}

void StarOperator():
{}
{
    <Star>
}

void SlashOperator():
{}
{
    <Slash>
}

void PercentOperator():
{}
{
    <Percent>
}

void TildeOperator():
{}
{
    <Tilde>
}

void BangOperator():
{}
{
    <Bang>
}

void AndOperator():
{}
{
    <And>
}

void OrOperator():
{}
{
    <Or>
}

void HatOperator():
{}
{
    <Hat>
}

void QuestionOperator():
{}
{
    <Question>
}

void ArrowOperator():
{}
{
    <Arrow>
}

void EqualTo():
{}
{
    <EqualTo>
}

void NotEqualTo():
{}
{
    <NotEqualTo>
}

void SafeDiv():
{}
{
    <SafeDiv>
}

void SafeRem():
{}
{
    <SafeRem>
}

//Other tokens

void NewLine():
{}
{
    <NewLine>
}

