/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. karaffe.jj */
/*@egen*/// DO NOT EDIT!
// This code was auto-generated by the following shellscript.
// ProjectRoot/genparser.sh

//1_options.jjt
options {
    STATIC = false;
    IGNORE_CASE = false;
    UNICODE_INPUT = true;
                 
                   
                                                                          
                        
}
//2_parserbegin_end.jjt
PARSER_BEGIN(Parser)
package net.nokok.karaffe.parser;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/
    
    public Parser(String sourceCode){
        this(new java.io.StringReader(sourceCode));
    }
}

PARSER_END(Parser)
//3_TOKEN_MGR_DECLS.jjt
TOKEN_MGR_DECLS:
{
    public static int commentNestLevel = 0;
}
//4_compileunit.jjt
ASTCompileUnit CompileUnit():{/*@bgen(jjtree) CompileUnit */
  ASTCompileUnit jjtn000 = new ASTCompileUnit(JJTCOMPILEUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CompileUnit */
    try {
/*@egen*/
    (PackageDecl())? (ImportStmt() | FuncAlias() | TypeDecl())* <EOF>/*@bgen(jjtree)*/
                                                                      {
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                                      }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PackageDecl():{/*@bgen(jjtree) PackageDecl */
  ASTPackageDecl jjtn000 = new ASTPackageDecl(JJTPACKAGEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PackageDecl */
    try {
/*@egen*/
    "package" ModuleName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ModuleName()     :{}
{
    AmbiguousName()
}

void ImportStmt():{/*@bgen(jjtree) ImportStmt */
  ASTImportStmt jjtn000 = new ASTImportStmt(JJTIMPORTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ImportStmt */
    try {
/*@egen*/
    LOOKAHEAD("import" TypeName() "->") AliasImport() |
    LOOKAHEAD("import" TypeName()) SimpleImport() |
    URLImport()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void SimpleImport():{/*@bgen(jjtree) SimpleImport */
  ASTSimpleImport jjtn000 = new ASTSimpleImport(JJTSIMPLEIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleImport */
    try {
/*@egen*/
    "import" (LOOKAHEAD(TypeName()) TypeName() ("."/*@bgen(jjtree) #StarImport(true) */
                                                    {
                                                      ASTStarImport jjtn001 = new ASTStarImport(JJTSTARIMPORT);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
                                                      jjtn001.jjtSetFirstToken(getToken(1));
                                                    }
                                                    try {
/*@egen*/ "*"/*@bgen(jjtree)*/
                                                    } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001, true);
                                                        jjtn001.jjtSetLastToken(getToken(0));
                                                      }
                                                    }
/*@egen*/              )?)+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AliasImport():{/*@bgen(jjtree) AliasImport */
  ASTAliasImport jjtn000 = new ASTAliasImport(JJTALIASIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AliasImport */
    try {
/*@egen*/
    "import" (LOOKAHEAD(TypeName() "->") TypeName() ImportAfter())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ImportAfter():{/*@bgen(jjtree) ImportAfter */
  ASTImportAfter jjtn000 = new ASTImportAfter(JJTIMPORTAFTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ImportAfter */
    try {
/*@egen*/
    "->" Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void URLImport():{/*@bgen(jjtree) URLImport */
  ASTURLImport jjtn000 = new ASTURLImport(JJTURLIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) URLImport */
    try {
/*@egen*/
    "import" (LOOKAHEAD(StringLiteral()) StringLiteral())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypeName():{/*@bgen(jjtree) TypeName */
  ASTTypeName jjtn000 = new ASTTypeName(JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeName */
    try {
/*@egen*/
    AmbiguousName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

//**********************************************************************
//Statement
//**********************************************************************

void Statement():{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    FuncAlias() |
    LOOKAHEAD(PrivateImportStmt()) PrivateImportStmt() |
    LOOKAHEAD(ImportStmt()) ImportStmt()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FuncAlias():{/*@bgen(jjtree) FuncAlias */
  ASTFuncAlias jjtn000 = new ASTFuncAlias(JJTFUNCALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FuncAlias */
    try {
/*@egen*/
    "funcalias" FunctionName() ParenFormalParams() "->" Identifier() ParenFormalParams()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FunctionName():{/*@bgen(jjtree) FunctionName */
  ASTFunctionName jjtn000 = new ASTFunctionName(JJTFUNCTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FunctionName */
    try {
/*@egen*/
    AmbiguousName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PrivateImportStmt():{/*@bgen(jjtree) PrivateImportStmt */
  ASTPrivateImportStmt jjtn000 = new ASTPrivateImportStmt(JJTPRIVATEIMPORTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PrivateImportStmt */
    try {
/*@egen*/
    "import" (LOOKAHEAD(TypeName() (ImportAfter())?) TypeName() (ImportAfter())?)+ PrivateImportBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PrivateImportBlock():{/*@bgen(jjtree) PrivateImportBlock */
  ASTPrivateImportBlock jjtn000 = new ASTPrivateImportBlock(JJTPRIVATEIMPORTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PrivateImportBlock */
    try {
/*@egen*/
    "{" BlockStmts() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Annotations():{/*@bgen(jjtree) Annotations */
  ASTAnnotations jjtn000 = new ASTAnnotations(JJTANNOTATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Annotations */
    try {
/*@egen*/
    (Annotation())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/   
}

void Annotation():{/*@bgen(jjtree) Annotation */
  ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Annotation */
    try {
/*@egen*/
    "@" Identifier() (ParenArguments())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
//6_typedecls.jjt
void TypeDecl()      :{}
{
    LOOKAHEAD(Annotations() ClassModifiers() "type") ClassDecl() |
    LOOKAHEAD(Annotations() EnumModifiers() "enum") EnumDecl() |
    LOOKAHEAD(Annotations() ClassModifiers() "case" "type") AlgebraicDataTypeDecl() | 
    LOOKAHEAD(Annotations() InterfaceModifiers() "interface") InterfaceDecl() | 
    LOOKAHEAD(Annotations() TypeAliasModifiers() "typealias") TypeAliasDecl()
}

//**********************************************************************
//Class Decl
//**********************************************************************
void ClassDecl():{/*@bgen(jjtree) ClassDecl */
  ASTClassDecl jjtn000 = new ASTClassDecl(JJTCLASSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassDecl */
    try {
/*@egen*/
    Annotations() ClassModifiers() "type" Identifier() (TypeParameters())? (ParenFormalParams())? (SuperTypeAndInterfaces())? ClassBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ClassModifiers():{/*@bgen(jjtree) ClassModifiers */
  ASTClassModifiers jjtn000 = new ASTClassModifiers(JJTCLASSMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassModifiers */
    try {
/*@egen*/
    (ClassModifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ClassModifier()      :{}
{
    PublicModifier()|
    ProtectedModifier()|
    PrivateModifier() |
    AbstractModifier()|
    StaticModifier()|
    FinalModifier()
}

void TypeParameters():{/*@bgen(jjtree) TypeParameters */
  ASTTypeParameters jjtn000 = new ASTTypeParameters(JJTTYPEPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeParameters */
    try {
/*@egen*/
    "[" TypeParameter() ("," TypeParameter())* "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypeParameter():{/*@bgen(jjtree) TypeParameter */
  ASTTypeParameter jjtn000 = new ASTTypeParameter(JJTTYPEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeParameter */
    try {
/*@egen*/
    Identifier() (TypeParameters())? (TypeBound())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypeBound():{/*@bgen(jjtree) TypeBound */
  ASTTypeBound jjtn000 = new ASTTypeBound(JJTTYPEBOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeBound */
    try {
/*@egen*/
    "<" ClassType() (AdditionalBound())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Type():{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    LOOKAHEAD(ClassType() "->") FuncType() |
    LOOKAHEAD(ClassType()) ClassType()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ClassType():{/*@bgen(jjtree) ClassType */
  ASTClassType jjtn000 = new ASTClassType(JJTCLASSTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassType */
    try {
/*@egen*/
    AmbiguousName() (LOOKAHEAD(TypeParameters()) TypeParameters())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FuncType():{/*@bgen(jjtree) FuncType */
  ASTFuncType jjtn000 = new ASTFuncType(JJTFUNCTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FuncType */
    try {
/*@egen*/
    ClassType() "->" Type()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AdditionalBound():{/*@bgen(jjtree) AdditionalBound */
  ASTAdditionalBound jjtn000 = new ASTAdditionalBound(JJTADDITIONALBOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AdditionalBound */
    try {
/*@egen*/
    "&" ClassType()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void SuperTypeAndInterfaces():{/*@bgen(jjtree) SuperTypeAndInterfaces */
  ASTSuperTypeAndInterfaces jjtn000 = new ASTSuperTypeAndInterfaces(JJTSUPERTYPEANDINTERFACES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SuperTypeAndInterfaces */
    try {
/*@egen*/
    "<" ClassType() ("," ClassType())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ClassBody():{/*@bgen(jjtree) ClassBody */
  ASTClassBody jjtn000 = new ASTClassBody(JJTCLASSBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassBody */
    try {
/*@egen*/
    "{" (ClassBodyDecl())* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ClassBodyDecl()     :{}
{
    LOOKAHEAD(CtorModifiers() "func" "this") ClassCtorDecl() |
    LOOKAHEAD(FuncModifiers() "func" Identifier()) FuncDecl() |
    LOOKAHEAD(FieldModifiers() "def" Identifier()) FieldDecl() |
    ImportStmt() | 
    FuncAlias()
}

void ClassCtorDecl():{/*@bgen(jjtree) ClassCtorDecl */
  ASTClassCtorDecl jjtn000 = new ASTClassCtorDecl(JJTCLASSCTORDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassCtorDecl */
    try {
/*@egen*/
    CtorModifiers() "func" "this" (TypeParameters())? ParenFormalParams() CtorBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void CtorModifiers():{/*@bgen(jjtree) CtorModifiers */
  ASTCtorModifiers jjtn000 = new ASTCtorModifiers(JJTCTORMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CtorModifiers */
    try {
/*@egen*/
    (CtorModifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void CtorModifier()     :{}
{
    PublicModifier() |
    ProtectedModifier() |
    PrivateModifier()
}

void FormalParameters():{/*@bgen(jjtree) FormalParameters */
  ASTFormalParameters jjtn000 = new ASTFormalParameters(JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FormalParameters */
    try {
/*@egen*/
    (LOOKAHEAD((VariableModifier())? Identifier() Type() ",") FormalParameter())* LastFormalParamter()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FormalParameter():{/*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FormalParameter */
    try {
/*@egen*/
    (VariableModifier())? Identifier() Type() ","/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void LastFormalParamter():{/*@bgen(jjtree) LastFormalParamter */
  ASTLastFormalParamter jjtn000 = new ASTLastFormalParamter(JJTLASTFORMALPARAMTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LastFormalParamter */
    try {
/*@egen*/
    (VariableModifier())? Identifier() Type() (/*@bgen(jjtree) #Varargs(true) */
                                               {
                                                 ASTVarargs jjtn001 = new ASTVarargs(JJTVARARGS);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
                                               }
                                               try {
/*@egen*/"*"/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/           )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void VariableModifier():{/*@bgen(jjtree) VariableModifier */
  ASTVariableModifier jjtn000 = new ASTVariableModifier(JJTVARIABLEMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VariableModifier */
    try {
/*@egen*/
    FinalModifier() |
    AutoModifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void CtorBody():{/*@bgen(jjtree) CtorBody */
  ASTCtorBody jjtn000 = new ASTCtorBody(JJTCTORBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CtorBody */
    try {
/*@egen*/
    "{" (LOOKAHEAD(ExplicitCtorInvocation()) ExplicitCtorInvocation())? BlockStmts() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ExplicitCtorInvocation():{/*@bgen(jjtree) ExplicitCtorInvocation */
  ASTExplicitCtorInvocation jjtn000 = new ASTExplicitCtorInvocation(JJTEXPLICITCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExplicitCtorInvocation */
    try {
/*@egen*/
    ThisCtorInvocation() | 
    SuperCtorInvocation()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ThisCtorInvocation():{/*@bgen(jjtree) ThisCtorInvocation */
  ASTThisCtorInvocation jjtn000 = new ASTThisCtorInvocation(JJTTHISCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ThisCtorInvocation */
    try {
/*@egen*/
    "this" ParenArguments()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void SuperCtorInvocation():{/*@bgen(jjtree) SuperCtorInvocation */
  ASTSuperCtorInvocation jjtn000 = new ASTSuperCtorInvocation(JJTSUPERCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SuperCtorInvocation */
    try {
/*@egen*/
    "super" ParenArguments()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void BlockStmts():{/*@bgen(jjtree) BlockStmts */
  ASTBlockStmts jjtn000 = new ASTBlockStmts(JJTBLOCKSTMTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BlockStmts */
    try {
/*@egen*/
    (LOOKAHEAD(BlockStmt()) BlockStmt())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void BlockStmt():{/*@bgen(jjtree) BlockStmt */
  ASTBlockStmt jjtn000 = new ASTBlockStmt(JJTBLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BlockStmt */
    try {
/*@egen*/
    LocalValDecl() |
    Expression() |
    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void LocalValDecl():{/*@bgen(jjtree) LocalValDecl */
  ASTLocalValDecl jjtn000 = new ASTLocalValDecl(JJTLOCALVALDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LocalValDecl */
    try {
/*@egen*/
    (VariableModifier())? "def" Identifier() (Type())? "=" VariableInitializer()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void VariableInitializer():{/*@bgen(jjtree) VariableInitializer */
  ASTVariableInitializer jjtn000 = new ASTVariableInitializer(JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VariableInitializer */
    try {
/*@egen*/
    Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FieldDecl():{/*@bgen(jjtree) FieldDecl */
  ASTFieldDecl jjtn000 = new ASTFieldDecl(JJTFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FieldDecl */
    try {
/*@egen*/
    FieldModifiers() "def" Identifier() (Type() (TypeParameters())?)? "=" FieldInitializer()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FieldModifiers():{/*@bgen(jjtree) FieldModifiers */
  ASTFieldModifiers jjtn000 = new ASTFieldModifiers(JJTFIELDMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FieldModifiers */
    try {
/*@egen*/
    (FieldModifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FieldModifier()     :{}
{
    PublicModifier() | 
    ProtectedModifier() | 
    PrivateModifier() |
    StaticModifier() |
    VarModifier()
}


void FieldInitializer():{/*@bgen(jjtree) FieldInitializer */
  ASTFieldInitializer jjtn000 = new ASTFieldInitializer(JJTFIELDINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FieldInitializer */
    try {
/*@egen*/
    Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void FuncDecl():{/*@bgen(jjtree) FuncDecl */
  ASTFuncDecl jjtn000 = new ASTFuncDecl(JJTFUNCDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FuncDecl */
    try {
/*@egen*/
    FuncModifiers() "func" Identifier() (TypeParameters())? ParenFormalParams() (ReturnType())? (FuncBody())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FuncModifiers():{/*@bgen(jjtree) FuncModifiers */
  ASTFuncModifiers jjtn000 = new ASTFuncModifiers(JJTFUNCMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FuncModifiers */
    try {
/*@egen*/
    (FuncModifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FuncModifier()     :{}
{
    PublicModifier() |
    ProtectedModifier() |
    PrivateModifier() | 
    AbstractModifier() |
    StaticModifier() |
    VarModifier() |
    FinalModifier() |
    SealedModifier() |
    OverrideModifier()
}

void ParenFormalParams():{/*@bgen(jjtree) ParenFormalParams */
  ASTParenFormalParams jjtn000 = new ASTParenFormalParams(JJTPARENFORMALPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParenFormalParams */
    try {
/*@egen*/
    "(" (FormalParameters())? ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ReturnType():{/*@bgen(jjtree) ReturnType */
  ASTReturnType jjtn000 = new ASTReturnType(JJTRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ReturnType */
    try {
/*@egen*/
    Type()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FuncBody():{/*@bgen(jjtree) FuncBody */
  ASTFuncBody jjtn000 = new ASTFuncBody(JJTFUNCBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FuncBody */
    try {
/*@egen*/
    "{" BlockStmts() "}" |
    "=" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

//**********************************************************************
//Algebraic Data Type
//**********************************************************************
void AlgebraicDataTypeDecl():{/*@bgen(jjtree) AlgebraicDataTypeDecl */
  ASTAlgebraicDataTypeDecl jjtn000 = new ASTAlgebraicDataTypeDecl(JJTALGEBRAICDATATYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AlgebraicDataTypeDecl */
    try {
/*@egen*/
    Annotations() ClassModifiers() "case" "type" Identifier() (TypeParameters())? "=" AlgebraicDataTypeBody() ("|" AlgebraicDataTypeBody())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AlgebraicDataTypeBody():{/*@bgen(jjtree) AlgebraicDataTypeBody */
  ASTAlgebraicDataTypeBody jjtn000 = new ASTAlgebraicDataTypeBody(JJTALGEBRAICDATATYPEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AlgebraicDataTypeBody */
    try {
/*@egen*/
    Identifier() (TypeParameters())? (ParenFormalParams())? (SuperTypeAndInterfaces())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

//**********************************************************************
//Interface
//**********************************************************************
void InterfaceDecl():{/*@bgen(jjtree) InterfaceDecl */
  ASTInterfaceDecl jjtn000 = new ASTInterfaceDecl(JJTINTERFACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InterfaceDecl */
    try {
/*@egen*/
    Annotations() InterfaceModifiers() "interface" Identifier() (TypeParameters())? (ExtendsInterfaces())? InterfaceBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void InterfaceModifiers():{/*@bgen(jjtree) InterfaceModifiers */
  ASTInterfaceModifiers jjtn000 = new ASTInterfaceModifiers(JJTINTERFACEMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InterfaceModifiers */
    try {
/*@egen*/
    (InterfaceModifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void InterfaceModifier():{/*@bgen(jjtree) InterfaceModifier */
  ASTInterfaceModifier jjtn000 = new ASTInterfaceModifier(JJTINTERFACEMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InterfaceModifier */
    try {
/*@egen*/
    PublicModifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void ExtendsInterfaces():{/*@bgen(jjtree) ExtendsInterfaces */
  ASTExtendsInterfaces jjtn000 = new ASTExtendsInterfaces(JJTEXTENDSINTERFACES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExtendsInterfaces */
    try {
/*@egen*/
    "<" ClassType() ("," ClassType())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void InterfaceBody():{/*@bgen(jjtree) InterfaceBody */
  ASTInterfaceBody jjtn000 = new ASTInterfaceBody(JJTINTERFACEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InterfaceBody */
    try {
/*@egen*/
    "{" (InterfaceMember())* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void InterfaceMember():{/*@bgen(jjtree) InterfaceMember */
  ASTInterfaceMember jjtn000 = new ASTInterfaceMember(JJTINTERFACEMEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InterfaceMember */
    try {
/*@egen*/
    LOOKAHEAD(ConstantDecl()) ConstantDecl() |
    LOOKAHEAD(InterfaceMethodDecl()) InterfaceMethodDecl() | 
    LOOKAHEAD(ClassDecl()) ClassDecl() |
    LOOKAHEAD(InterfaceDecl()) InterfaceDecl()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ConstantDecl():{/*@bgen(jjtree) ConstantDecl */
  ASTConstantDecl jjtn000 = new ASTConstantDecl(JJTCONSTANTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ConstantDecl */
    try {
/*@egen*/
    (StaticModifier())? "def" Identifier() Identifier() (TypeParameters())? ("=" VariableInitializer())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void InterfaceMethodDecl():{/*@bgen(jjtree) InterfaceMethodDecl */
  ASTInterfaceMethodDecl jjtn000 = new ASTInterfaceMethodDecl(JJTINTERFACEMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InterfaceMethodDecl */
    try {
/*@egen*/
    (FuncModifier())* "def" Identifier() (TypeParameters())? ParenFormalParams() (ReturnType())? ("=" FuncBody())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

//**********************************************************************
//TypeAlias
//**********************************************************************
void TypeAliasDecl():{/*@bgen(jjtree) TypeAliasDecl */
  ASTTypeAliasDecl jjtn000 = new ASTTypeAliasDecl(JJTTYPEALIASDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeAliasDecl */
    try {
/*@egen*/
    Annotations() TypeAliasModifiers() "typealias" Identifier() Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypeAliasModifiers():{/*@bgen(jjtree) TypeAliasModifiers */
  ASTTypeAliasModifiers jjtn000 = new ASTTypeAliasModifiers(JJTTYPEALIASMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeAliasModifiers */
    try {
/*@egen*/
    (TypeAliasModifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypeAliasModifier():{/*@bgen(jjtree) TypeAliasModifier */
  ASTTypeAliasModifier jjtn000 = new ASTTypeAliasModifier(JJTTYPEALIASMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeAliasModifier */
    try {
/*@egen*/
    PublicModifier() |
    ProtectedModifier() |
    PrivateModifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

//**********************************************************************
//Enum
//**********************************************************************
void EnumDecl():{/*@bgen(jjtree) EnumDecl */
  ASTEnumDecl jjtn000 = new ASTEnumDecl(JJTENUMDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EnumDecl */
    try {
/*@egen*/
    Annotations() EnumModifiers() "enum" EnumName() "[" EnumMembers() "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void EnumModifiers():{/*@bgen(jjtree) EnumModifiers */
  ASTEnumModifiers jjtn000 = new ASTEnumModifiers(JJTENUMMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EnumModifiers */
    try {
/*@egen*/
    (EnumModifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void EnumModifier():{/*@bgen(jjtree) EnumModifier */
  ASTEnumModifier jjtn000 = new ASTEnumModifier(JJTENUMMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EnumModifier */
    try {
/*@egen*/
    PublicModifier() |
    ProtectedModifier() |
    PrivateModifier() |
    StaticModifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void EnumName():{/*@bgen(jjtree) EnumName */
  ASTEnumName jjtn000 = new ASTEnumName(JJTENUMNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EnumName */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void EnumMembers():{/*@bgen(jjtree) EnumMembers */
  ASTEnumMembers jjtn000 = new ASTEnumMembers(JJTENUMMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EnumMembers */
    try {
/*@egen*/
    Identifier() ("," Identifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

//7_expr.jjt
//**********************************************************************
//Expressions
//**********************************************************************
void Expression():{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    LOOKAHEAD(AssignmentExpr()) AssignmentExpr() |
    LOOKAHEAD(PipelineExpr()) PipelineExpr() |
    IfExpr() |
    SwitchExpr() |
    WhileLoopExpr()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AssignmentExpr()     :{}
{/*@bgen(jjtree) #AssignmentExpr(> 1) */
    {
      ASTAssignmentExpr jjtn001 = new ASTAssignmentExpr(JJTASSIGNMENTEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (LeftHandSide() AssignmentOp() Expression())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                   
}

void AssignmentOp():{/*@bgen(jjtree) AssignmentOp */
  ASTAssignmentOp jjtn000 = new ASTAssignmentOp(JJTASSIGNMENTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssignmentOp */
    try {
/*@egen*/
    ("="|"+="|"-="|"*="|"/="|"%="|"&="|"|="|"^=")/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void LeftHandSide():{/*@bgen(jjtree) LeftHandSide */
  ASTLeftHandSide jjtn000 = new ASTLeftHandSide(JJTLEFTHANDSIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LeftHandSide */
    try {
/*@egen*/
    ExpressionName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PipelineExpr()     :{}
{
    BoolOrExpr() ((/*@bgen(jjtree) #BackwardPipelineExpr(true) */
                   {
                     ASTBackwardPipelineExpr jjtn001 = new ASTBackwardPipelineExpr(JJTBACKWARDPIPELINEEXPR);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/"|>"/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/                         |/*@bgen(jjtree) #PipelineExpr(true) */
                                                  {
                                                    ASTPipelineExpr jjtn002 = new ASTPipelineExpr(JJTPIPELINEEXPR);
                                                    boolean jjtc002 = true;
                                                    jjtree.openNodeScope(jjtn002);
                                                    jjtn002.jjtSetFirstToken(getToken(1));
                                                  }
                                                  try {
/*@egen*/ "<|"/*@bgen(jjtree)*/
                                                  } finally {
                                                    if (jjtc002) {
                                                      jjtree.closeNodeScope(jjtn002, true);
                                                      jjtn002.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/                )/*@bgen(jjtree) #ExprNode( 2) */
                                                                        {
                                                                          ASTExprNode jjtn003 = new ASTExprNode(JJTEXPRNODE);
                                                                          boolean jjtc003 = true;
                                                                          jjtree.openNodeScope(jjtn003);
                                                                          jjtn003.jjtSetFirstToken(getToken(1));
                                                                        }
                                                                        try {
/*@egen*/ BoolOrExpr()/*@bgen(jjtree)*/
                                                                        } catch (Throwable jjte003) {
                                                                          if (jjtc003) {
                                                                            jjtree.clearNodeScope(jjtn003);
                                                                            jjtc003 = false;
                                                                          } else {
                                                                            jjtree.popNode();
                                                                          }
                                                                          if (jjte003 instanceof RuntimeException) {
                                                                            throw (RuntimeException)jjte003;
                                                                          }
                                                                          if (jjte003 instanceof ParseException) {
                                                                            throw (ParseException)jjte003;
                                                                          }
                                                                          throw (Error)jjte003;
                                                                        } finally {
                                                                          if (jjtc003) {
                                                                            jjtree.closeNodeScope(jjtn003,  2);
                                                                            jjtn003.jjtSetLastToken(getToken(0));
                                                                          }
                                                                        }
/*@egen*/             )*
}

void BoolOrExpr()     :{}
{
    BoolAndExpr() (/*@bgen(jjtree) #BoolOr(true) */
                   {
                     ASTBoolOr jjtn001 = new ASTBoolOr(JJTBOOLOR);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/"|"/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/          /*@bgen(jjtree) #ExprNode( 2) */
                                 {
                                   ASTExprNode jjtn002 = new ASTExprNode(JJTEXPRNODE);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                   jjtn002.jjtSetFirstToken(getToken(1));
                                 }
                                 try {
/*@egen*/ BoolAndExpr()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte002) {
                                   if (jjtc002) {
                                     jjtree.clearNodeScope(jjtn002);
                                     jjtc002 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte002 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte002;
                                   }
                                   if (jjte002 instanceof ParseException) {
                                     throw (ParseException)jjte002;
                                   }
                                   throw (Error)jjte002;
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002,  2);
                                     jjtn002.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/             )*
}

void BoolAndExpr()     :{}
{
    EqualityExpr() (/*@bgen(jjtree) #BoolAnd(true) */
                    {
                      ASTBoolAnd jjtn001 = new ASTBoolAnd(JJTBOOLAND);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtn001.jjtSetFirstToken(getToken(1));
                    }
                    try {
/*@egen*/"&"/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
                    }
/*@egen*/           /*@bgen(jjtree) #ExprNode( 2) */
                                   {
                                     ASTExprNode jjtn002 = new ASTExprNode(JJTEXPRNODE);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                     jjtn002.jjtSetFirstToken(getToken(1));
                                   }
                                   try {
/*@egen*/ EqualityExpr()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte002) {
                                     if (jjtc002) {
                                       jjtree.clearNodeScope(jjtn002);
                                       jjtc002 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte002 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte002;
                                     }
                                     if (jjte002 instanceof ParseException) {
                                       throw (ParseException)jjte002;
                                     }
                                     throw (Error)jjte002;
                                   } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002,  2);
                                       jjtn002.jjtSetLastToken(getToken(0));
                                     }
                                   }
/*@egen*/             )*
}

void EqualityExpr()     :{}
{
    RelationalExpr() ((/*@bgen(jjtree) #EqualTo(true) */
                       {
                         ASTEqualTo jjtn001 = new ASTEqualTo(JJTEQUALTO);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtn001.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*/"=="/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/           |/*@bgen(jjtree) #NotEqualTo(true) */
                                        {
                                          ASTNotEqualTo jjtn002 = new ASTNotEqualTo(JJTNOTEQUALTO);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                          jjtn002.jjtSetFirstToken(getToken(1));
                                        }
                                        try {
/*@egen*/ "!="/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002, true);
                                            jjtn002.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/             )/*@bgen(jjtree) #ExprNode( 2) */
                                                           {
                                                             ASTExprNode jjtn003 = new ASTExprNode(JJTEXPRNODE);
                                                             boolean jjtc003 = true;
                                                             jjtree.openNodeScope(jjtn003);
                                                             jjtn003.jjtSetFirstToken(getToken(1));
                                                           }
                                                           try {
/*@egen*/ RelationalExpr()/*@bgen(jjtree)*/
                                                           } catch (Throwable jjte003) {
                                                             if (jjtc003) {
                                                               jjtree.clearNodeScope(jjtn003);
                                                               jjtc003 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte003 instanceof RuntimeException) {
                                                               throw (RuntimeException)jjte003;
                                                             }
                                                             if (jjte003 instanceof ParseException) {
                                                               throw (ParseException)jjte003;
                                                             }
                                                             throw (Error)jjte003;
                                                           } finally {
                                                             if (jjtc003) {
                                                               jjtree.closeNodeScope(jjtn003,  2);
                                                               jjtn003.jjtSetLastToken(getToken(0));
                                                             }
                                                           }
/*@egen*/             )*
}

void RelationalExpr()     :{}
{
    RangeExpr() ((/*@bgen(jjtree) #LessThan(true) */
                  {
                    ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/"<"/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/            |/*@bgen(jjtree) #GreaterThan(true) */
                                   {
                                     ASTGreaterThan jjtn002 = new ASTGreaterThan(JJTGREATERTHAN);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                     jjtn002.jjtSetFirstToken(getToken(1));
                                   }
                                   try {
/*@egen*/ ">"/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002, true);
                                       jjtn002.jjtSetLastToken(getToken(0));
                                     }
                                   }
/*@egen*/               |/*@bgen(jjtree) #LessThanEqTo(true) */
                                                       {
                                                         ASTLessThanEqTo jjtn003 = new ASTLessThanEqTo(JJTLESSTHANEQTO);
                                                         boolean jjtc003 = true;
                                                         jjtree.openNodeScope(jjtn003);
                                                         jjtn003.jjtSetFirstToken(getToken(1));
                                                       }
                                                       try {
/*@egen*/ "<="/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc003) {
                                                           jjtree.closeNodeScope(jjtn003, true);
                                                           jjtn003.jjtSetLastToken(getToken(0));
                                                         }
                                                       }
/*@egen*/                |/*@bgen(jjtree) #GreaterThanEqTo(true) */
                                                                             {
                                                                               ASTGreaterThanEqTo jjtn004 = new ASTGreaterThanEqTo(JJTGREATERTHANEQTO);
                                                                               boolean jjtc004 = true;
                                                                               jjtree.openNodeScope(jjtn004);
                                                                               jjtn004.jjtSetFirstToken(getToken(1));
                                                                             }
                                                                             try {
/*@egen*/ ">="/*@bgen(jjtree)*/
                                                                             } finally {
                                                                               if (jjtc004) {
                                                                                 jjtree.closeNodeScope(jjtn004, true);
                                                                                 jjtn004.jjtSetLastToken(getToken(0));
                                                                               }
                                                                             }
/*@egen*/                   )/*@bgen(jjtree) #ExprNode( 2) */
                                                                                                      {
                                                                                                        ASTExprNode jjtn005 = new ASTExprNode(JJTEXPRNODE);
                                                                                                        boolean jjtc005 = true;
                                                                                                        jjtree.openNodeScope(jjtn005);
                                                                                                        jjtn005.jjtSetFirstToken(getToken(1));
                                                                                                      }
                                                                                                      try {
/*@egen*/ RangeExpr()/*@bgen(jjtree)*/
                                                                                                      } catch (Throwable jjte005) {
                                                                                                        if (jjtc005) {
                                                                                                          jjtree.clearNodeScope(jjtn005);
                                                                                                          jjtc005 = false;
                                                                                                        } else {
                                                                                                          jjtree.popNode();
                                                                                                        }
                                                                                                        if (jjte005 instanceof RuntimeException) {
                                                                                                          throw (RuntimeException)jjte005;
                                                                                                        }
                                                                                                        if (jjte005 instanceof ParseException) {
                                                                                                          throw (ParseException)jjte005;
                                                                                                        }
                                                                                                        throw (Error)jjte005;
                                                                                                      } finally {
                                                                                                        if (jjtc005) {
                                                                                                          jjtree.closeNodeScope(jjtn005,  2);
                                                                                                          jjtn005.jjtSetLastToken(getToken(0));
                                                                                                        }
                                                                                                      }
/*@egen*/             )*
}

void RangeExpr()     :{}
{
    AdditiveExpr() ((/*@bgen(jjtree) #ClosedRange(true) */
                     {
                       ASTClosedRange jjtn001 = new ASTClosedRange(JJTCLOSEDRANGE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/".."/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/               |/*@bgen(jjtree) #HalfOpenRange(true) */
                                         {
                                           ASTHalfOpenRange jjtn002 = new ASTHalfOpenRange(JJTHALFOPENRANGE);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                           jjtn002.jjtSetFirstToken(getToken(1));
                                         }
                                         try {
/*@egen*/".<"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002, true);
                                             jjtn002.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/                 )/*@bgen(jjtree) #ExprNode( 2) */
                                                                {
                                                                  ASTExprNode jjtn003 = new ASTExprNode(JJTEXPRNODE);
                                                                  boolean jjtc003 = true;
                                                                  jjtree.openNodeScope(jjtn003);
                                                                  jjtn003.jjtSetFirstToken(getToken(1));
                                                                }
                                                                try {
/*@egen*/ AdditiveExpr()/*@bgen(jjtree)*/
                                                                } catch (Throwable jjte003) {
                                                                  if (jjtc003) {
                                                                    jjtree.clearNodeScope(jjtn003);
                                                                    jjtc003 = false;
                                                                  } else {
                                                                    jjtree.popNode();
                                                                  }
                                                                  if (jjte003 instanceof RuntimeException) {
                                                                    throw (RuntimeException)jjte003;
                                                                  }
                                                                  if (jjte003 instanceof ParseException) {
                                                                    throw (ParseException)jjte003;
                                                                  }
                                                                  throw (Error)jjte003;
                                                                } finally {
                                                                  if (jjtc003) {
                                                                    jjtree.closeNodeScope(jjtn003,  2);
                                                                    jjtn003.jjtSetLastToken(getToken(0));
                                                                  }
                                                                }
/*@egen*/             )*
}

void AdditiveExpr()     :{}
{
    MultiplicativeExpr() (LOOKAHEAD(("+"|"-"|"+?"|"-?") MultiplicativeExpr()) (/*@bgen(jjtree) #Add(true) */
                                                                               {
                                                                                 ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                                                                 boolean jjtc001 = true;
                                                                                 jjtree.openNodeScope(jjtn001);
                                                                                 jjtn001.jjtSetFirstToken(getToken(1));
                                                                               }
                                                                               try {
/*@egen*/"+"/*@bgen(jjtree)*/
                                                                               } finally {
                                                                                 if (jjtc001) {
                                                                                   jjtree.closeNodeScope(jjtn001, true);
                                                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                                                 }
                                                                               }
/*@egen*/       |/*@bgen(jjtree) #Sub(true) */
                                                                                          {
                                                                                            ASTSub jjtn002 = new ASTSub(JJTSUB);
                                                                                            boolean jjtc002 = true;
                                                                                            jjtree.openNodeScope(jjtn002);
                                                                                            jjtn002.jjtSetFirstToken(getToken(1));
                                                                                          }
                                                                                          try {
/*@egen*/"-"/*@bgen(jjtree)*/
                                                                                          } finally {
                                                                                            if (jjtc002) {
                                                                                              jjtree.closeNodeScope(jjtn002, true);
                                                                                              jjtn002.jjtSetLastToken(getToken(0));
                                                                                            }
                                                                                          }
/*@egen*/       |/*@bgen(jjtree) #SafeAdd(true) */
                                                                                                     {
                                                                                                       ASTSafeAdd jjtn003 = new ASTSafeAdd(JJTSAFEADD);
                                                                                                       boolean jjtc003 = true;
                                                                                                       jjtree.openNodeScope(jjtn003);
                                                                                                       jjtn003.jjtSetFirstToken(getToken(1));
                                                                                                     }
                                                                                                     try {
/*@egen*/"+?"/*@bgen(jjtree)*/
                                                                                                     } finally {
                                                                                                       if (jjtc003) {
                                                                                                         jjtree.closeNodeScope(jjtn003, true);
                                                                                                         jjtn003.jjtSetLastToken(getToken(0));
                                                                                                       }
                                                                                                     }
/*@egen*/           |/*@bgen(jjtree) #SafeSub(true) */
                                                                                                                     {
                                                                                                                       ASTSafeSub jjtn004 = new ASTSafeSub(JJTSAFESUB);
                                                                                                                       boolean jjtc004 = true;
                                                                                                                       jjtree.openNodeScope(jjtn004);
                                                                                                                       jjtn004.jjtSetFirstToken(getToken(1));
                                                                                                                     }
                                                                                                                     try {
/*@egen*/"-?"/*@bgen(jjtree)*/
                                                                                                                     } finally {
                                                                                                                       if (jjtc004) {
                                                                                                                         jjtree.closeNodeScope(jjtn004, true);
                                                                                                                         jjtn004.jjtSetLastToken(getToken(0));
                                                                                                                       }
                                                                                                                     }
/*@egen*/           )/*@bgen(jjtree) #ExprNode( 2) */
                                                                                                                                      {
                                                                                                                                        ASTExprNode jjtn005 = new ASTExprNode(JJTEXPRNODE);
                                                                                                                                        boolean jjtc005 = true;
                                                                                                                                        jjtree.openNodeScope(jjtn005);
                                                                                                                                        jjtn005.jjtSetFirstToken(getToken(1));
                                                                                                                                      }
                                                                                                                                      try {
/*@egen*/ MultiplicativeExpr()/*@bgen(jjtree)*/
                                                                                                                                      } catch (Throwable jjte005) {
                                                                                                                                        if (jjtc005) {
                                                                                                                                          jjtree.clearNodeScope(jjtn005);
                                                                                                                                          jjtc005 = false;
                                                                                                                                        } else {
                                                                                                                                          jjtree.popNode();
                                                                                                                                        }
                                                                                                                                        if (jjte005 instanceof RuntimeException) {
                                                                                                                                          throw (RuntimeException)jjte005;
                                                                                                                                        }
                                                                                                                                        if (jjte005 instanceof ParseException) {
                                                                                                                                          throw (ParseException)jjte005;
                                                                                                                                        }
                                                                                                                                        throw (Error)jjte005;
                                                                                                                                      } finally {
                                                                                                                                        if (jjtc005) {
                                                                                                                                          jjtree.closeNodeScope(jjtn005,  2);
                                                                                                                                          jjtn005.jjtSetLastToken(getToken(0));
                                                                                                                                        }
                                                                                                                                      }
/*@egen*/             )*
}

void MultiplicativeExpr()     :{}
{
    UnaryExpr() ((/*@bgen(jjtree) #Mul(true) */
                  {
                    ASTMul jjtn001 = new ASTMul(JJTMUL);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/"*"/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/       |/*@bgen(jjtree) #Div(true) */
                             {
                               ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtn002.jjtSetFirstToken(getToken(1));
                             }
                             try {
/*@egen*/"/"/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                                 jjtn002.jjtSetLastToken(getToken(0));
                               }
                             }
/*@egen*/       |/*@bgen(jjtree) #Rem(true) */
                                        {
                                          ASTRem jjtn003 = new ASTRem(JJTREM);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
                                          jjtn003.jjtSetFirstToken(getToken(1));
                                        }
                                        try {
/*@egen*/"%"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003, true);
                                            jjtn003.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/       |/*@bgen(jjtree) #SafeMul(true) */
                                                   {
                                                     ASTSafeMul jjtn004 = new ASTSafeMul(JJTSAFEMUL);
                                                     boolean jjtc004 = true;
                                                     jjtree.openNodeScope(jjtn004);
                                                     jjtn004.jjtSetFirstToken(getToken(1));
                                                   }
                                                   try {
/*@egen*/"*?"/*@bgen(jjtree)*/
                                                   } finally {
                                                     if (jjtc004) {
                                                       jjtree.closeNodeScope(jjtn004, true);
                                                       jjtn004.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/           |/*@bgen(jjtree) #SafeDiv(true) */
                                                                   {
                                                                     ASTSafeDiv jjtn005 = new ASTSafeDiv(JJTSAFEDIV);
                                                                     boolean jjtc005 = true;
                                                                     jjtree.openNodeScope(jjtn005);
                                                                     jjtn005.jjtSetFirstToken(getToken(1));
                                                                   }
                                                                   try {
/*@egen*/"/?"/*@bgen(jjtree)*/
                                                                   } finally {
                                                                     if (jjtc005) {
                                                                       jjtree.closeNodeScope(jjtn005, true);
                                                                       jjtn005.jjtSetLastToken(getToken(0));
                                                                     }
                                                                   }
/*@egen*/          |/*@bgen(jjtree) #SafeRem(true) */
                                                                                  {
                                                                                    ASTSafeRem jjtn006 = new ASTSafeRem(JJTSAFEREM);
                                                                                    boolean jjtc006 = true;
                                                                                    jjtree.openNodeScope(jjtn006);
                                                                                    jjtn006.jjtSetFirstToken(getToken(1));
                                                                                  }
                                                                                  try {
/*@egen*/"%?"/*@bgen(jjtree)*/
                                                                                  } finally {
                                                                                    if (jjtc006) {
                                                                                      jjtree.closeNodeScope(jjtn006, true);
                                                                                      jjtn006.jjtSetLastToken(getToken(0));
                                                                                    }
                                                                                  }
/*@egen*/          )/*@bgen(jjtree) #ExprNode( 2) */
                                                                                                  {
                                                                                                    ASTExprNode jjtn007 = new ASTExprNode(JJTEXPRNODE);
                                                                                                    boolean jjtc007 = true;
                                                                                                    jjtree.openNodeScope(jjtn007);
                                                                                                    jjtn007.jjtSetFirstToken(getToken(1));
                                                                                                  }
                                                                                                  try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
                                                                                                  } catch (Throwable jjte007) {
                                                                                                    if (jjtc007) {
                                                                                                      jjtree.clearNodeScope(jjtn007);
                                                                                                      jjtc007 = false;
                                                                                                    } else {
                                                                                                      jjtree.popNode();
                                                                                                    }
                                                                                                    if (jjte007 instanceof RuntimeException) {
                                                                                                      throw (RuntimeException)jjte007;
                                                                                                    }
                                                                                                    if (jjte007 instanceof ParseException) {
                                                                                                      throw (ParseException)jjte007;
                                                                                                    }
                                                                                                    throw (Error)jjte007;
                                                                                                  } finally {
                                                                                                    if (jjtc007) {
                                                                                                      jjtree.closeNodeScope(jjtn007,  2);
                                                                                                      jjtn007.jjtSetLastToken(getToken(0));
                                                                                                    }
                                                                                                  }
/*@egen*/             )*
}

void UnaryExpr()     :{}
{/*@bgen(jjtree) #ExprNode(> 1) */
   {
     ASTExprNode jjtn003 = new ASTExprNode(JJTEXPRNODE);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
     jjtn003.jjtSetFirstToken(getToken(1));
   }
   try {
/*@egen*/
   (/*@bgen(jjtree) #UAdd(true) */
    {
      ASTUAdd jjtn001 = new ASTUAdd(JJTUADD);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/"+"/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/         UnaryExpr() |/*@bgen(jjtree) #USub(true) */
    {
      ASTUSub jjtn002 = new ASTUSub(JJTUSUB);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    "-"/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/         UnaryExpr() |
    UnaryExprNotPlusMinus() )/*@bgen(jjtree)*/
   } catch (Throwable jjte003) {
     if (jjtc003) {
       jjtree.clearNodeScope(jjtn003);
       jjtc003 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte003 instanceof RuntimeException) {
       throw (RuntimeException)jjte003;
     }
     if (jjte003 instanceof ParseException) {
       throw (ParseException)jjte003;
     }
     throw (Error)jjte003;
   } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
       jjtn003.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/             
}

void UnaryExprNotPlusMinus()     :{}
{/*@bgen(jjtree) #ExprNode(> 1) */
   {
     ASTExprNode jjtn002 = new ASTExprNode(JJTEXPRNODE);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
     jjtn002.jjtSetFirstToken(getToken(1));
   }
   try {
/*@egen*/
   (/*@bgen(jjtree) #UBang(true) */
    {
      ASTUBang jjtn001 = new ASTUBang(JJTUBANG);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/"!"/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/          UnaryExpr() |
    LOOKAHEAD(CastExpr()) CastExpr() |
    LOOKAHEAD(CheckExpr()) CheckExpr() |
    PostFixExpr() )/*@bgen(jjtree)*/
   } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       throw (RuntimeException)jjte002;
     }
     if (jjte002 instanceof ParseException) {
       throw (ParseException)jjte002;
     }
     throw (Error)jjte002;
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
       jjtn002.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/              
}

void CastExpr()     :{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    ("(" Expression() ")" "~>" ClassType())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/              
}

void CheckExpr()     :{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    ("(" Expression() ")" "~>?" ClassType())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/              
}

void PostFixExpr()     :{}
{/*@bgen(jjtree) #ExprNode(> 1) */
   {
     ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtn001.jjtSetFirstToken(getToken(1));
   }
   try {
/*@egen*/
   (LOOKAHEAD(Primary()) Primary() |
    LOOKAHEAD(ExpressionName()) ExpressionName())/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
       jjtn001.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/              
}

void Primary()     :{}
{
    LOOKAHEAD(AmbiguousName() "::") MethodReference() |
    LOOKAHEAD(MethodInvocation()) MethodInvocation() |
    LOOKAHEAD(Literal()) Literal() |
    LOOKAHEAD(2) This() |
    Self() |
    LOOKAHEAD("(" Expression() ")") "(" Expression() ")" |
    LOOKAHEAD(ListDisplay()) ListDisplay() |
    LOOKAHEAD(DictionaryDisplay()) DictionaryDisplay() |
    LOOKAHEAD(TupleDisplay()) TupleDisplay() |
    LOOKAHEAD(AmbiguousName()) AmbiguousName()

}

void MethodReference():{/*@bgen(jjtree) MethodReference */
  ASTMethodReference jjtn000 = new ASTMethodReference(JJTMETHODREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MethodReference */
    try {
/*@egen*/
    AmbiguousName() "::" MethodName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ListDisplay():{/*@bgen(jjtree) ListDisplay */
  ASTListDisplay jjtn000 = new ASTListDisplay(JJTLISTDISPLAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ListDisplay */
    try {
/*@egen*/
    "[" (Expression() (Expression())*)? "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void DictionaryDisplay():{/*@bgen(jjtree) DictionaryDisplay */
  ASTDictionaryDisplay jjtn000 = new ASTDictionaryDisplay(JJTDICTIONARYDISPLAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DictionaryDisplay */
    try {
/*@egen*/
    "[" (DictionaryPair())+ "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void DictionaryPair():{/*@bgen(jjtree) DictionaryPair */
  ASTDictionaryPair jjtn000 = new ASTDictionaryPair(JJTDICTIONARYPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DictionaryPair */
    try {
/*@egen*/
    Identifier() "->" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void TupleDisplay():{/*@bgen(jjtree) TupleDisplay */
  ASTTupleDisplay jjtn000 = new ASTTupleDisplay(JJTTUPLEDISPLAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TupleDisplay */
    try {
/*@egen*/
    "(" (Expression() (Expression())*)? ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IfExpr():{/*@bgen(jjtree) IfExpr */
  ASTIfExpr jjtn000 = new ASTIfExpr(JJTIFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IfExpr */
    try {
/*@egen*/
    "if"/*@bgen(jjtree) #IfBodyStart(true) */
         {
           ASTIfBodyStart jjtn001 = new ASTIfBodyStart(JJTIFBODYSTART);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/               /*@bgen(jjtree) #IfBodyEnd(true) */
                                     {
                                       ASTIfBodyEnd jjtn002 = new ASTIfBodyEnd(JJTIFBODYEND);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
                                       jjtn002.jjtSetFirstToken(getToken(1));
                                     }
                                     try {
/*@egen*/ IfBody()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte002) {
                                       if (jjtc002) {
                                         jjtree.clearNodeScope(jjtn002);
                                         jjtc002 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte002 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte002;
                                       }
                                       if (jjte002 instanceof ParseException) {
                                         throw (ParseException)jjte002;
                                       }
                                       throw (Error)jjte002;
                                     } finally {
                                       if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002, true);
                                         jjtn002.jjtSetLastToken(getToken(0));
                                       }
                                     }
/*@egen*/              (LOOKAHEAD("else" IfBody())/*@bgen(jjtree) ElIfBodyStart */
                                                                                       {
                                                                                         ASTElIfBodyStart jjtn003 = new ASTElIfBodyStart(JJTELIFBODYSTART);
                                                                                         boolean jjtc003 = true;
                                                                                         jjtree.openNodeScope(jjtn003);
                                                                                         jjtn003.jjtSetFirstToken(getToken(1));
                                                                                       }
                                                                                       try {
/*@egen*/ "else"/*@bgen(jjtree)*/
                                                                                       } finally {
                                                                                         if (jjtc003) {
                                                                                           jjtree.closeNodeScope(jjtn003, true);
                                                                                           jjtn003.jjtSetLastToken(getToken(0));
                                                                                         }
                                                                                       }
/*@egen*/               /*@bgen(jjtree) #ElIfBodyEnd(true) */
                                                                                                             {
                                                                                                               ASTElIfBodyEnd jjtn004 = new ASTElIfBodyEnd(JJTELIFBODYEND);
                                                                                                               boolean jjtc004 = true;
                                                                                                               jjtree.openNodeScope(jjtn004);
                                                                                                               jjtn004.jjtSetFirstToken(getToken(1));
                                                                                                             }
                                                                                                             try {
/*@egen*/ IfBody()/*@bgen(jjtree)*/
                                                                                                             } catch (Throwable jjte004) {
                                                                                                               if (jjtc004) {
                                                                                                                 jjtree.clearNodeScope(jjtn004);
                                                                                                                 jjtc004 = false;
                                                                                                               } else {
                                                                                                                 jjtree.popNode();
                                                                                                               }
                                                                                                               if (jjte004 instanceof RuntimeException) {
                                                                                                                 throw (RuntimeException)jjte004;
                                                                                                               }
                                                                                                               if (jjte004 instanceof ParseException) {
                                                                                                                 throw (ParseException)jjte004;
                                                                                                               }
                                                                                                               throw (Error)jjte004;
                                                                                                             } finally {
                                                                                                               if (jjtc004) {
                                                                                                                 jjtree.closeNodeScope(jjtn004, true);
                                                                                                                 jjtn004.jjtSetLastToken(getToken(0));
                                                                                                               }
                                                                                                             }
/*@egen*/               )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IfBody():{/*@bgen(jjtree) IfBody */
  ASTIfBody jjtn000 = new ASTIfBody(JJTIFBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IfBody */
    try {
/*@egen*/
    BlockStmt() |
    "{" BlockStmts() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void SwitchExpr():{/*@bgen(jjtree) SwitchExpr */
  ASTSwitchExpr jjtn000 = new ASTSwitchExpr(JJTSWITCHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SwitchExpr */
    try {
/*@egen*/
    "switch" Expression() "{" (SwitchCase())+ "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void SwitchCase():{/*@bgen(jjtree) SwitchCase */
  ASTSwitchCase jjtn000 = new ASTSwitchCase(JJTSWITCHCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SwitchCase */
    try {
/*@egen*/
    "case" SwitchCond() "=>" CaseBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void SwitchCond():{/*@bgen(jjtree) SwitchCond */
  ASTSwitchCond jjtn000 = new ASTSwitchCond(JJTSWITCHCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SwitchCond */
    try {
/*@egen*/
    (LOOKAHEAD(IdentifierTypeBinding()) IdentifierTypeBinding() |
     LOOKAHEAD(Expression()) Expression()) (SwitchGuard())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void SwitchGuard():{/*@bgen(jjtree) SwitchGuard */
  ASTSwitchGuard jjtn000 = new ASTSwitchGuard(JJTSWITCHGUARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SwitchGuard */
    try {
/*@egen*/
    "@" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void CaseBody():{/*@bgen(jjtree) CaseBody */
  ASTCaseBody jjtn000 = new ASTCaseBody(JJTCASEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CaseBody */
    try {
/*@egen*/
    BlockStmt() |
    "{" BlockStmts() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void WhileLoopExpr():{/*@bgen(jjtree) WhileLoopExpr */
  ASTWhileLoopExpr jjtn000 = new ASTWhileLoopExpr(JJTWHILELOOPEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WhileLoopExpr */
    try {
/*@egen*/
    "while" Expression() WhileBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void WhileBody():{/*@bgen(jjtree) WhileBody */
  ASTWhileBody jjtn000 = new ASTWhileBody(JJTWHILEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WhileBody */
    try {
/*@egen*/
    BlockStmt() |
    "{" BlockStmts() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

//**********************************************************************
//MethodInvocation
//**********************************************************************
void MethodInvocation():{/*@bgen(jjtree) MethodInvocation */
  ASTMethodInvocation jjtn000 = new ASTMethodInvocation(JJTMETHODINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MethodInvocation */
    try {
/*@egen*/ 
    LOOKAHEAD(AmbiguousName() "{") MethodInvocationWithBlockArguments() |
    LOOKAHEAD(2) MethodName() ParenArguments() (DotMethodNameArguments())* | 
    LOOKAHEAD(2) ExpressionName() ParenArguments() (DotMethodNameArguments())*|
    //Primary MethodInvocation
    LOOKAHEAD(FunctionLiteral() ParenArguments()) FunctionLiteral() ParenArguments() (DotMethodNameArguments())* |
    LOOKAHEAD(2) Literal() (DotMethodNameArguments())+ |
    This() (DotMethodNameArguments())+ |
    Self() (DotMethodNameArguments())+ |
    LOOKAHEAD("(" Expression() ")"  (DotMethodNameArguments())+) "(" Expression() ")"  (DotMethodNameArguments())+ |
    LOOKAHEAD(ListDisplay()) ListDisplay() (DotMethodNameArguments())+ |
    LOOKAHEAD(DictionaryDisplay()) DictionaryDisplay() (DotMethodNameArguments())+ |
    TupleDisplay() (DotMethodNameArguments())+  |
    LOOKAHEAD(2) AmbiguousName() (DotMethodNameArguments())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void ParenArguments()     :{}
{
    "(" Arguments() ")"
}

void DotMethodNameArguments()      :{}
{
    LOOKAHEAD("." AmbiguousName() "{") "." MethodInvocationWithBlockArguments()|
    LOOKAHEAD("." MethodName() "(")"." MethodName() ParenArguments()|
    LOOKAHEAD("." Identifier())"." Identifier()
}

void MethodName():{/*@bgen(jjtree) MethodName */
  ASTMethodName jjtn000 = new ASTMethodName(JJTMETHODNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MethodName */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ExpressionName():{/*@bgen(jjtree) ExpressionName */
  ASTExpressionName jjtn000 = new ASTExpressionName(JJTEXPRESSIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExpressionName */
    try {
/*@egen*/
    AmbiguousName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Arguments():{/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Arguments */
    try {
/*@egen*/
    (Argument() ((",")? Argument())*)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Argument():{/*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FunctionLiteral():{/*@bgen(jjtree) FunctionLiteral */
  ASTFunctionLiteral jjtn000 = new ASTFunctionLiteral(JJTFUNCTIONLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FunctionLiteral */
    try {
/*@egen*/
    FuncLiteralArg() "->" FuncLiteralBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FuncLiteralArg():{/*@bgen(jjtree) FuncLiteralArg */
  ASTFuncLiteralArg jjtn000 = new ASTFuncLiteralArg(JJTFUNCLITERALARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FuncLiteralArg */
    try {
/*@egen*/
    LOOKAHEAD("(" (Identifier())* ")") "(" (Identifier())* ")"  |
    LOOKAHEAD("(" IdentifierTypeBindings() ")") "(" IdentifierTypeBindings() ")" |
    LOOKAHEAD(2) IdentifierTypeBinding() |
    LOOKAHEAD(2) Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void FuncLiteralBody():{/*@bgen(jjtree) FuncLiteralBody */
  ASTFuncLiteralBody jjtn000 = new ASTFuncLiteralBody(JJTFUNCLITERALBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FuncLiteralBody */
    try {
/*@egen*/
    "{" BlockStmts() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IdentifierTypeBindings():{/*@bgen(jjtree) IdentifierTypeBindings */
  ASTIdentifierTypeBindings jjtn000 = new ASTIdentifierTypeBindings(JJTIDENTIFIERTYPEBINDINGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IdentifierTypeBindings */
    try {
/*@egen*/
    (IdentifierTypeBinding() ("," IdentifierTypeBinding())*)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IdentifierTypeBinding():{/*@bgen(jjtree) IdentifierTypeBinding */
  ASTIdentifierTypeBinding jjtn000 = new ASTIdentifierTypeBinding(JJTIDENTIFIERTYPEBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IdentifierTypeBinding */
    try {
/*@egen*/
    Identifier() Type()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AmbiguousName():{/*@bgen(jjtree) AmbiguousName */
  ASTAmbiguousName jjtn000 = new ASTAmbiguousName(JJTAMBIGUOUSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AmbiguousName */
    try {
/*@egen*/
    Identifier() (LOOKAHEAD("." Identifier()) "." Identifier())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void MethodInvocationWithBlockArguments()     :{}
{
    AmbiguousName() "{" BlockStmts() "}" (LOOKAHEAD((AmbiguousName())? "{") (AmbiguousName())? "{" BlockStmts() "}")*
}

//8_literals.jjt
//**********************************************************************
//Literal
//**********************************************************************

void Literal()     :{}
{
    FunctionLiteral() |
    IntLiteral() |
    FloatLiteral() | 
    BoolLiteral() |
    CharLiteral() | 
    StringLiteral() | 
    UndefinedLiteral() |
    NullLiteral()
}

void IntLiteral()     :{}
{
    DecimalIntLiteral() |
    HexIntLiteral() |
    OctIntLiteral() |
    BinaryIntLiteral()
}

void DecimalIntLiteral():{/*@bgen(jjtree) DecimalIntLiteral */
                          ASTDecimalIntLiteral jjtn000 = new ASTDecimalIntLiteral(JJTDECIMALINTLITERAL);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) DecimalIntLiteral */
    try {
/*@egen*/
    t = <DecimalNumeral>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
                         }
/*@egen*/ {
        t.image = t.image.replaceAll("_","");
        jjtn000.jjtSetValue(Integer.valueOf(t.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void HexIntLiteral():{/*@bgen(jjtree) HexIntLiteral */
                      ASTHexIntLiteral jjtn000 = new ASTHexIntLiteral(JJTHEXINTLITERAL);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
                      jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) HexIntLiteral */
    try {
/*@egen*/
    t = <HexNumeral>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ {
        t.image = t.image.replaceAll("_","");
        jjtn000.jjtSetValue(Integer.valueOf(t.image.substring(2,t.image.length()),16));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void OctIntLiteral():{/*@bgen(jjtree) OctIntLiteral */
                      ASTOctIntLiteral jjtn000 = new ASTOctIntLiteral(JJTOCTINTLITERAL);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
                      jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) OctIntLiteral */
    try {
/*@egen*/
    t = <OctalIntLiteral>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.jjtSetLastToken(getToken(0));
                          }
/*@egen*/ {
        t.image = t.image.replaceAll("_","");
        jjtn000.jjtSetValue(Integer.valueOf(t.image.substring(2,t.image.length()),8));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void BinaryIntLiteral():{/*@bgen(jjtree) BinaryIntLiteral */
                         ASTBinaryIntLiteral jjtn000 = new ASTBinaryIntLiteral(JJTBINARYINTLITERAL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) BinaryIntLiteral */
    try {
/*@egen*/
    t = <BinaryNumeral>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ {
        t.image = t.image.replaceAll("_","");
        jjtn000.jjtSetValue(Integer.valueOf(t.image.substring(2,t.image.length()),2));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FloatLiteral():{/*@bgen(jjtree) FloatLiteral */
  ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FloatLiteral */
    try {
/*@egen*/
    DecimalFPLiteral() |
    HexadecimalFPLiteral()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void DecimalFPLiteral():{/*@bgen(jjtree) DecimalFPLiteral */
                         ASTDecimalFPLiteral jjtn000 = new ASTDecimalFPLiteral(JJTDECIMALFPLITERAL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) DecimalFPLiteral */
    try {
/*@egen*/
    t = <DecimalFPLiteral>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {
        t.image = t.image.replaceAll("_","");
        jjtn000.jjtSetValue(Double.parseDouble(t.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void HexadecimalFPLiteral():{/*@bgen(jjtree) HexadecimalFPLiteral */
                             ASTHexadecimalFPLiteral jjtn000 = new ASTHexadecimalFPLiteral(JJTHEXADECIMALFPLITERAL);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) HexadecimalFPLiteral */
    try {
/*@egen*/
    t = <HexadecimalFPLiteral>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
                               }
/*@egen*/ {
        t.image = t.image.replaceAll("_","");
        jjtn000.jjtSetValue(Double.parseDouble(t.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void BoolLiteral():{/*@bgen(jjtree) BoolLiteral */
                    ASTBoolLiteral jjtn000 = new ASTBoolLiteral(JJTBOOLLITERAL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) BoolLiteral */
    try {
/*@egen*/
    t = <BoolLiteral>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(Boolean.parseBoolean(t.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void CharLiteral():{/*@bgen(jjtree) CharLiteral */
                    ASTCharLiteral jjtn000 = new ASTCharLiteral(JJTCHARLITERAL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) CharLiteral */
    try {
/*@egen*/
    t = <CharLiteral>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(Character.valueOf(t.image.charAt(0)));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void StringLiteral():{/*@bgen(jjtree) StringLiteral */
                      ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
                      jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    t = <StringLiteral>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void UndefinedLiteral():{/*@bgen(jjtree) UndefinedLiteral */
                         ASTUndefinedLiteral jjtn000 = new ASTUndefinedLiteral(JJTUNDEFINEDLITERAL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) UndefinedLiteral */
    try {
/*@egen*/
    t = <UndefinedLiteral>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void NullLiteral():{/*@bgen(jjtree) NullLiteral */
                    ASTNullLiteral jjtn000 = new ASTNullLiteral(JJTNULLLITERAL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) NullLiteral */
    try {
/*@egen*/
    t = <NullLiteral>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

TOKEN:
{

    < UndefinedLiteral : "undefined" > |
    < NullLiteral : "null" > |
    < BoolLiteral : "true" | "false" > |
    
    //IntLiteral
    < DecimalNumeral : <Zero> | <NonZero> ("_" | <Digit> )* > |
    < Digit : <Zero> | <NonZero> > |
    < #Zero : "0" > |
    < #NonZero : ["1"-"9"] > |
    < HexNumeral : "0" ["x","X"] ("_" | <HexDigit>)+ > |
    < #HexDigit : ["0"-"9" , "A"-"F" , "a"-"f"] > |
    < OctalIntLiteral : "0" ("_" | <OctalDigit>)+ > |
    < #OctalDigit : ["0"-"7"] > |
    < BinaryNumeral : "0" ["b","B"] ("_" | <BinaryDigit>)* > |
    < #BinaryDigit : "0" | "1" > |
    < DecimalFPLiteral : (<Digit>)+ "." (<Digit>)+ (<Exp> (["+" , "-"])? (<Digit>)+)? > |
    < #Exp : "e" | "E" > |
    
    //FloatLiteral
    < HexadecimalFPLiteral : <HexSignificand> <BinaryExp>> |
    < #HexSignificand : <HexNumeral> "." (<HexDigit>)+ > |
    < #BinaryExp : ["p","P"] (["+","-"])? (<Digit>)+ > |
    
    //Charliteral
    < CharLiteral : "'" <StringCharacter> "'" > |
    
    //StringLiteral
    < StringLiteral : "\"" (<StringCharacter>)* "\"" > |
    < #StringCharacter : (~["\"","\\","\n","\r"]) 
                       | <StringEscapeSeq> 
                       | <UnicodeEscape> > |
    < StringEscapeSeq : "\\" ["b","t","n","f","r","\"","\\","\'"] > |
    < UnicodeEscape : "\\u" <HexDigit> <HexDigit> <HexDigit> <HexDigit> >  |

    //RawStringLiteral
    < RawStringLiteral : "\"\"\"" (~[])* "\"\"\"" >
}
//10_modifiers.jjt
void PublicModifier():{/*@bgen(jjtree) PublicModifier */
                       ASTPublicModifier jjtn000 = new ASTPublicModifier(JJTPUBLICMODIFIER);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
                       jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) PublicModifier */
    try {
/*@egen*/
    t = "public"/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ProtectedModifier():{/*@bgen(jjtree) ProtectedModifier */
                          ASTProtectedModifier jjtn000 = new ASTProtectedModifier(JJTPROTECTEDMODIFIER);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) ProtectedModifier */
    try {
/*@egen*/
    t = "protected"/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PrivateModifier():{/*@bgen(jjtree) PrivateModifier */
                        ASTPrivateModifier jjtn000 = new ASTPrivateModifier(JJTPRIVATEMODIFIER);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
                        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) PrivateModifier */
    try {
/*@egen*/
    t = "private"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AbstractModifier():{/*@bgen(jjtree) AbstractModifier */
                         ASTAbstractModifier jjtn000 = new ASTAbstractModifier(JJTABSTRACTMODIFIER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) AbstractModifier */
    try {
/*@egen*/
    t = "abstract"/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void StaticModifier():{/*@bgen(jjtree) StaticModifier */
                       ASTStaticModifier jjtn000 = new ASTStaticModifier(JJTSTATICMODIFIER);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
                       jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) StaticModifier */
    try {
/*@egen*/
    t = "static"/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FinalModifier():{/*@bgen(jjtree) FinalModifier */
                      ASTFinalModifier jjtn000 = new ASTFinalModifier(JJTFINALMODIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
                      jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) FinalModifier */
    try {
/*@egen*/
    t = "final"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void SealedModifier():{/*@bgen(jjtree) SealedModifier */
                       ASTSealedModifier jjtn000 = new ASTSealedModifier(JJTSEALEDMODIFIER);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
                       jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) SealedModifier */
    try {
/*@egen*/
    t = "sealed"/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void VarModifier():{/*@bgen(jjtree) VarModifier */
                    ASTVarModifier jjtn000 = new ASTVarModifier(JJTVARMODIFIER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) VarModifier */
    try {
/*@egen*/
    t = "var"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void OverrideModifier():{/*@bgen(jjtree) OverrideModifier */
                         ASTOverrideModifier jjtn000 = new ASTOverrideModifier(JJTOVERRIDEMODIFIER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) OverrideModifier */
    try {
/*@egen*/
    t = "override"/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AutoModifier():{/*@bgen(jjtree) AutoModifier */
                     ASTAutoModifier jjtn000 = new ASTAutoModifier(JJTAUTOMODIFIER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) AutoModifier */
    try {
/*@egen*/
    t = "auto"/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
//9_tokens.jjt
//**********************************************************************
//Identifiers
//**********************************************************************
void Identifier():{/*@bgen(jjtree) Identifier */
                   ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t = <Identifier>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

//**********************************************************************
//Other Tokens
//**********************************************************************
void This():{/*@bgen(jjtree) This */
             ASTThis jjtn000 = new ASTThis(JJTTHIS);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) This */
    try {
/*@egen*/
    t = "this"/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Self():{/*@bgen(jjtree) Self */
             ASTSelf jjtn000 = new ASTSelf(JJTSELF);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) Self */
    try {
/*@egen*/
    t = "self"/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

SKIP:
{
    < "//" (~["\r","\n"])* > |
    "/*" {
        commentNestLevel++;
        SwitchTo(InComment);
    } 
}

SPECIAL_TOKEN:
{
    " " |
    "\t" |
    "\r" |
    "\n" |
    "\r\n"
}

<InComment> SKIP:
{
    "/*" {
        commentNestLevel++;
    } |
    < ~[]> |
    <EndOfLine : "\n" | "\r" | "\r\n" > |
    "*/" { 
        commentNestLevel--;
        if(commentNestLevel == 0){
            SwitchTo(DEFAULT);
        }
    }
}

TOKEN:
{
    < Identifier : <IDHead> (<IDBody>)* > |
    < #IDHead : [
         "$",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06fa"-"\u06fc",
         "\u0710",
         "\u0712"-"\u072c",
         "\u0780"-"\u07a5",
         "\u0905"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17b3",
         "\u17db",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6" 
         ] > | 
    < #IDBody : [
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ] >
}