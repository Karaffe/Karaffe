/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. karaffe.jj */
/*@egen*///Karaffe Javacc file

options {
    STATIC = false;
    IGNORE_CASE = false;
    UNICODE_INPUT = true;
                 
                   
                                                                                 
}

PARSER_BEGIN(KaraffeParser)
package net.nokok.karaffe.parser;

import net.nokok.karaffe.parser.util.*;
import java.util.*;

public class KaraffeParser/*@bgen(jjtree)*/implements KaraffeParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTKaraffeParserState jjtree = new JJTKaraffeParserState();

/*@egen*/

    public KaraffeParser(String sourceCode){
        this(new java.io.StringReader(sourceCode));
    }

    public int getCurrentTokenBeginColumn(){
        return jj_input_stream.getBeginColumn();
    }

    public int getCurrentTokenEndColumn(){
        return jj_input_stream.getEndColumn();
    }

    public int getCurrentLine(){
        return jj_input_stream.getEndLine();
    }
}


PARSER_END(KaraffeParser)

TOKEN_MGR_DECLS:
{
    public static int commentNestLevel = 0;
}

//\u6587\u6cd5\u5b9a\u7fa9
ASTCompileUnit CompileUnit():
{/*@bgen(jjtree) CompileUnit */
  ASTCompileUnit jjtn000 = new ASTCompileUnit(JJTCOMPILEUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompileUnit */
    try {
/*@egen*/
    (Statement() | NewLineToken())* <EOF>/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement()      :
{}
{
    Declaration()
    | ModuleStatement()
    | EndOfModule()
}

void Declaration()      :
{}
{
    VariableDeclaration()
}

/**
    VariableDeclaration

    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50        = \u5f0f
    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50 : \u578b\u540d = \u5f0f
 */
void VariableDeclaration():
{/*@bgen(jjtree) VariableDeclaration */
    ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token id;
    Token type = null;
}
{/*@bgen(jjtree) VariableDeclaration */
    try {
/*@egen*/
    (Modifier())* id = <Identifier> (<Colon> type = <Identifier>) <EqualSign> Expression()/*@bgen(jjtree)*/
                                                                                           {
                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                             jjtc000 = false;
                                                                                           }
/*@egen*/ {
        jjtn000.jjtSetValue(new VariableDeclarationData(id,type));
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ModuleStatement():
{/*@bgen(jjtree) ModuleStatement */
    ASTModuleStatement jjtn000 = new ASTModuleStatement(JJTMODULESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) ModuleStatement */
    try {
/*@egen*/
    <Module> t = <Identifier>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EndOfModule():
{/*@bgen(jjtree) EndOfModule */
  ASTEndOfModule jjtn000 = new ASTEndOfModule(JJTENDOFMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EndOfModule */
    try {
/*@egen*/
    <EndModule>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
\u30b3\u30e1\u30f3\u30c8\u306e\u51e6\u7406
*/
SKIP:
{
    " "
    | "\t"
    | < "//" (~["\n"])* <NewLine> >
    | "/*" {
        commentNestLevel++;
        SwitchTo(InComment);
    }
}

<InComment> SKIP:
{
    "/*" {
        commentNestLevel++;
    }
    | < ~[]>
    | <EndOfLine : <NewLine>> 
    | "*/" {
        commentNestLevel--;
        if(commentNestLevel == 0){
            SwitchTo(DEFAULT);
        }
    }
}

/**
    Reserved keywords 
*/
TOKEN:
{
      < Check : "check" >
    | < EndModule : "endmodule" >
    | < Import : "import" >
    | < Interface : "interface" >
    | < Module : "module" >
    | < Switch : "switch" >
    | < To : "to" >
    | < Type : "type" >
    | < Undefined : "undefined" >
}

/**
    Literals
*/
TOKEN:
{
      < BoolLiteral : "true"
                    | "false" >
    | < IntLiteral : <Zero> | (<Minus>)? <NonZero> (<Zero> | <NonZero>)* >
    | < Hexadecimal : (<Minus>)? "0" ["x","X"] (<HexDigit>)+ >
    | < #HexDigit : ["0"-"9" , "A"-"F" , "a"-"f"] > 
    | < FloatLiteral : (<Minus>)? (<Zero> | <IntLiteral>) <Dot> (<Zero> | <NonZero>)+ (<Exp> <IntLiteral> )? >
    | < #Zero : "0" >
    | < #NonZero : ["1"-"9"] >
    | < #Exp : "e" | "E" >
    | < StringLiteral : "\"" (<StringCharacter>)* "\"" >
    | < #StringCharacter : (~["\"","\\","\n","\r"]) 
                         | <StringEscapeSeq> 
                         | <UnicodeEscape> >
    | < StringEscapeSeq : "\\" ["b","t","n","f","r","\"","\\","\'"] >
    | < UnicodeEscape : "\\u" <HexDigit> <HexDigit> <HexDigit> <HexDigit> >
}

void Literal()      :
{
    Token t;
}
{
    BoolLiteral()
    | IntLiteral()
    | FloatLiteral()
    | StringLiteral()
    | <Undefined> 
}

void BoolLiteral():
{/*@bgen(jjtree) BoolLiteral */
    ASTBoolLiteral jjtn000 = new ASTBoolLiteral(JJTBOOLLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) BoolLiteral */
    try {
/*@egen*/
    t = <BoolLiteral>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void IntLiteral():
{/*@bgen(jjtree) IntLiteral */
    ASTIntLiteral jjtn000 = new ASTIntLiteral(JJTINTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) IntLiteral */
    try {
/*@egen*/
    t = <IntLiteral>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FloatLiteral():
{/*@bgen(jjtree) FloatLiteral */
    ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) FloatLiteral */
    try {
/*@egen*/
    t = <FloatLiteral>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {
        jjtn000.jjtSetValue(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StringLiteral():
{/*@bgen(jjtree) StringLiteral */
    ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    t = <StringLiteral>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UndefinedLiteral():
{/*@bgen(jjtree) UndefinedLiteral */
  ASTUndefinedLiteral jjtn000 = new ASTUndefinedLiteral(JJTUNDEFINEDLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UndefinedLiteral */
    try {
/*@egen*/
    <Undefined>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
        jjtn000.jjtSetValue(new UndefinedLiteral());
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    Identifiers
*/
TOKEN:
{
      < Identifier : <IdentifierBeginOrEnd> ((<IdentifierCharacter>)* <IdentifierBeginOrEnd>)? >
    | < #IdentifierBeginOrEnd :      [
                                    "A"-"Z", //A-Z
                                    "a"-"z", //a-z
                                    "_",          //_
                                    "\u3040"-"\u309f", //\u3072\u3089\u304c\u306a Hiragana
                                    "\u30a0"-"\u30ff", //\u30ab\u30bf\u30ab\u30ca Katakana
                                    "\u4e00"-"\u9fff"  //\u6f22\u5b57     CJK Unified Ideographs
                               ]  >
    | < #IdentifierCharacter :      "."          //.
                                    | <IdentifierBeginOrEnd>
                                  >
    | < TypeParameter : ["A"-"Z"] > //A-Z
}

/**
    Delimiters
*/
TOKEN:
{
      < LeftBracket : "[" >
    | < RightBracket : "]" >
    | < LeftBrace : "{" >
    | < RightBrace : "}" >
    | < LeftParen : "(" >
    | < RightParen : ")" >
    | < Colon : ":" >
    | < Dot : "." >
}

/**
    Operators
 */
TOKEN:
{

    < EqualSign : "=" >
    | < Lt : "<" >
    | < LtE : "<=" >
    | < Gt : ">" >
    | < GtE : ">=" >
    | < Plus : "+" >
    | < Minus : "-" >
    | < Star : "*" >
    | < Slash : "/" >
    | < SafeDiv : "/?" >
    | < Percent : "%" >
    | < SafeRem : "%?" >
    | < Tilde : "~" >
    | < Bang : "!" >
    | < And : "&" > 
    | < Or : "|" >
    | < Hat : "^" >
    | < Question : "?" >
    | < ReverseArrow : "<-" >
    | < ReverseArrowChar : "\u2190" >
    | < SingleArrowChar : "\u2192" >
    | < SingleArrow : "->" >
    | < DoubleArrow : "=>" >
    | < EqualTo : "==" >
    | < NotEqualTo : "!=" >
    | < NonComparable : "!<>=" >
    | < Comparable : "<>=" >
    | < IsUndefined : "??" >

}

/**
    Other tokens
*/
TOKEN:
{
      < NewLine : "\r"
                | "\n" 
                | "\r\n" >
      | < Atmark : "@" >
}

void NewLineToken():
{/*@bgen(jjtree) NewLineToken */
  ASTNewLineToken jjtn000 = new ASTNewLineToken(JJTNEWLINETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NewLineToken */
    try {
/*@egen*/
    <NewLine>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    Expression\u306e\u8a55\u4fa1\u512a\u5148\u5ea6
    \u4f4e\u3044\u9806\u304b\u3089
    AssignExpr =
    \u2193
    OrOperatorExpr |
    \u2193
    AndOperatorExpr &
    \u2193
    EqualityOperatorExpr == !=
    \u2193
    ComparisonOperatorExpr <= >= < >
    \u2193
    AdditiveOperatorExpr + -
    \u2193
    MultiplyOperatorExpr * / /? % %? 
    \u2193
    UnaryOperatorExpr - ~ !
    \u2193
    FunctionApply
 */
void Expression()      :
{}
{
    AssignExpr()
}

/**
    =
 */
void AssignExpr()      :
{}
{/*@bgen(jjtree) #AssignExpr(> 1) */
    {
      ASTAssignExpr jjtn001 = new ASTAssignExpr(JJTASSIGNEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        OrOperatorExpr() 
        (LOOKAHEAD(2) "=" OrOperatorExpr())*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/                
}

/**
    |
 */
void OrOperatorExpr()      :
{}
{/*@bgen(jjtree) #OrOpExpr(> 1) */
    {
      ASTOrOpExpr jjtn001 = new ASTOrOpExpr(JJTOROPEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        AndOperatorExpr() 
        (LOOKAHEAD(2) "|" AndOperatorExpr())*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

/**
    &   
 */
void AndOperatorExpr()      :
{}
{/*@bgen(jjtree) #AndOpExpr(> 1) */
    {
      ASTAndOpExpr jjtn001 = new ASTAndOpExpr(JJTANDOPEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        ComparisonOperatorExpr()
        (LOOKAHEAD(2) "&" ComparisonOperatorExpr())* 
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/               
}

/**
    ==, !=, >=, <= !<>= <>=
 */
void ComparisonOperatorExpr()      :
{}
{/*@bgen(jjtree) #ComparisonOpExpr(> 1) */
    {
      ASTComparisonOpExpr jjtn001 = new ASTComparisonOpExpr(JJTCOMPARISONOPEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        AdditiveOperatorExpr() 
        (LOOKAHEAD(2) ("==" | "!=" | ">=" | "<=" | "!<>=" | "<>=") AdditiveOperatorExpr())*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/                      
}

/**
    +, -
 */
void AdditiveOperatorExpr()      :
{}
{/*@bgen(jjtree) #AdditiveOpExpr(> 1) */
    {
      ASTAdditiveOpExpr jjtn001 = new ASTAdditiveOpExpr(JJTADDITIVEOPEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        MultiplyOperatorExpr() 
        (LOOKAHEAD(2) ("+" | "-" )
            MultiplyOperatorExpr())*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/                    
}

/**
    *, /, %, /?, %?   
 */
void MultiplyOperatorExpr()      :
{}
{/*@bgen(jjtree) #MultiplyOpExpr(> 1) */
    {
      ASTMultiplyOpExpr jjtn001 = new ASTMultiplyOpExpr(JJTMULTIPLYOPEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        UnaryOperatorExpr() 
        (LOOKAHEAD(2) ("*" | "/" | "%" | "/?" | "%?") UnaryOperatorExpr())*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/                    
}

/**
    -, ~, ! 
 */
void UnaryOperatorExpr()      :
{}
{/*@bgen(jjtree) #UnaryOpExpr(> 1) */
    {
      ASTUnaryOpExpr jjtn001 = new ASTUnaryOpExpr(JJTUNARYOPEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        "!" UnaryOperatorExpr()
        |"-" UnaryOperatorExpr()
        | "(" AssignExpr() ")"
        | PrimaryExpression()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/                 
}

void PrimaryExpression()      :
{}
{/*@bgen(jjtree) #PrimaryExpr(> 1) */
    {
      ASTPrimaryExpr jjtn001 = new ASTPrimaryExpr(JJTPRIMARYEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        ExplicitModuleElementAccess() (LOOKAHEAD(2) Expression())*
        | Literal()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/                
}

/**
    ModuleName::ElementName
 */
void ExplicitModuleElementAccess():
{/*@bgen(jjtree) ExplicitModuleElementAccess */
    ASTExplicitModuleElementAccess jjtn000 = new ASTExplicitModuleElementAccess(JJTEXPLICITMODULEELEMENTACCESS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token moduleName;
    Token elementName;
    Token[] ids = new Token[2];
}
{/*@bgen(jjtree) ExplicitModuleElementAccess */
    try {
/*@egen*/
    moduleName = <Identifier> {ids[0] = moduleName;} "::" elementName = <Identifier>/*@bgen(jjtree)*/
                                                                                     {
                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                       jjtc000 = false;
                                                                                     }
/*@egen*/ {ids[1] = elementName;jjtn000.jjtSetValue(ids);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

/**
    Modifier 

    - : \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8
    ! : \u5909\u6570
    \u6307\u5b9a\u306a\u3057 : \u516c\u958b\u5b9a\u6570
 */
void Modifier():
{/*@bgen(jjtree) Modifier */
  ASTModifier jjtn000 = new ASTModifier(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
    
}
{/*@bgen(jjtree) Modifier */
    try {
/*@egen*/
    "-"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ {
        jjtn000.jjtSetValue(Modifier.PRIVATE);
    }
    | "!"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {
        jjtn000.jjtSetValue(Modifier.VARIABLE);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}