/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. karaffe.jj */
/*@egen*/options {
    STATIC = false;
    IGNORE_CASE = false;
    UNICODE_INPUT = true;
                 
                   
                                                                                 
}

PARSER_BEGIN(KaraffeParser)
package net.nokok.karaffe.parser;

import net.nokok.karaffe.parser.util.*;
import java.util.*;

public class KaraffeParser/*@bgen(jjtree)*/implements KaraffeParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTKaraffeParserState jjtree = new JJTKaraffeParserState();

/*@egen*/

    public KaraffeParser(String sourceCode){
        this(new java.io.StringReader(sourceCode));
    }

    public int getCurrentTokenBeginColumn(){
        return jj_input_stream.getBeginColumn();
    }

    public int getCurrentTokenEndColumn(){
        return jj_input_stream.getEndColumn();
    }

    public int getCurrentLine(){
        return jj_input_stream.getEndLine();
    }
}


PARSER_END(KaraffeParser)

TOKEN_MGR_DECLS:
{
    public static int commentNestLevel = 0;
}

void TypeDeclaration():
{/*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDeclaration */
    try {
/*@egen*/
    (Documentation())? <Type> TypeElement() (<Colon> SuperType())? (<ReverseArrow> Interfaces())?
    (LOOKAHEAD(TypeDeclBody()) TypeDeclBody())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeDeclBody():
{/*@bgen(jjtree) TypeDeclBody */
  ASTTypeDeclBody jjtn000 = new ASTTypeDeclBody(JJTTYPEDECLBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDeclBody */
    try {
/*@egen*/
    TypeDeclBody1() (LOOKAHEAD( TypeDeclBody1())  TypeDeclBody1())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeDeclBody1()      :
{}
{
    (LOOKAHEAD( VariableOrFunctionDeclaration()) VariableOrFunctionDeclaration() | 
    LOOKAHEAD(Assignment()) Assignment() |
    LOOKAHEAD(MethodInvocation()) MethodInvocation() )
}

void AlgebraicDataTypeDecl():
{/*@bgen(jjtree) AlgebraicDataTypeDecl */
  ASTAlgebraicDataTypeDecl jjtn000 = new ASTAlgebraicDataTypeDecl(JJTALGEBRAICDATATYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AlgebraicDataTypeDecl */
    try {
/*@egen*/
    (Documentation())? <Case> <Type> TypeElement() <EqualSign> AlgebraicDataTypeDeclBody() (<Or> AlgebraicDataTypeDeclBody())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AlgebraicDataTypeDeclBody():
{/*@bgen(jjtree) AlgebraicDataTypeDeclBody */
  ASTAlgebraicDataTypeDeclBody jjtn000 = new ASTAlgebraicDataTypeDeclBody(JJTALGEBRAICDATATYPEDECLBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AlgebraicDataTypeDeclBody */
    try {
/*@egen*/
    Constructor() (LOOKAHEAD(ExistingTypeOrTParameter()) ExistingTypeOrTParameter())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Constructor():
{/*@bgen(jjtree) Constructor */
  ASTConstructor jjtn000 = new ASTConstructor(JJTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Constructor */
    try {
/*@egen*/
    TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExistingTypeOrTParameter():
{/*@bgen(jjtree) ExistingTypeOrTParameter */
  ASTExistingTypeOrTParameter jjtn000 = new ASTExistingTypeOrTParameter(JJTEXISTINGTYPEORTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExistingTypeOrTParameter */
    try {
/*@egen*/
    LOOKAHEAD(2) TypeElement() |
    LOOKAHEAD(2) TypeElementBinding() | 
    LOOKAHEAD(2) VarIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void InterfaceDeclaration():
{/*@bgen(jjtree) InterfaceDeclaration */
  ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceDeclaration */
    try {
/*@egen*/
    (Documentation())? <Interface> TypeElement() (<ReverseArrow> Interfaces())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void TypeAliasDeclaration():
{/*@bgen(jjtree) TypeAliasDeclaration */
  ASTTypeAliasDeclaration jjtn000 = new ASTTypeAliasDeclaration(JJTTYPEALIASDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeAliasDeclaration */
    try {
/*@egen*/
    (Documentation())? <TypeAlias> TypeElement() <Colon> TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void FuncAliasDeclaration():
{/*@bgen(jjtree) FuncAliasDeclaration */
  ASTFuncAliasDeclaration jjtn000 = new ASTFuncAliasDeclaration(JJTFUNCALIASDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncAliasDeclaration */
    try {
/*@egen*/
    (Documentation())? <FuncAlias> FuncAliasAfter() <Colon> FuncAliasBefore()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FuncAliasAfter():
{/*@bgen(jjtree) FuncAliasAfter */
  ASTFuncAliasAfter jjtn000 = new ASTFuncAliasAfter(JJTFUNCALIASAFTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncAliasAfter */
    try {
/*@egen*/
    VarIdentifier() <LeftParen> (TypeElementBinding())* <RightParen>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FuncAliasBefore():
{/*@bgen(jjtree) FuncAliasBefore */
  ASTFuncAliasBefore jjtn000 = new ASTFuncAliasBefore(JJTFUNCALIASBEFORE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncAliasBefore */
    try {
/*@egen*/
    Identifier() (<Dot> Identifier())* <LeftParen> (VarIdentifier())* <RightParen>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VariableOrFunctionDeclaration():
{/*@bgen(jjtree) VariableOrFunctionDeclaration */
  ASTVariableOrFunctionDeclaration jjtn000 = new ASTVariableOrFunctionDeclaration(JJTVARIABLEORFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableOrFunctionDeclaration */
    try {
/*@egen*/
    (Documentation())? "def" VarIdentifier() (<Colon> ValueType())? ((FunctionDeclBody()) | (<EqualSign> Body()) )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionDeclBody():
{/*@bgen(jjtree) FunctionDeclBody */
  ASTFunctionDeclBody jjtn000 = new ASTFunctionDeclBody(JJTFUNCTIONDECLBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDeclBody */
     try {
/*@egen*/
     FuncDeclBody1() (LOOKAHEAD(FuncDeclBody1()) FuncDeclBody1())*/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void FuncDeclBody1()      :
{}
{
    LOOKAHEAD(FuncPattern()) FuncPattern() |
    Statement() |
    LOOKAHEAD(Expression()) Expression()
}

void ValueType():
{/*@bgen(jjtree) ValueType */
  ASTValueType jjtn000 = new ASTValueType(JJTVALUETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueType */
    try {
/*@egen*/
    (LOOKAHEAD((TypeElementBinding() | TypeElement())) (LOOKAHEAD(2) TypeElementBinding() |LOOKAHEAD(2) TypeElement()))+ (/*@bgen(jjtree) #VarArgs( true) */
                                                                                                                          {
                                                                                                                            ASTVarArgs jjtn001 = new ASTVarArgs(JJTVARARGS);
                                                                                                                            boolean jjtc001 = true;
                                                                                                                            jjtree.openNodeScope(jjtn001);
                                                                                                                          }
                                                                                                                          try {
/*@egen*/<Star>/*@bgen(jjtree)*/
                                                                                                                          } finally {
                                                                                                                            if (jjtc001) {
                                                                                                                              jjtree.closeNodeScope(jjtn001,  true);
                                                                                                                            }
                                                                                                                          }
/*@egen*/               )? (<SingleArrow> ReturnType())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Body():
{/*@bgen(jjtree) Body */
  ASTBody jjtn000 = new ASTBody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Body */
    try {
/*@egen*/
    Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FuncPattern():
{/*@bgen(jjtree) FuncPattern */
  ASTFuncPattern jjtn000 = new ASTFuncPattern(JJTFUNCPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncPattern */
    try {
/*@egen*/
    MethodName() ArgVariables() (<Atmark> Guard())? <DoubleArrow> PatternBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PatternBody():
{/*@bgen(jjtree) PatternBody */
  ASTPatternBody jjtn000 = new ASTPatternBody(JJTPATTERNBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PatternBody */
    try {
/*@egen*/
    Expression() (<SemiColon>)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArgVariables():
{/*@bgen(jjtree) ArgVariables */
  ASTArgVariables jjtn000 = new ASTArgVariables(JJTARGVARIABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgVariables */
    try {
/*@egen*/
    (ArgVariable() (ColonType())?)*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArgVariable():
{/*@bgen(jjtree) ArgVariable */
  ASTArgVariable jjtn000 = new ASTArgVariable(JJTARGVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgVariable */
    try {
/*@egen*/
    LOOKAHEAD(2) WildCard() |
    LOOKAHEAD(2) VarIdentifier() |
    LOOKAHEAD(2) Literal()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Guard():
{/*@bgen(jjtree) Guard */
  ASTGuard jjtn000 = new ASTGuard(JJTGUARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Guard */
    try {
/*@egen*/
    Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EnumDeclaration():
{/*@bgen(jjtree) EnumDeclaration */
  ASTEnumDeclaration jjtn000 = new ASTEnumDeclaration(JJTENUMDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EnumDeclaration */
    try {
/*@egen*/
    (Documentation())? <Enum> TypeIdentifier() <Colon> <LeftBracket> EnumElements() <RightBracket>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void EnumElements():
{/*@bgen(jjtree) EnumElements */
  ASTEnumElements jjtn000 = new ASTEnumElements(JJTENUMELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EnumElements */
    try {
/*@egen*/
    (TypeIdentifier())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeElement():
{/*@bgen(jjtree) TypeElement */
  ASTTypeElement jjtn000 = new ASTTypeElement(JJTTYPEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeElement */
    try {
/*@egen*/
    JavaType() | 
    TypeWithTypeParams() |
    LOOKAHEAD(2) FunctionType() |
    LOOKAHEAD(2)/*@bgen(jjtree) #UnitType( true) */
                 {
                   ASTUnitType jjtn001 = new ASTUnitType(JJTUNITTYPE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ (<LeftParen> <RightParen>)/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  true);
                   }
                 }
/*@egen*/                /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeElementBinding():
{/*@bgen(jjtree) TypeElementBinding */
  ASTTypeElementBinding jjtn000 = new ASTTypeElementBinding(JJTTYPEELEMENTBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeElementBinding */
    try {
/*@egen*/
    VarIdentifier() <Colon> TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExpressionBinding():
{/*@bgen(jjtree) ExpressionBinding */
  ASTExpressionBinding jjtn000 = new ASTExpressionBinding(JJTEXPRESSIONBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionBinding */
    try {
/*@egen*/
    Expression() <Colon> TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void JavaType():
{/*@bgen(jjtree) JavaType */
  ASTJavaType jjtn000 = new ASTJavaType(JJTJAVATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JavaType */
    try {
/*@egen*/
    (LOOKAHEAD(VarIdentifier() <Dot>) VarIdentifier() <Dot>)+ TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeWithTypeParams()      :
{}
{
    TypeIdentifier() (LOOKAHEAD(2) TypeParameters())?
}

void FunctionType():
{/*@bgen(jjtree) FunctionType */
  ASTFunctionType jjtn000 = new ASTFunctionType(JJTFUNCTIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionType */
    try {
/*@egen*/
    <LeftParen> (TypeElement())+ <SingleArrow> ReturnType() <RightParen>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionLiteral():
{/*@bgen(jjtree) FunctionLiteral */
  ASTFunctionLiteral jjtn000 = new ASTFunctionLiteral(JJTFUNCTIONLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionLiteral */
    try {
/*@egen*/
    FunctionLiteralParameters() <SingleArrow> ((<LeftBrace> Expression() <RightBrace>)| Expression())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionLiteralParameters():
{/*@bgen(jjtree) FunctionLiteralParameters */
  ASTFunctionLiteralParameters jjtn000 = new ASTFunctionLiteralParameters(JJTFUNCTIONLITERALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionLiteralParameters */
    try {
/*@egen*/
    VarIdentifier() |
    <LeftParen> (LOOKAHEAD(2) TypeElementBinding() | LOOKAHEAD(2) VarIdentifier() )* <RightParen>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ImportStatement():
{/*@bgen(jjtree) ImportStatement */
  ASTImportStatement jjtn000 = new ASTImportStatement(JJTIMPORTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportStatement */
    try {
/*@egen*/
    <Import> (LOOKAHEAD(2) ((TypeIdentifier()|JavaFQCN())) (<SingleArrow> Alias())?)+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Alias():
{/*@bgen(jjtree) Alias */
  ASTAlias jjtn000 = new ASTAlias(JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Alias */
    try {
/*@egen*/
    TypeIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void JavaFQCN():
{/*@bgen(jjtree) JavaFQCN */
  ASTJavaFQCN jjtn000 = new ASTJavaFQCN(JJTJAVAFQCN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JavaFQCN */
    try {
/*@egen*/
    StringLiteral()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExtendsType():
{/*@bgen(jjtree) ExtendsType */
  ASTExtendsType jjtn000 = new ASTExtendsType(JJTEXTENDSTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExtendsType */
    try {
/*@egen*/
    (Documentation())? "extends" TypeElement() <AA> VarIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeParameters():
{/*@bgen(jjtree) TypeParameters */
  ASTTypeParameters jjtn000 = new ASTTypeParameters(JJTTYPEPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeParameters */
    try {
/*@egen*/
    <LeftBracket> (TypeParameter())+ <RightBracket>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void TypeParameter():
{/*@bgen(jjtree) TypeParameter */
  ASTTypeParameter jjtn000 = new ASTTypeParameter(JJTTYPEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeParameter */
    try {
/*@egen*/
    LOOKAHEAD(2) TypeElement() (TypeBound())? |
    LOOKAHEAD(2) VarIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeBound():
{/*@bgen(jjtree) TypeBound */
  ASTTypeBound jjtn000 = new ASTTypeBound(JJTTYPEBOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeBound */
    try {
/*@egen*/
    <Lt> TypeElement() (<And> TypeElement())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ModuleDeclaration():
{/*@bgen(jjtree) ModuleDeclaration */
  ASTModuleDeclaration jjtn000 = new ASTModuleDeclaration(JJTMODULEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleDeclaration */
    try {
/*@egen*/
    <Module> TypeIdentifier() 
    ModuleBody()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ModuleBody():
{/*@bgen(jjtree) ModuleBody */
  ASTModuleBody jjtn000 = new ASTModuleBody(JJTMODULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleBody */
    try {
/*@egen*/
    (LOOKAHEAD(TypeDeclaration()) TypeDeclaration() | LOOKAHEAD(VariableOrFunctionDeclaration()) VariableOrFunctionDeclaration()) 
    (LOOKAHEAD( (TypeDeclaration() | VariableOrFunctionDeclaration()))  (LOOKAHEAD(TypeDeclaration()) TypeDeclaration() |LOOKAHEAD(VariableOrFunctionDeclaration()) VariableOrFunctionDeclaration()))*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Literal()      :
{}
{
     FunctionLiteral() |
     BoolLiteral() |
     IntLiteral() |
     FloatLiteral() |
     StringLiteral() |
     TupleLiteral() |
     ListLiteral() |
     UndefinedLiteral()
}

ASTCompileUnit CompileUnit():
{/*@bgen(jjtree) CompileUnit */
  ASTCompileUnit jjtn000 = new ASTCompileUnit(JJTCOMPILEUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompileUnit */
    try {
/*@egen*/
    ( LOOKAHEAD(Assignment()) Assignment() | LOOKAHEAD(MethodInvocation()) MethodInvocation() | Statement() | SP())* <EOF>/*@bgen(jjtree)*/
                                                                                                                           {
                                                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                                                             jjtc000 = false;
                                                                                                                           }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement()      :
{}
{
    LOOKAHEAD(Declaration()) Declaration() |
    ImportStatement() |
    LOOKAHEAD(ModifierStatement()) ModifierStatement() |
    LOOKAHEAD(Documentation()) Documentation() | 
    LOOKAHEAD(ExtendsType()) ExtendsType()
}

void Declaration()      :
{}
{
    LOOKAHEAD(VariableOrFunctionDeclaration()) VariableOrFunctionDeclaration() |
    LOOKAHEAD(TypeDeclaration()) TypeDeclaration() |
    LOOKAHEAD(FuncAliasDeclaration()) FuncAliasDeclaration() | 
    LOOKAHEAD(AlgebraicDataTypeDecl()) AlgebraicDataTypeDecl() | 
    LOOKAHEAD(InterfaceDeclaration()) InterfaceDeclaration() |
    LOOKAHEAD(TypeAliasDeclaration()) TypeAliasDeclaration() |
    LOOKAHEAD(ModuleDeclaration()) ModuleDeclaration() |
    LOOKAHEAD(EnumDeclaration()) EnumDeclaration()
}

void MethodInvocation():
{/*@bgen(jjtree) MethodInvocation */
  ASTMethodInvocation jjtn000 = new ASTMethodInvocation(JJTMETHODINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodInvocation */
    try {
/*@egen*/
    LOOKAHEAD(2) ElementAccess() Arguments() (LOOKAHEAD(<Dot> MethodInvocation()) <Dot> MethodInvocation())? | 
    LOOKAHEAD(2) MethodName() Arguments() (LOOKAHEAD(<Dot> MethodInvocation()) <Dot> MethodInvocation())? |
    LOOKAHEAD(TypeIdentifier() (<Dot>)? MethodName() Arguments()) TypeIdentifier() (<Dot>)? MethodName() Arguments() (LOOKAHEAD(<Dot> MethodInvocation()) <Dot> MethodInvocation())?| 
    LOOKAHEAD(ExpressionName() MethodName() Arguments()) ExpressionName() MethodName() Arguments() (LOOKAHEAD(<Dot> MethodInvocation()) <Dot> MethodInvocation())?| 
    LOOKAHEAD((<LeftParen>)? Literal() (<RightParen>)? (<Dot>)? MethodName() Arguments()) (LOOKAHEAD(<LeftParen>) <LeftParen>)? Literal() (<RightParen>)? (<Dot>)? MethodName() Arguments() (LOOKAHEAD(<Dot> MethodInvocation()) <Dot> MethodInvocation())?|
    LOOKAHEAD(FunctionLiteral() Arguments()) FunctionLiteral() Arguments() (LOOKAHEAD(<Dot> MethodInvocation()) <Dot> MethodInvocation())? |
    LOOKAHEAD(<LeftParen> Expression() <RightParen>) <LeftParen> Expression() <RightParen> (<Dot>)? MethodName() Arguments() (LOOKAHEAD(<Dot> MethodInvocation()) <Dot> MethodInvocation())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Arguments():
{/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arguments */
    try {
/*@egen*/
    <LeftParen> (Argument() ((",")? Argument())*)? <RightParen>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Argument():
{/*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression()      :
{}
{
    LOOKAHEAD(Assignment()) Assignment() |
    SwitchExpr() |
    LOOKAHEAD(OrExpr()) OrExpr() 
}

void Assignment():
{/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
    try {
/*@egen*/
    LeftHandSide() AssignmentOperator() Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LeftHandSide():
{/*@bgen(jjtree) LeftHandSide */
  ASTLeftHandSide jjtn000 = new ASTLeftHandSide(JJTLEFTHANDSIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LeftHandSide */
    try {
/*@egen*/
    LOOKAHEAD(2) ElementAccess() |
    LOOKAHEAD(2) VarIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AssignmentOperator()      :
{}
{
    Assign() | AA() | SA() | MA() | DA() | RA()
}

void SwitchExpr():
{/*@bgen(jjtree) SwitchExpr */
  ASTSwitchExpr jjtn000 = new ASTSwitchExpr(JJTSWITCHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchExpr */
    try {
/*@egen*/
    <Switch> Expression() (LOOKAHEAD(SwitchCase()) SwitchCase())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SwitchCase():
{/*@bgen(jjtree) SwitchCase */
  ASTSwitchCase jjtn000 = new ASTSwitchCase(JJTSWITCHCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchCase */
    try {
/*@egen*/
    <Case> SwitchPattern()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SwitchPattern()      :
{}
{
    Expression() (ColonType())? <DoubleArrow> Expression()
}

void ColonType()      :
{}
{
    <Colon> TypeElement()
}

void OrExpr()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (AndExpr() (LOOKAHEAD(2) Or() AndExpr())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void AndExpr()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Equality() (LOOKAHEAD(2) And() Equality())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Equality()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Relational() (LOOKAHEAD(2) (EqualTo() | NotEqualTo()) Relational())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Relational()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Range() (LOOKAHEAD(2) (LessThan() | GreaterThan()| LessThanEqualTo() | GreaterThanEqualTo()) Range())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Range()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Additive() (LOOKAHEAD(2) ( ClosedRange() | HalfOpenRange()) Additive())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Additive()      :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Multiplicative() (LOOKAHEAD(2) (Plus() | Minus()) Multiplicative())* )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Multiplicative()      :
{}
{
    UnaryExpr()/*@bgen(jjtree) #ExprNode(> 1) */
                {
                  ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ (LOOKAHEAD(2) (Star() | Slash() | SafeDiv() | SafeRem() | Percent() | Hat()) UnaryExpr())*/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/               
}

void UnaryExpr()      :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
   {
     ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   (UnaryPlus() UnaryExpr() |
    UnaryMinus() UnaryExpr() |
    UnaryExprNotPlusMinus() )/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/              
}

void UnaryExprNotPlusMinus()      :
{}
{
    UnaryBang()/*@bgen(jjtree) #ExprNode(> 1) */
                {
                  ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  }
                }
/*@egen*/              |
    LOOKAHEAD(CastExpression())/*@bgen(jjtree) #ExprNode(> 1) */
                                {
                                  ASTExprNode jjtn002 = new ASTExprNode(JJTEXPRNODE);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*/ CastExpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte002) {
                                  if (jjtc002) {
                                    jjtree.clearNodeScope(jjtn002);
                                    jjtc002 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte002 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte002;
                                  }
                                  if (jjte002 instanceof ParseException) {
                                    throw (ParseException)jjte002;
                                  }
                                  throw (Error)jjte002;
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                                  }
                                }
/*@egen*/              | 
    LOOKAHEAD(PostFixExpression())/*@bgen(jjtree) #ExprNode(> 1) */
                                   {
                                     ASTExprNode jjtn003 = new ASTExprNode(JJTEXPRNODE);
                                     boolean jjtc003 = true;
                                     jjtree.openNodeScope(jjtn003);
                                   }
                                   try {
/*@egen*/ PostFixExpression()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte003) {
                                     if (jjtc003) {
                                       jjtree.clearNodeScope(jjtn003);
                                       jjtc003 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte003 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte003;
                                     }
                                     if (jjte003 instanceof ParseException) {
                                       throw (ParseException)jjte003;
                                     }
                                     throw (Error)jjte003;
                                   } finally {
                                     if (jjtc003) {
                                       jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
                                     }
                                   }
/*@egen*/              
}

void CastExpression():
{/*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CastExpression */
    try {
/*@egen*/
    <LeftParen> UnaryExpr() <RightParen> <CastArrow> TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PostFixExpression()      :
{}
{
    LOOKAHEAD(Primary())/*@bgen(jjtree) #ExprNode(> 1) */
                         {
                           ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ Primary()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                           }
                         }
/*@egen*/               |
    LOOKAHEAD(ExpressionName())/*@bgen(jjtree) #ExprNode(> 1) */
                                {
                                  ASTExprNode jjtn002 = new ASTExprNode(JJTEXPRNODE);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*/ ExpressionName()/*@bgen(jjtree)*/
                                } catch (Throwable jjte002) {
                                  if (jjtc002) {
                                    jjtree.clearNodeScope(jjtn002);
                                    jjtc002 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte002 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte002;
                                  }
                                  if (jjte002 instanceof ParseException) {
                                    throw (ParseException)jjte002;
                                  }
                                  throw (Error)jjte002;
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                                  }
                                }
/*@egen*/              
}

void ExpressionName():
{/*@bgen(jjtree) ExpressionName */
  ASTExpressionName jjtn000 = new ASTExpressionName(JJTEXPRESSIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionName */
    try {
/*@egen*/
    (LOOKAHEAD(ElementAccess() (<Dot>)? ) ElementAccess() (<Dot>)?)? Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Primary()      :
{}
{
    LOOKAHEAD(Literal())/*@bgen(jjtree) #ExprNode(> 1) */
                                                      {
                                                        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
                                                      }
                                                      try {
/*@egen*/                              Literal()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte001;
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          throw (ParseException)jjte001;
                                                        }
                                                        throw (Error)jjte001;
                                                      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                        }
                                                      }
/*@egen*/              |
    LOOKAHEAD(NewInstance())/*@bgen(jjtree) #ExprNode(> 1) */
                                                      {
                                                        ASTExprNode jjtn002 = new ASTExprNode(JJTEXPRNODE);
                                                        boolean jjtc002 = true;
                                                        jjtree.openNodeScope(jjtn002);
                                                      }
                                                      try {
/*@egen*/                          NewInstance()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte002) {
                                                        if (jjtc002) {
                                                          jjtree.clearNodeScope(jjtn002);
                                                          jjtc002 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte002 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte002;
                                                        }
                                                        if (jjte002 instanceof ParseException) {
                                                          throw (ParseException)jjte002;
                                                        }
                                                        throw (Error)jjte002;
                                                      } finally {
                                                        if (jjtc002) {
                                                          jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                                                        }
                                                      }
/*@egen*/              |
    LOOKAHEAD(MethodInvocation())/*@bgen(jjtree) #ExprNode(> 1) */
                                                      {
                                                        ASTExprNode jjtn003 = new ASTExprNode(JJTEXPRNODE);
                                                        boolean jjtc003 = true;
                                                        jjtree.openNodeScope(jjtn003);
                                                      }
                                                      try {
/*@egen*/                     MethodInvocation()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte003) {
                                                        if (jjtc003) {
                                                          jjtree.clearNodeScope(jjtn003);
                                                          jjtc003 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte003 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte003;
                                                        }
                                                        if (jjte003 instanceof ParseException) {
                                                          throw (ParseException)jjte003;
                                                        }
                                                        throw (Error)jjte003;
                                                      } finally {
                                                        if (jjtc003) {
                                                          jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
                                                        }
                                                      }
/*@egen*/              |
    LOOKAHEAD(ElementAccess())/*@bgen(jjtree) #ExprNode(> 1) */
                                                      {
                                                        ASTExprNode jjtn004 = new ASTExprNode(JJTEXPRNODE);
                                                        boolean jjtc004 = true;
                                                        jjtree.openNodeScope(jjtn004);
                                                      }
                                                      try {
/*@egen*/                        ElementAccess()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte004) {
                                                        if (jjtc004) {
                                                          jjtree.clearNodeScope(jjtn004);
                                                          jjtc004 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte004 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte004;
                                                        }
                                                        if (jjte004 instanceof ParseException) {
                                                          throw (ParseException)jjte004;
                                                        }
                                                        throw (Error)jjte004;
                                                      } finally {
                                                        if (jjtc004) {
                                                          jjtree.closeNodeScope(jjtn004, jjtree.nodeArity() > 1);
                                                        }
                                                      }
/*@egen*/              |/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn005 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
    }
    try {
/*@egen*/
    WildCard()/*@bgen(jjtree)*/
    } catch (Throwable jjte005) {
      if (jjtc005) {
        jjtree.clearNodeScope(jjtn005);
        jjtc005 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte005 instanceof RuntimeException) {
        throw (RuntimeException)jjte005;
      }
      if (jjte005 instanceof ParseException) {
        throw (ParseException)jjte005;
      }
      throw (Error)jjte005;
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              |
    LOOKAHEAD(<LeftParen> Expression() <RightParen>)  <LeftParen> Expression()/*@bgen(jjtree) #ExprNode(> 1) */
                                                                               {
                                                                                 ASTExprNode jjtn006 = new ASTExprNode(JJTEXPRNODE);
                                                                                 boolean jjtc006 = true;
                                                                                 jjtree.openNodeScope(jjtn006);
                                                                               }
                                                                               try {
/*@egen*/ <RightParen>/*@bgen(jjtree)*/
                                                                               } finally {
                                                                                 if (jjtc006) {
                                                                                   jjtree.closeNodeScope(jjtn006, jjtree.nodeArity() > 1);
                                                                                 }
                                                                               }
/*@egen*/              
}


void NewInstance():
{/*@bgen(jjtree) NewInstance */
  ASTNewInstance jjtn000 = new ASTNewInstance(JJTNEWINSTANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NewInstance */
    try {
/*@egen*/
    TypeIdentifier() (LOOKAHEAD(Arguments()) Arguments())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ElementAccess():
{/*@bgen(jjtree) ElementAccess */
  ASTElementAccess jjtn000 = new ASTElementAccess(JJTELEMENTACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElementAccess */
    try {
/*@egen*/
    (LOOKAHEAD(ModuleName() <DoubleColon>) ModuleName() <DoubleColon>)? Identifier() (LOOKAHEAD((<Dot>)? Identifier()) (<Dot>)? Identifier())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Documentation():
{/*@bgen(jjtree) Documentation */
  ASTDocumentation jjtn000 = new ASTDocumentation(JJTDOCUMENTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Documentation */
    try {
/*@egen*/
    <BeginDoc> StringLiteral() <EndDoc>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void ModifierStatement():
{/*@bgen(jjtree) ModifierStatement */
  ASTModifierStatement jjtn000 = new ASTModifierStatement(JJTMODIFIERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModifierStatement */
     try {
/*@egen*/
     "#" (AllModifier())+/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void AllModifier()      :
{}
{
    AbstractModifier() |
    OverrideModifier() |
    PrivateModifier() | 
    PublicModifier() |
    SealedModifier() | 
    LazyModifier() | 
    VariableModifier()
}

TOKEN:
{
    < LeftBracket : "[" > |
    < RightBracket : "]" > |
    < LeftBrace : "{" > |
    < RightBrace : "}" > |
    < LeftParen : "(" > |
    < RightParen : ")" > |
    < Colon : ":" > |
    < SemiColon : ";" > | 
    < DoubleColon : "::"> |
    < Dot : "." > |
    < SP : "\n\n" | "\r\r" | "\r\n\r\n" >
}

TOKEN:
{

    < EqualSign : "=" >|
    < AA : "+=" >|
    < SA : "-=" >|
    < MA : "*=" >|
    < DA : "/=" >|
    < RA : "%=" >|
    < Lt : "<" >|
    < LtE : "<=" >|
    < Gt : ">" >|
    < GtE : ">=" >|
    < Plus : "+" >|
    < Minus : "-" >|
    < Star : "*" >|
    < Slash : "/" >|
    < SafeDiv : "/?" >|
    < Percent : "%" >|
    < SafeRem : "%?" >|
    < Tilde : "~" >|
    < Bang : "!" >|
    < And : "&" > |
    < Or : "|" >|
    < Hat : "^" >|
    < Question : "?" >|
    < ReverseArrow : "<-" >|
    < SingleArrow : "->" >|
    < CastArrow : "~>" >|
    < TypeCheckArrow : "~>?" >|
    < DoubleArrow : "=>" >|
    < EqualTo : "==" >|
    < NotEqualTo : "!=" >|
    < NonComparable : "!<>=" >|
    < Comparable : "<>=" >|
    < ClosedRange : ".." >|
    < HalfOpenRange : ".<" >

}

TOKEN:
{
    < BeginDoc : "{:" > |
    < EndDoc : ":}" > |
    < Atmark : "@" >
}

SPECIAL_TOKEN:
{

    < NewLine : "\r"
              | "\n" 
              | "\r\n" > 
}

void Identifier()      :
{}
{
    TypeIdentifier() |
    VarIdentifier() 
}

void ModuleName():
{/*@bgen(jjtree) ModuleName */
  ASTModuleName jjtn000 = new ASTModuleName(JJTMODULENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleName */
    try {
/*@egen*/
    TypeIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodName():
{/*@bgen(jjtree) MethodName */
  ASTMethodName jjtn000 = new ASTMethodName(JJTMETHODNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodName */
    try {
/*@egen*/
    VarIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExprName():
{/*@bgen(jjtree) ExprName */
  ASTExprName jjtn000 = new ASTExprName(JJTEXPRNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExprName */
    try {
/*@egen*/
    VarIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ReturnType():
{/*@bgen(jjtree) ReturnType */
  ASTReturnType jjtn000 = new ASTReturnType(JJTRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnType */
    try {
/*@egen*/
    TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SuperType():
{/*@bgen(jjtree) SuperType */
  ASTSuperType jjtn000 = new ASTSuperType(JJTSUPERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SuperType */
    try {
/*@egen*/
    TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Interfaces():
{/*@bgen(jjtree) Interfaces */
  ASTInterfaces jjtn000 = new ASTInterfaces(JJTINTERFACES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Interfaces */
    try {
/*@egen*/
    (LOOKAHEAD(2) TypeElement())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Token TypeIdentifier():
{/*@bgen(jjtree) TypeIdentifier */
    ASTTypeIdentifier jjtn000 = new ASTTypeIdentifier(JJTTYPEIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) TypeIdentifier */
    try {
/*@egen*/
    t = <TypeIdentifier>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
        return t;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Token VarIdentifier():
{/*@bgen(jjtree) VarIdentifier */
    ASTVarIdentifier jjtn000 = new ASTVarIdentifier(JJTVARIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) VarIdentifier */
    try {
/*@egen*/
    t = <VarIdentifier>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
        return t;
    } |
    t = WildCard()/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        return t;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Token WildCard():
{/*@bgen(jjtree) WildCard */
    ASTWildCard jjtn000 = new ASTWildCard(JJTWILDCARD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) WildCard */
    try {
/*@egen*/
    t = <WildCard>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
        return t;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Annotation():
{/*@bgen(jjtree) Annotation */
  ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Annotation */
    try {
/*@egen*/
    <Atmark> TypeIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SKIP:
{
    " " |
    "\t" |
    < "//" (~["\r","\n"])* > |
    "/*" {
        commentNestLevel++;
        SwitchTo(InComment);
    } |
    < "__" <NewLine> >
}

<InComment> SKIP:
{
    "/*" {
        commentNestLevel++;
    } |
    < ~[]> |
    <EndOfLine : "\n" | "\r" | "\r\n" > |
    "*/" { 
        commentNestLevel--;
        if(commentNestLevel == 0){
            SwitchTo(DEFAULT);
        }
    }
}

TOKEN:
{
    < Abstract : "abstract" > |
    < Case : "case" > | 
    < Check : "check" > |
    < Enum : "enum" > |
    < FuncAlias : "funcalias" > |
    < Import : "import" > |
    < Interface : "interface" > |
    < Lazy : "lazy" > |
    < Module : "module" >|
    < Override : "override" >|
    < Private : "private" >|
    < Public : "public" >|
    < Sealed : "sealed" >|
    < Switch : "switch" >|
    < Type : "type" >|
    < TypeAlias : "typealias" >|
    < Undefined : "undefined" >|
    < Variable : "var" >
}

TOKEN:
{
    < BoolLiteral : "true"
                  | "false" > |
    < IntLiteral : <Zero> | <NonZero> (<Zero> | <NonZero>)* > |
    < Hexadecimal : "0" ["x","X"] (<HexDigit>)+ > |
    < #HexDigit : ["0"-"9" , "A"-"F" , "a"-"f"] > |
    < FloatLiteral : (<Zero> | <IntLiteral>) <Dot> (<Zero> | <NonZero>)+ (<Exp> (<Minus>)? <IntLiteral> )? > |
    < #Zero : "0" > |
    < #NonZero : ["1"-"9"] > |
    < #Exp : "e" | "E" > |
    < StringLiteral : "\"" (<StringCharacter>)* "\"" > |
    < #StringCharacter : (~["\"","\\","\n","\r"]) 
                       | <StringEscapeSeq> 
                       | <UnicodeEscape> > |
    < StringEscapeSeq : "\\" ["b","t","n","f","r","\"","\\","\'"] > |
    < UnicodeEscape : "\\u" <HexDigit> <HexDigit> <HexDigit> <HexDigit> >
}

TOKEN:
{
    < TypeIdentifier : ["A"-"Z"] (["A"-"Z","a"-"z","_","0"-"9","'"])* > | 
    < VarIdentifier : ["a"-"z"] (["A"-"Z","a"-"z","_","0"-"9","'"])* > |
    < WildCard : "_" >
}

void AbstractModifier():
{/*@bgen(jjtree) AbstractModifier */
    ASTAbstractModifier jjtn000 = new ASTAbstractModifier(JJTABSTRACTMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) AbstractModifier */
    try {
/*@egen*/
    t = <Abstract>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OverrideModifier():
{/*@bgen(jjtree) OverrideModifier */
    ASTOverrideModifier jjtn000 = new ASTOverrideModifier(JJTOVERRIDEMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;    
}
{/*@bgen(jjtree) OverrideModifier */
    try {
/*@egen*/
    t = <Override>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrivateModifier():
{/*@bgen(jjtree) PrivateModifier */
    ASTPrivateModifier jjtn000 = new ASTPrivateModifier(JJTPRIVATEMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) PrivateModifier */
    try {
/*@egen*/
    t = <Private>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PublicModifier():
{/*@bgen(jjtree) PublicModifier */
    ASTPublicModifier jjtn000 = new ASTPublicModifier(JJTPUBLICMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) PublicModifier */
    try {
/*@egen*/
    t = <Public>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SealedModifier():
{/*@bgen(jjtree) SealedModifier */
    ASTSealedModifier jjtn000 = new ASTSealedModifier(JJTSEALEDMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SealedModifier */
    try {
/*@egen*/
    t = <Sealed>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LazyModifier():
{/*@bgen(jjtree) LazyModifier */
    ASTLazyModifier jjtn000 = new ASTLazyModifier(JJTLAZYMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) LazyModifier */
    try {
/*@egen*/
    t = <Lazy>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VariableModifier():
{/*@bgen(jjtree) VariableModifier */
    ASTVariableModifier jjtn000 = new ASTVariableModifier(JJTVARIABLEMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) VariableModifier */
    try {
/*@egen*/
    t = <Variable>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryPlus():
{/*@bgen(jjtree) UnaryPlus */
    ASTUnaryPlus jjtn000 = new ASTUnaryPlus(JJTUNARYPLUS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) UnaryPlus */
    try {
/*@egen*/
    t = <Plus>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryBang():
{/*@bgen(jjtree) UnaryBang */
    ASTUnaryBang jjtn000 = new ASTUnaryBang(JJTUNARYBANG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) UnaryBang */
    try {
/*@egen*/
    t = <Bang>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryMinus():
{/*@bgen(jjtree) UnaryMinus */
    ASTUnaryMinus jjtn000 = new ASTUnaryMinus(JJTUNARYMINUS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) UnaryMinus */
    try {
/*@egen*/
    t = <Minus>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Star():
{/*@bgen(jjtree) Star */
    ASTStar jjtn000 = new ASTStar(JJTSTAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Star */
    try {
/*@egen*/
    t = <Star>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Slash():
{/*@bgen(jjtree) Slash */
    ASTSlash jjtn000 = new ASTSlash(JJTSLASH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Slash */
    try {
/*@egen*/
    t = <Slash>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Percent():
{/*@bgen(jjtree) Percent */
    ASTPercent jjtn000 = new ASTPercent(JJTPERCENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Percent */
    try {
/*@egen*/
    t = <Percent>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SafeDiv():
{/*@bgen(jjtree) SafeDiv */
    ASTSafeDiv jjtn000 = new ASTSafeDiv(JJTSAFEDIV);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SafeDiv */
    try {
/*@egen*/
    t = <SafeDiv>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SafeRem():
{/*@bgen(jjtree) SafeRem */
    ASTSafeRem jjtn000 = new ASTSafeRem(JJTSAFEREM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SafeRem */
    try {
/*@egen*/
    t = <SafeRem>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Hat():
{/*@bgen(jjtree) Hat */
    ASTHat jjtn000 = new ASTHat(JJTHAT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Hat */
    try {
/*@egen*/
    t = <Hat>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Plus():
{/*@bgen(jjtree) Plus */
    ASTPlus jjtn000 = new ASTPlus(JJTPLUS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Plus */
    try {
/*@egen*/
    t = <Plus>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Minus():
{/*@bgen(jjtree) Minus */
    ASTMinus jjtn000 = new ASTMinus(JJTMINUS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Minus */
    try {
/*@egen*/
    t = <Minus>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EqualTo():
{/*@bgen(jjtree) EqualTo */
    ASTEqualTo jjtn000 = new ASTEqualTo(JJTEQUALTO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) EqualTo */
    try {
/*@egen*/
    t = <EqualTo>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NotEqualTo():
{/*@bgen(jjtree) NotEqualTo */
    ASTNotEqualTo jjtn000 = new ASTNotEqualTo(JJTNOTEQUALTO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) NotEqualTo */
    try {
/*@egen*/
    t = <NotEqualTo>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreaterThan():
{/*@bgen(jjtree) GreaterThan */
    ASTGreaterThan jjtn000 = new ASTGreaterThan(JJTGREATERTHAN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) GreaterThan */
    try {
/*@egen*/
    t = <Gt>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LessThan():
{/*@bgen(jjtree) LessThan */
    ASTLessThan jjtn000 = new ASTLessThan(JJTLESSTHAN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) LessThan */
    try {
/*@egen*/
    t = <Lt>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreaterThanEqualTo():
{/*@bgen(jjtree) GreaterThanEqualTo */
    ASTGreaterThanEqualTo jjtn000 = new ASTGreaterThanEqualTo(JJTGREATERTHANEQUALTO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) GreaterThanEqualTo */
    try {
/*@egen*/
    t = <GtE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LessThanEqualTo():
{/*@bgen(jjtree) LessThanEqualTo */
    ASTLessThanEqualTo jjtn000 = new ASTLessThanEqualTo(JJTLESSTHANEQUALTO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) LessThanEqualTo */
    try {
/*@egen*/
    t = <LtE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Comparable():
{/*@bgen(jjtree) Comparable */
    ASTComparable jjtn000 = new ASTComparable(JJTCOMPARABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Comparable */
    try {
/*@egen*/
    t = <Comparable>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NonComparable():
{/*@bgen(jjtree) NonComparable */
    ASTNonComparable jjtn000 = new ASTNonComparable(JJTNONCOMPARABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) NonComparable */
    try {
/*@egen*/
    t = <NonComparable>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void And():
{/*@bgen(jjtree) And */
    ASTAnd jjtn000 = new ASTAnd(JJTAND);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) And */
    try {
/*@egen*/
    t = <And>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Or():
{/*@bgen(jjtree) Or */
    ASTOr jjtn000 = new ASTOr(JJTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Or */
    try {
/*@egen*/
    t = <Or>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void BoolLiteral():
{/*@bgen(jjtree) BoolLiteral */
    ASTBoolLiteral jjtn000 = new ASTBoolLiteral(JJTBOOLLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) BoolLiteral */
    try {
/*@egen*/
    t = <BoolLiteral>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void IntLiteral():
{/*@bgen(jjtree) IntLiteral */
    ASTIntLiteral jjtn000 = new ASTIntLiteral(JJTINTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) IntLiteral */
    try {
/*@egen*/
    t = <IntLiteral>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }| 
    t = <Hexadecimal>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FloatLiteral():
{/*@bgen(jjtree) FloatLiteral */
    ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) FloatLiteral */
    try {
/*@egen*/
    t = <FloatLiteral>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StringLiteral():
{/*@bgen(jjtree) StringLiteral */
    ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    t = <StringLiteral>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ListLiteral():
{/*@bgen(jjtree) ListLiteral */
  ASTListLiteral jjtn000 = new ASTListLiteral(JJTLISTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListLiteral */
    try {
/*@egen*/
    <LeftBracket> (ListBody())* <RightBracket>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ListBody()      :
{}
{
    LOOKAHEAD(2) Literal() |
    LOOKAHEAD(2) WildCard()
}

void TupleLiteral():
{/*@bgen(jjtree) TupleLiteral */
    ASTTupleLiteral jjtn000 = new ASTTupleLiteral(JJTTUPLELITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) TupleLiteral */
    try {
/*@egen*/
    t = "#(" (Expression() ((",")? Expression())*)? <RightParen>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UndefinedLiteral():
{/*@bgen(jjtree) UndefinedLiteral */
    ASTUndefinedLiteral jjtn000 = new ASTUndefinedLiteral(JJTUNDEFINEDLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) UndefinedLiteral */
    try {
/*@egen*/
    t = <Undefined>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SingleArrow():
{/*@bgen(jjtree) SingleArrow */
    ASTSingleArrow jjtn000 = new ASTSingleArrow(JJTSINGLEARROW);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SingleArrow */
    try {
/*@egen*/
    t = <SingleArrow>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Assign():
{/*@bgen(jjtree) Assign */
    ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Assign */
    try {
/*@egen*/
    t = <EqualSign>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClosedRange():
{/*@bgen(jjtree) ClosedRange */
    ASTClosedRange jjtn000 = new ASTClosedRange(JJTCLOSEDRANGE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) ClosedRange */
    try {
/*@egen*/
    t = <ClosedRange>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void HalfOpenRange():
{/*@bgen(jjtree) HalfOpenRange */
    ASTHalfOpenRange jjtn000 = new ASTHalfOpenRange(JJTHALFOPENRANGE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) HalfOpenRange */
    try {
/*@egen*/
    t = <HalfOpenRange>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AA():
{/*@bgen(jjtree) AA */
    ASTAA jjtn000 = new ASTAA(JJTAA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) AA */
    try {
/*@egen*/
    t = <AA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SA():
{/*@bgen(jjtree) SA */
    ASTSA jjtn000 = new ASTSA(JJTSA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SA */
    try {
/*@egen*/
    t = <SA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MA():
{/*@bgen(jjtree) MA */
    ASTMA jjtn000 = new ASTMA(JJTMA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) MA */
    try {
/*@egen*/
    t = <MA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DA():
{/*@bgen(jjtree) DA */
    ASTDA jjtn000 = new ASTDA(JJTDA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) DA */
    try {
/*@egen*/
    t = <DA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RA():
{/*@bgen(jjtree) RA */
    ASTRA jjtn000 = new ASTRA(JJTRA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RA */
    try {
/*@egen*/
    t = <RA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SP():
{/*@bgen(jjtree) SP */
    ASTSP jjtn000 = new ASTSP(JJTSP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SP */
    try {
/*@egen*/
    t = <SP>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        t.image = "";
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}