/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. karaffe.jj */
/*@egen*///Karaffe Javacc file

options {
    STATIC = false;
    IGNORE_CASE = false;
    UNICODE_INPUT = true;
                 
                   
                                                                                 
}

PARSER_BEGIN(KaraffeParser)
package net.nokok.karaffe.parser;

public class KaraffeParser/*@bgen(jjtree)*/implements KaraffeParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTKaraffeParserState jjtree = new JJTKaraffeParserState();

/*@egen*/

    public KaraffeParser(String sourceCode){
        this(new java.io.StringReader(sourceCode));
    }

    public int getCurrentTokenBeginColumn(){
        return jj_input_stream.getBeginColumn();
    }

    public int getCurrentTokenEndColumn(){
        return jj_input_stream.getEndColumn();
    }

    public int getCurrentLine(){
        return jj_input_stream.getEndLine();
    }
}


PARSER_END(KaraffeParser)

TOKEN_MGR_DECLS:
{
    public static int commentNestLevel = 0;
}

/*
\u30b3\u30e1\u30f3\u30c8\u306e\u51e6\u7406
*/
SKIP:
{
    " "
    | "\t"
    | < "//" (~["\n"])* <NewLine> >
    | "/*" {
        commentNestLevel++;
        SwitchTo(InComment);
    }
}

<InComment> SKIP:
{
    "/*" {
        commentNestLevel++;
    }
    | <EndOfLine : <NewLine>> 
    | "*/" {
        commentNestLevel--;
        if(commentNestLevel == 0){
            SwitchTo(DEFAULT);
        }
    }
}

/**
    Reserved keywords 
*/
TOKEN:
{
      < Check : "check" >
    | < Interface : "interface" >
    | < Public : "public" >
    | < SideEffect : "seffect" >
    | < Switch : "switch" >
    | < To : "to" >
    | < Type : "type" >
    | < Undefined : "undefined" >
}

/**
    Literals
*/
TOKEN:
{
      < BoolLiteral : "true"
                    | "false" >
    | < IntLiteral : <Zero> | (<Minus>)? <NonZero> (<Zero> | <NonZero>)* >
    | < Hexadecimal : (<Minus>)? "0" ["x","X"] (<HexDigit>)+ >
    | < #HexDigit : ["0"-"9" , "A"-"F" , "a"-"f"] > 
    | < FloatLiteral : (<Minus>)? (<Zero> | <IntLiteral>) <Dot> (<Zero> | <NonZero>)+ (<Exp> <IntLiteral> )? >
    | < #Zero : "0" >
    | < #NonZero : ["1"-"9"] >
    | < #Exp : "e" | "E" >
    | < StringLiteral : "\"" (<StringCharacter>)* "\"" >
    | < #StringCharacter : (~["\"","\\","\n","\r"]) 
                         | <StringEscapeSeq> 
                         | <UnicodeEscape> >
    | < StringEscapeSeq : "\\" ["b","t","n","f","r","\"","\\","\'"] >
    | < UnicodeEscape : "\\u" <HexDigit> <HexDigit> <HexDigit> <HexDigit> >
}

/**
    Identifiers
*/
TOKEN:
{
      < Identifier : <IdentifierHead> (<IdentifierHead> | <IdentifierCharacter>)* ("[" "]")?>
    | < #IdentifierHead :      [
                                    "A"-"Z", //A-Z
                                    "a"-"z", //a-z
                                    "\u3040"-"\u309f", //\u3072\u3089\u304c\u306a Hiragana
                                    "\u30a0"-"\u30ff", //\u30ab\u30bf\u30ab\u30ca Katakana
                                    "\u4e00"-"\u9fff"  //\u6f22\u5b57     CJK Unified Ideographs
                               ]  >
    | < #IdentifierCharacter : [
                                    "0"-"9", //0-9
                                    "A"-"Z", //A-Z
                                    "a"-"z", //a-z
                                    "_",          //_
                                    "\u3040"-"\u309f", //\u3072\u3089\u304c\u306a Hiragana
                                    "\u30a0"-"\u30ff", //\u30ab\u30bf\u30ab\u30ca Katakana
                                    "\u4e00"-"\u9fff"  //\u6f22\u5b57     CJK Unified Ideographs
                               ] >
    | < TypeParameter : ["A"-"Z"] > //A-Z
}

/**
    Delimiters
*/
TOKEN:
{
      < LeftBracket : "[" >
    | < RightBracket : "]" >
    | < LeftBrace : "{" >
    | < RightBrace : "}" >
    | < Colon : ":" >
    | < Dot : "." >
}

/**
    Operators
 */
TOKEN:
{

    < EqualSign : "=" >
    | < Lt : "<" >
    | < Gt : ">" >
    | < Plus : "+" >
    | < Minus : "-" >
    | < Star : "*" >
    | < Slash : "/" >
    | < Percent : "%" >
    | < Tilde : "~" >
    | < Bang : "!" >
    | < And : "&" > 
    | < Or : "|" >
    | < Hat : "^" >
    | < Question : "?" >
    | < Arrow : "=>" >

}

/**
    Other tokens
*/
TOKEN:
{
      < NewLine : "\r"
                | "\n" 
                | "\r\n" >
}

/**
 * CompileUnit = (Statement)* EOF
 */
public ASTCompileUnit CompileUnit():
{/*@bgen(jjtree) CompileUnit */
  ASTCompileUnit jjtn000 = new ASTCompileUnit(JJTCOMPILEUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) CompileUnit */
    try {
/*@egen*/
    (Statement())* <EOF>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Statement

/**
    Statement = Declaration
 */
void Statement():
{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    Declaration()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


// Declaration

/**
 Declaration = TypeDcl
             | InterfaceDcl
 */
void Declaration():
{/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
     try {
/*@egen*/
     LOOKAHEAD(3) TypeDcl()
     | InterfaceDcl()
     | VariableDcl()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

/**
    TypeDcl         = SimpleTypeDcl 
                    | TypeAlias
                    | Inheritance
    SimpleTypeDcl   = "type" Identifier TypeParameters?
    TypeAlias       = SimpleTypeDcl "=" (Identifier TypeParameters?)+
    Inheritance     = SimpleTypeDcl "<" (Identifier TypeParameters?)+
    
    e.g.
    type Foo 

    type Bar[A]

    type Baz[A B C]

    //TypeAlias
    type Foo = Bar

    type Foo[A] = Bar[A]

    //Inheritance
    type Foo < Bar

    type Foo[A] < Bar[A]

 */
void TypeDcl():
{/*@bgen(jjtree) TypeDcl */
  ASTTypeDcl jjtn000 = new ASTTypeDcl(JJTTYPEDCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDcl */
    try {
/*@egen*/
    <Type> Identifier() (TypeParameters())? (Declaration())* ((EqualOperator() | LessThanOperator()) (Identifier() (TypeParameters())?)*)* NewLine()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    InterfaceDcl = "interface" InterfaceName TypeParameters? NewLine NestDeclaration

    e.g.
    interface Foo

    interface Foo[A]
 */
void InterfaceDcl():
{/*@bgen(jjtree) InterfaceDcl */
  ASTInterfaceDcl jjtn000 = new ASTInterfaceDcl(JJTINTERFACEDCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceDcl */
    try {
/*@egen*/
    <Interface> Identifier() NewLine()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    VariableDcl     = Identifier VariableTypeDcl? "=" Expression NewLine
    VariableTypeDcl = VariableType
                    | FunctionType
 */
void VariableDcl():
{/*@bgen(jjtree) VariableDcl */
  ASTVariableDcl jjtn000 = new ASTVariableDcl(JJTVARIABLEDCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDcl */
    try {
/*@egen*/
    Identifier() (<Colon> VariableTypeDcl())? EqualOperator() Expression() NewLine()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    VariableTypeDcl = (Identifier TypeParameters?)+ ("to" Identifier TypeParameters?)? 
 */
void VariableTypeDcl():
{/*@bgen(jjtree) VariableTypeDcl */
  ASTVariableTypeDcl jjtn000 = new ASTVariableTypeDcl(JJTVARIABLETYPEDCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableTypeDcl */
    try {
/*@egen*/
    (Identifier() (TypeParameters())?)+ (<To> Identifier() TypeParameters())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

/**
    TypeParameters = "[" TypeParameter1 TypeParameter2 ... "]"
 */
void TypeParameters():
{/*@bgen(jjtree) TypeParameters */
  ASTTypeParameters jjtn000 = new ASTTypeParameters(JJTTYPEPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeParameters */
    try {
/*@egen*/
    LeftBracket() (Identifier())+ RightBracket()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Expressions

/**
    Expression = Literal
 */
void Expression():
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    Literal()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


/**
    Literal = BoolLiteral
            | IntLiteral
            | FloatLiteral
            | StringLiteral
            | UndefinedLiteral
 */
void Literal():
{/*@bgen(jjtree) Literal */
    ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Literal */
      try {
/*@egen*/
      t = <BoolLiteral>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }
    | t = <IntLiteral>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }
    | t = <FloatLiteral>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }
    | t = <StringLiteral> {
        jjtn000.jjtSetValue(t);
    } t = <Undefined>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }
    | FunctionLiteral()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

/**
    FunctionLiteral = "[" FunctionVariableBinding "]" "=>" "{"? Expression "}"?

    e.g.

    [] => {...}
 */
void FunctionLiteral():
{/*@bgen(jjtree) FunctionLiteral */
  ASTFunctionLiteral jjtn000 = new ASTFunctionLiteral(JJTFUNCTIONLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionLiteral */
    try {
/*@egen*/
    LeftBracket() (FunctionVariableBinding())* RightBracket() ArrowOperator() LeftBrace() Expression() RightBrace()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    FunctionVariableBinding = Identifier
                            | DefaultValueBinding
                            | ExplicitTypeBinding
                            | ExplicitTypeDefaultBinding
    DefaultValueBinding     = Identifier "=" Literal
    ExplicitTypeBinding     = Identifier ":" Identifier
    ExplicitTypeDefaultBinding = ExplicitTypeBinding "=" Literal

 */
void FunctionVariableBinding():
{/*@bgen(jjtree) FunctionVariableBinding */
  ASTFunctionVariableBinding jjtn000 = new ASTFunctionVariableBinding(JJTFUNCTIONVARIABLEBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionVariableBinding */
    try {
/*@egen*/
    Identifier() (<Colon> Identifier() EqualOperator() Literal())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Identifiers

/**
    Identifier = IdentifierHead IdentifierCharacter
 */
void Identifier():
{/*@bgen(jjtree) Identifier */
    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t = <Identifier>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Delimiters

void LeftBracket():
{/*@bgen(jjtree) LeftBracket */
  ASTLeftBracket jjtn000 = new ASTLeftBracket(JJTLEFTBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LeftBracket */
    try {
/*@egen*/
    <LeftBracket>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RightBracket():
{/*@bgen(jjtree) RightBracket */
  ASTRightBracket jjtn000 = new ASTRightBracket(JJTRIGHTBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RightBracket */
    try {
/*@egen*/
    <RightBracket>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LeftBrace():
{/*@bgen(jjtree) LeftBrace */
  ASTLeftBrace jjtn000 = new ASTLeftBrace(JJTLEFTBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LeftBrace */
    try {
/*@egen*/
    <LeftBrace>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RightBrace():
{/*@bgen(jjtree) RightBrace */
  ASTRightBrace jjtn000 = new ASTRightBrace(JJTRIGHTBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RightBrace */
    try {
/*@egen*/
    <RightBrace>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Colon():
{/*@bgen(jjtree) Colon */
  ASTColon jjtn000 = new ASTColon(JJTCOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Colon */
    try {
/*@egen*/
    <Colon>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Dot():
{/*@bgen(jjtree) Dot */
  ASTDot jjtn000 = new ASTDot(JJTDOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Dot */
    try {
/*@egen*/
    <Dot>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
//Operators

void EqualOperator():
{/*@bgen(jjtree) EqualOperator */
  ASTEqualOperator jjtn000 = new ASTEqualOperator(JJTEQUALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EqualOperator */
    try {
/*@egen*/
    <EqualSign>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LessThanOperator():
{/*@bgen(jjtree) LessThanOperator */
  ASTLessThanOperator jjtn000 = new ASTLessThanOperator(JJTLESSTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LessThanOperator */
    try {
/*@egen*/
    <Lt>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreaterThanOperator():
{/*@bgen(jjtree) GreaterThanOperator */
  ASTGreaterThanOperator jjtn000 = new ASTGreaterThanOperator(JJTGREATERTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GreaterThanOperator */
    try {
/*@egen*/
    <Gt>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Plus():
{/*@bgen(jjtree) Plus */
  ASTPlus jjtn000 = new ASTPlus(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Plus */
    try {
/*@egen*/
    <Plus>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Minus():
{/*@bgen(jjtree) Minus */
  ASTMinus jjtn000 = new ASTMinus(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Minus */
    try {
/*@egen*/
    <Minus>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StarOperator():
{/*@bgen(jjtree) StarOperator */
  ASTStarOperator jjtn000 = new ASTStarOperator(JJTSTAROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StarOperator */
    try {
/*@egen*/
    <Star>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SlashOperator():
{/*@bgen(jjtree) SlashOperator */
  ASTSlashOperator jjtn000 = new ASTSlashOperator(JJTSLASHOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SlashOperator */
    try {
/*@egen*/
    <Slash>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PercentOperator():
{/*@bgen(jjtree) PercentOperator */
  ASTPercentOperator jjtn000 = new ASTPercentOperator(JJTPERCENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PercentOperator */
    try {
/*@egen*/
    <Percent>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TildeOperator():
{/*@bgen(jjtree) TildeOperator */
  ASTTildeOperator jjtn000 = new ASTTildeOperator(JJTTILDEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TildeOperator */
    try {
/*@egen*/
    <Tilde>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BangOperator():
{/*@bgen(jjtree) BangOperator */
  ASTBangOperator jjtn000 = new ASTBangOperator(JJTBANGOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BangOperator */
    try {
/*@egen*/
    <Bang>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AndOperator():
{/*@bgen(jjtree) AndOperator */
  ASTAndOperator jjtn000 = new ASTAndOperator(JJTANDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndOperator */
    try {
/*@egen*/
    <And>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OrOperator():
{/*@bgen(jjtree) OrOperator */
  ASTOrOperator jjtn000 = new ASTOrOperator(JJTOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrOperator */
    try {
/*@egen*/
    <Or>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void HatOperator():
{/*@bgen(jjtree) HatOperator */
  ASTHatOperator jjtn000 = new ASTHatOperator(JJTHATOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HatOperator */
    try {
/*@egen*/
    <Hat>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void QuestionOperator():
{/*@bgen(jjtree) QuestionOperator */
  ASTQuestionOperator jjtn000 = new ASTQuestionOperator(JJTQUESTIONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) QuestionOperator */
    try {
/*@egen*/
    <Question>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrowOperator():
{/*@bgen(jjtree) ArrowOperator */
  ASTArrowOperator jjtn000 = new ASTArrowOperator(JJTARROWOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrowOperator */
    try {
/*@egen*/
    <Arrow>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Other tokens

void NewLine():
{/*@bgen(jjtree) NewLine */
  ASTNewLine jjtn000 = new ASTNewLine(JJTNEWLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NewLine */
    try {
/*@egen*/
    <NewLine>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}