/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. karaffe.jj */
/*@egen*/options {
    STATIC = false;
    IGNORE_CASE = false;
    UNICODE_INPUT = true;
                 
                   
                                                                                 
}

PARSER_BEGIN(KaraffeParser)
package net.nokok.karaffe.parser;

import net.nokok.karaffe.parser.util.*;
import java.util.*;

public class KaraffeParser/*@bgen(jjtree)*/implements KaraffeParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTKaraffeParserState jjtree = new JJTKaraffeParserState();

/*@egen*/

    public KaraffeParser(String sourceCode){
        this(new java.io.StringReader(sourceCode));
    }

    public int getCurrentTokenBeginColumn(){
        return jj_input_stream.getBeginColumn();
    }

    public int getCurrentTokenEndColumn(){
        return jj_input_stream.getEndColumn();
    }

    public int getCurrentLine(){
        return jj_input_stream.getEndLine();
    }
}


PARSER_END(KaraffeParser)

TOKEN_MGR_DECLS:
{
    public static int commentNestLevel = 0;
}

//\u6587\u6cd5\u5b9a\u7fa9

/**

    \u578b\u5ba3\u8a00

           type \u8b58\u5225\u5b50
    \u4fee\u98fe\u5b50 type \u8b58\u5225\u5b50
    \u4fee\u98fe\u5b50 type \u8b58\u5225\u5b50 : \u7d99\u627f\u5143\u578b\u540d
    \u4fee\u98fe\u5b50 type \u8b58\u5225\u5b50              <- \u5b9f\u88c5\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9
    \u4fee\u98fe\u5b50 type \u8b58\u5225\u5b50 : \u7d99\u627f\u5143\u578b\u540d <- \u5b9f\u88c5\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9
    \u4fee\u98fe\u5b50 type \u8b58\u5225\u5b50 : \u7d99\u627f\u5143\u578b\u540d[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf]
    \u4fee\u98fe\u5b50 type \u8b58\u5225\u5b50                            <- \u5b9f\u88c5\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf]
    \u4fee\u98fe\u5b50 type \u8b58\u5225\u5b50 : \u7d99\u627f\u5143\u578b\u540d[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf] <- \u5b9f\u88c5\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf]
 */
void TypeDeclaration():
{/*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDeclaration */
    try {
/*@egen*/
    //\u4fee\u98fe\u5b50            type   \u8b58\u5225\u5b50        :        \u7d99\u627f\u5143\u578b\u540d     <-             \u5b9f\u88c5\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9
    ModifierOfType() <Type> TypeElement() (<Colon> SuperType())? (<ReverseArrow> Interfaces())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void SuperType():
{/*@bgen(jjtree) SuperType */
  ASTSuperType jjtn000 = new ASTSuperType(JJTSUPERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SuperType */
    try {
/*@egen*/
    TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Interfaces():
{/*@bgen(jjtree) Interfaces */
  ASTInterfaces jjtn000 = new ASTInterfaces(JJTINTERFACES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Interfaces */
    try {
/*@egen*/
    (LOOKAHEAD(2) TypeElement())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5ba3\u8a00
    interface \u8b58\u5225\u5b50               <- \u62e1\u5f35\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9
    interface \u8b58\u5225\u5b50[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf] <- \u62e1\u5f35\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf]
 */
void InterfaceDeclaration():
{/*@bgen(jjtree) InterfaceDeclaration */
  ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceDeclaration */
    try {
/*@egen*/
    //interface \u8b58\u5225\u5b50        <-             \u62e1\u5f35\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9
    <Interface> TypeElement() (<ReverseArrow> Interfaces())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    TypeAlias\u5ba3\u8a00
    \u4fee\u98fe\u5b50 typealias \u8b58\u5225\u5b50 : \u8b58\u5225\u5b50

    \u2193\u672a\u5b9f\u88c5
    \u4fee\u98fe\u5b50 typealias \u8b58\u5225\u5b50 : \u8b58\u5225\u5b50[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf]
 */
void TypeAliasDeclaration():
{/*@bgen(jjtree) TypeAliasDeclaration */
  ASTTypeAliasDeclaration jjtn000 = new ASTTypeAliasDeclaration(JJTTYPEALIASDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeAliasDeclaration */
   try {
/*@egen*/
    //\u4fee\u98fe\u5b50            typealias   \u8b58\u5225\u5b50        :       \u8b58\u5225\u5b50
   ModifierOfType() <TypeAlias> TypeElement() <Colon> TypeElement()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

/**
    \u5909\u6570\u307e\u305f\u306f\u95a2\u6570\u306e\u5ba3\u8a00

    \u5909\u6570\u5ba3\u8a00
           \u8b58\u5225\u5b50 : \u578b\u540d
    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50        = \u5f0f
    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50 : \u578b\u540d
    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50 : \u578b\u540d = \u5f0f
    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50 : \u578b\u540d[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf] = \u5f0f
    
    \u95a2\u6570\u5ba3\u8a00
    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50                      = \u95a2\u6570\u30ea\u30c6\u30e9\u30eb
    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50 : \u578b\u540d\u30ea\u30b9\u30c8 -> \u578b\u540d
    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50 : \u578b\u540d\u30ea\u30b9\u30c8 -> \u578b\u540d = \u95a2\u6570\u30ea\u30c6\u30e9\u30eb

    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf] : \u578b\u540d\u30ea\u30b9\u30c8[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf] -> \u578b\u540d[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf]
    \u4fee\u98fe\u5b50 \u8b58\u5225\u5b50[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf] : \u578b\u540d\u30ea\u30b9\u30c8[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf] -> \u578b\u540d[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf] = \u95a2\u6570\u30ea\u30c6\u30e9\u30eb
*/
void VariableOrFunctionDeclaration():
{/*@bgen(jjtree) VariableOrFunctionDeclaration */
  ASTVariableOrFunctionDeclaration jjtn000 = new ASTVariableOrFunctionDeclaration(JJTVARIABLEORFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableOrFunctionDeclaration */
    try {
/*@egen*/
    (LOOKAHEAD(3) ModifierOfVariable() |LOOKAHEAD(3) ModifierOfFunction()) Identifier() (LOOKAHEAD(3) (<Colon> VarOrFuncTypeDecl() <EqualSign> Expression())|
                                                               (<Colon> VarOrFuncTypeDecl() | <EqualSign> Expression()))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarOrFuncTypeDecl():
{/*@bgen(jjtree) VarOrFuncTypeDecl */
  ASTVarOrFuncTypeDecl jjtn000 = new ASTVarOrFuncTypeDecl(JJTVARORFUNCTYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarOrFuncTypeDecl */
    try {
/*@egen*/
    LOOKAHEAD(3) FuncTypeDecl()
  | LOOKAHEAD(3) VarTypeDecl()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarTypeDecl():
{/*@bgen(jjtree) VarTypeDecl */
  ASTVarTypeDecl jjtn000 = new ASTVarTypeDecl(JJTVARTYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarTypeDecl */
    try {
/*@egen*/
    TypeElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FuncTypeDecl():
{/*@bgen(jjtree) FuncTypeDecl */
  ASTFuncTypeDecl jjtn000 = new ASTFuncTypeDecl(JJTFUNCTYPEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncTypeDecl */
    try {
/*@egen*/
    TypeWithParentheses() (LOOKAHEAD(2) (SingleArrow())? TypeWithParentheses())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeWithParentheses()      :
{}
{
    LOOKAHEAD(3) <LeftParen> VarOrFuncTypeDecl() <RightParen>
  | LOOKAHEAD(3) TypeElement()
}

/**
    Enum\u306e\u5ba3\u8a00

    enum \u8b58\u5225\u5b50: [\u8b58\u5225\u5b50 \u8b58\u5225\u5b50...]
 */
void EnumDeclaration():
{/*@bgen(jjtree) EnumDeclaration */
  ASTEnumDeclaration jjtn000 = new ASTEnumDeclaration(JJTENUMDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EnumDeclaration */
    try {
/*@egen*/
    <Enum> Identifier() <Colon> <LeftBracket> EnumElements() <RightBracket>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EnumElements():
{/*@bgen(jjtree) EnumElements */
  ASTEnumElements jjtn000 = new ASTEnumElements(JJTENUMELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EnumElements */
    try {
/*@egen*/
    (Identifier())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    \u578b
    \u307e\u305f\u306f
    \u578b[\u578b\u30d1\u30e9\u30e1\u30fc\u30bf]
 */
void TypeElement()      :
{}
{
    KaraffeIdentifier() (LOOKAHEAD(2)TypeParameters())?
  | TupleLiteral()
}

/**
    \u95a2\u6570\u30ea\u30c6\u30e9\u30eb

    () -> ...
    () -> { ... }
    (\u5f15\u6570) -> ...
    (\u5f15\u6570:\u578b) -> ...
    (\u5f15\u65701 \u5f15\u65702...) -> ...
    (\u5f15\u65701:\u578b \u5f15\u65702:\u578b ...) -> ...
 */
void FunctionLiteral():
{/*@bgen(jjtree) FunctionLiteral */
  ASTFunctionLiteral jjtn000 = new ASTFunctionLiteral(JJTFUNCTIONLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionLiteral */
    try {
/*@egen*/
    //(         \u5f15\u6570:\u578b                       )            ->            {            ...          }             ...
    <LeftParen> (LOOKAHEAD(2) TypeElement())* <RightParen> SingleArrow() (<LeftBrace> Expression() <RightBrace> | Expression())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    Import\u6587

    import \u8b58\u5225\u5b50
    import \u8b58\u5225\u5b50 -> \u5225\u540d
    import \u8b58\u5225\u5b50 { }

 */
void ImportStatement():
{/*@bgen(jjtree) ImportStatement */
  ASTImportStatement jjtn000 = new ASTImportStatement(JJTIMPORTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportStatement */
    try {
/*@egen*/
    <Import> (LOOKAHEAD(2)Identifier() (<SingleArrow> Identifier())?)* (<LeftBrace> Statements() <RightBrace>)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    \u578b\u30d1\u30e9\u30e1\u30fc\u30bf
    [\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u30ea\u30b9\u30c8]

    \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u30ea\u30b9\u30c8
    \u578b\u30d1\u30e9\u30e1\u30fc\u30bf \u578b\u30d1\u30e9\u30e1\u30fc\u30bf ...

    \u578b\u30d1\u30e9\u30e1\u30fc\u30bf
    
 */
void TypeParameters():
{/*@bgen(jjtree) TypeParameters */
  ASTTypeParameters jjtn000 = new ASTTypeParameters(JJTTYPEPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeParameters */
    try {
/*@egen*/
    <LeftBracket> (TypeParameter())+ <RightBracket>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

/**
    \u578b\u30d1\u30e9\u30e1\u30fc\u30bf

    \u8b58\u5225\u5b50
    \u8b58\u5225\u5b50 \u5883\u754c\u578b
 */
void TypeParameter():
{/*@bgen(jjtree) TypeParameter */
  ASTTypeParameter jjtn000 = new ASTTypeParameter(JJTTYPEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeParameter */
    try {
/*@egen*/
    TypeElement() (LOOKAHEAD(2)TypeBound())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    \u5883\u754c\u578b

    < \u578b\u5909\u6570
    < \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 & \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 ...
    < \u578b\u30d1\u30e9\u30e1\u30fc\u30bf
 */
void TypeBound():
{/*@bgen(jjtree) TypeBound */
  ASTTypeBound jjtn000 = new ASTTypeBound(JJTTYPEBOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeBound */
    try {
/*@egen*/
    <Lt> TypeElement() (LOOKAHEAD(2)<And> TypeElement())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    module \u30e2\u30b8\u30e5\u30fc\u30eb\u540d
 */
void ModuleDeclarationStatement():
{/*@bgen(jjtree) ModuleDeclarationStatement */
  ASTModuleDeclarationStatement jjtn000 = new ASTModuleDeclarationStatement(JJTMODULEDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleDeclarationStatement */
    try {
/*@egen*/
    <Module> Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
    \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3

    @\u8b58\u5225\u5b50
 */
void Annotation():
{/*@bgen(jjtree) Annotation */
  ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Annotation */
    try {
/*@egen*/
    <Atmark> Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
\u30b3\u30e1\u30f3\u30c8\u306e\u51e6\u7406
*/
SKIP:
{
    " "
    | "\t"
    | < "//" (~["\n"])* <NewLine> >
    | "/*" {
        commentNestLevel++;
        SwitchTo(InComment);
    }
}

<InComment> SKIP:
{
    "/*" {
        commentNestLevel++;
    }
    | < ~[]>
    | <EndOfLine : <NewLine>> 
    | "*/" {
        commentNestLevel--;
        if(commentNestLevel == 0){
            SwitchTo(DEFAULT);
        }
    }
}

/**
    Reserved keywords 
*/
TOKEN:
{
    < Abstract : "abstract" >
    | < Check : "check" >
    | < Enum : "enum" >
    | < Import : "import" >
    | < Interface : "interface" >
    | < Lazy : "lazy" >
    | < Module : "module" >
    | < Operator : "op" >
    | < Override : "override" >
    | < Private : "private" >
    | < Sealed : "sealed" >
    | < Switch : "switch" >
    | < Type : "type" >
    | < UnaryOperator : "unaryop" >
    | < TypeAlias : "typealias" >
    | < Undefined : "undefined" >
    | < Variable : "var" >
}

/**
    Literals
*/
TOKEN:
{
      < BoolLiteral : "true"
                    | "false" >
    | < IntLiteral : <Zero> | (<Minus>)? <NonZero> (<Zero> | <NonZero>)* >
    | < Hexadecimal : (<Minus>)? "0" ["x","X"] (<HexDigit>)+ >
    | < #HexDigit : ["0"-"9" , "A"-"F" , "a"-"f"] > 
    | < FloatLiteral : (<Minus>)? (<Zero> | <IntLiteral>) <Dot> (<Zero> | <NonZero>)+ (<Exp> <IntLiteral> )? >
    | < #Zero : "0" >
    | < #NonZero : ["1"-"9"] >
    | < #Exp : "e" | "E" >
    | < StringLiteral : "\"" (<StringCharacter>)* "\"" >
    | < #StringCharacter : (~["\"","\\","\n","\r"]) 
                         | <StringEscapeSeq> 
                         | <UnicodeEscape> >
    | < StringEscapeSeq : "\\" ["b","t","n","f","r","\"","\\","\'"] >
    | < UnicodeEscape : "\\u" <HexDigit> <HexDigit> <HexDigit> <HexDigit> >
}

void Literal()      :
{}
{
    LOOKAHEAD(3) FunctionLiteral()
    | BoolLiteral()
    | IntLiteral()
    | FloatLiteral()
    | StringLiteral()
    | LOOKAHEAD(3) TupleLiteral()
    | UndefinedLiteral()
}

/**
    Identifiers
*/
TOKEN:
{
      < Identifier : <IdentifierHead> (<IdentifierChar>)* >
    | < #IdentifierHead : [
                                    "A"-"Z", 
                                    "a"-"z", 
                                    "_",     
                                    "\u3041"-"\u3096",
                                    "\u30a1"-"\u30fa",
                                    "\u4e00"-"\u9fff"  //\u6f22\u5b57     CJK Unified Ideographs
    ] >
    | < #IdentifierChar :      [
                                    "'",     
                                    "0"-"9",
                                    "A"-"Z", 
                                    "a"-"z", 
                                    "_",     
                                    "\u3041"-"\u3096",
                                    "\u30a1"-"\u30fa",
                                    "\u4e00"-"\u9fff"  //\u6f22\u5b57     CJK Unified Ideographs
                               ]  >
    | < JavaFQCN : <Identifier> (<Dot> <Identifier>)* >
}

Token Identifier()      :
{
    Token t;
}
{
    t = KaraffeIdentifier(){
        return t;
    }
    | t = JavaFQCN() {
        return t;
    }
}

Token KaraffeIdentifier():
{/*@bgen(jjtree) KaraffeIdentifier */
    ASTKaraffeIdentifier jjtn000 = new ASTKaraffeIdentifier(JJTKARAFFEIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) KaraffeIdentifier */
    try {
/*@egen*/
    t = <Identifier>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
        return t;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Token JavaFQCN():
{/*@bgen(jjtree) JavaFQCN */
    ASTJavaFQCN jjtn000 = new ASTJavaFQCN(JJTJAVAFQCN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) JavaFQCN */
    try {
/*@egen*/
    t = <JavaFQCN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
        return t;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

ASTCompileUnit CompileUnit():
{/*@bgen(jjtree) CompileUnit */
  ASTCompileUnit jjtn000 = new ASTCompileUnit(JJTCOMPILEUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompileUnit */
    try {
/*@egen*/
    (LOOKAHEAD(3) Statement() | LOOKAHEAD(3) MethodInvocation() | NewLineToken())* <EOF>/*@bgen(jjtree)*/
                                                                                         {
                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                           jjtc000 = false;
                                                                                         }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statements()      :
{}
{
    (LOOKAHEAD(2) Statement())*
}

void Statement()      :
{}
{
    LOOKAHEAD(2) Declaration()
    | ImportStatement()
}

void Declaration()      :
{}
{
    LOOKAHEAD(3) VariableOrFunctionDeclaration()
    | LOOKAHEAD(3) TypeDeclaration()
    | InterfaceDeclaration()
    | TypeAliasDeclaration()
    | ModuleDeclarationStatement()
    | EnumDeclaration()
}

//MethodInvocations

void MethodInvocation():
{/*@bgen(jjtree) MethodInvocation */
  ASTMethodInvocation jjtn000 = new ASTMethodInvocation(JJTMETHODINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodInvocation */
    try {
/*@egen*/
    MethodOrExprName() Arguments() (LOOKAHEAD(2) (<Dot>)? (LOOKAHEAD(2) MethodOrExprName())? Arguments())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodOrExprName():
{/*@bgen(jjtree) MethodOrExprName */
  ASTMethodOrExprName jjtn000 = new ASTMethodOrExprName(JJTMETHODOREXPRNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodOrExprName */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Arguments()      :
{}
{
    LOOKAHEAD(3) ArgumentList()
  | LOOKAHEAD(3) <LeftParen> (ArgumentList())? <RightParen>
}

void ArgumentList():
{/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/
    Argument() (LOOKAHEAD(2) Argument())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Argument():
{/*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    LOOKAHEAD(3) MethodInvocation()
  | LOOKAHEAD(3)Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

/**
    ModuleName::ElementName...
 */
void ExplicitModuleElementAccess():
{/*@bgen(jjtree) ExplicitModuleElementAccess */
  ASTExplicitModuleElementAccess jjtn000 = new ASTExplicitModuleElementAccess(JJTEXPLICITMODULEELEMENTACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExplicitModuleElementAccess */
    try {
/*@egen*/
    Identifier() (<DoubleColon> Identifier())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression():
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    LOOKAHEAD(2) OrExpr()
    | LOOKAHEAD(2) AssignmentExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AssignmentExpression():
{/*@bgen(jjtree) AssignmentExpression */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignmentExpression */
    try {
/*@egen*/
    LOOKAHEAD(2) OrExpr()
    | LOOKAHEAD(2) Assignment()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Assignment():
{/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
    try {
/*@egen*/
    LeftHandSide() AssignmentOperator() Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LeftHandSide():
{/*@bgen(jjtree) LeftHandSide */
  ASTLeftHandSide jjtn000 = new ASTLeftHandSide(JJTLEFTHANDSIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LeftHandSide */
    try {
/*@egen*/
    LOOKAHEAD(2) Identifier()
  | LOOKAHEAD(2) ExplicitModuleElementAccess() (MethodInvocation())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AssignmentOperator()      :
{}
{
    Assign() | AA() | SA() | MA() | DA() | RA()
}

void OrExpr()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (AndExpr() (LOOKAHEAD(2) Or() AndExpr())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void AndExpr()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Equality() (LOOKAHEAD(2) And() Equality())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Equality()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Relational() (LOOKAHEAD(2) (EqualTo()|
                                NotEqualTo()) Relational())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Relational()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Range() (LOOKAHEAD(2) (LessThan() |
                 GreaterThan()|
                 LessThanEqualTo() |
                 GreaterThanEqualTo()) Range())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Range()     :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Additive() (LOOKAHEAD(2) ( ClosedRange() | 
                              HalfOpenRange()) Additive())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Additive()      :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Multiplicative() (LOOKAHEAD(2) (Plus() | 
                                    Minus()) Multiplicative())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void Multiplicative()      :
{}
{/*@bgen(jjtree) #ExprNode(> 1) */
    {
      ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (UnaryExpr() (LOOKAHEAD(2) (Star()|
                               Slash()|
                               SafeDiv()|
                               SafeRem()|
                               Percent()|
                               Hat()) UnaryExpr())* )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/              
}

void UnaryExpr()      :
{}
{
   UnaryPlus()  UnaryExprNotPlusMinus() 
  | UnaryMinus() UnaryExprNotPlusMinus()
  | UnaryExprNotPlusMinus()
}

void UnaryExprNotPlusMinus()      :
{}
{
      LOOKAHEAD(3) Primary()
    | UnaryBang() Primary()
}

void Primary()      :
{}
{
      LOOKAHEAD(2) Literal()
    | LOOKAHEAD(2) Identifier()
    | LOOKAHEAD(2) <LeftParen> Expression() <RightParen>
    | LOOKAHEAD(2) MethodInvocation()
}

/**
    Identifier=>Identifier...
 */
void ElementAccess():
{/*@bgen(jjtree) ElementAccess */
  ASTElementAccess jjtn000 = new ASTElementAccess(JJTELEMENTACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElementAccess */
    try {
/*@egen*/
    Identifier()( <DoubleArrow> Identifier())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Modifier()      :
{}
{
    LOOKAHEAD(3) ModifierOfType()
    | LOOKAHEAD(3) ModifierOfVariable()
    | LOOKAHEAD(2) ModifierOfFunction()
    | ModifierOfOperator()
}

void ModifierOfType():
{/*@bgen(jjtree) ModifierOfType */
  ASTModifierOfType jjtn000 = new ASTModifierOfType(JJTMODIFIEROFTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModifierOfType */
    try {
/*@egen*/
    (PrivateModifier())? AbstractOrSealed()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AbstractOrSealed()      :
{}
{
    (AbstractModifier() | SealedModifier())?
}

void ModifierOfVariable():
{/*@bgen(jjtree) ModifierOfVariable */
  ASTModifierOfVariable jjtn000 = new ASTModifierOfVariable(JJTMODIFIEROFVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModifierOfVariable */
    try {
/*@egen*/
    (PrivateModifier())? (VariableModifier())? (LazyModifier())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ModifierOfFunction():
{/*@bgen(jjtree) ModifierOfFunction */
  ASTModifierOfFunction jjtn000 = new ASTModifierOfFunction(JJTMODIFIEROFFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModifierOfFunction */
    try {
/*@egen*/
    PrivateOrOverride() AbstractOrSealed() (VariableModifier())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrivateOrOverride()      :
{}
{
    (PrivateModifier() | OverrideModifier())?
}

void ModifierOfOperator():
{/*@bgen(jjtree) ModifierOfOperator */
  ASTModifierOfOperator jjtn000 = new ASTModifierOfOperator(JJTMODIFIEROFOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModifierOfOperator */
    try {
/*@egen*/
    UnaryOpModifier() | OpModifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


/**
    Delimiters
*/
TOKEN:
{
      < LeftBracket : "[" >
    | < RightBracket : "]" >
    | < LeftBrace : "{" >
    | < RightBrace : "}" >
    | < LeftParen : "(" >
    | < RightParen : ")" >
    | < Colon : ":" >
    | < DoubleColon : "::">
    | < Dot : "." >
}

/**
    Operators
 */
TOKEN:
{

    < EqualSign : "=" >
    | < AA : "+=" >
    | < SA : "-=" >
    | < MA : "*=" >
    | < DA : "/=" >
    | < RA : "%=" >
    | < Lt : "<" >
    | < LtE : "<=" >
    | < Gt : ">" >
    | < GtE : ">=" >
    | < Plus : "+" >
    | < Minus : "-" >
    | < Star : "*" >
    | < Slash : "/" >
    | < SafeDiv : "/?" >
    | < Percent : "%" >
    | < SafeRem : "%?" >
    | < Tilde : "~" >
    | < Bang : "!" >
    | < And : "&" > 
    | < Or : "|" >
    | < Hat : "^" >
    | < Question : "?" >
    | < ReverseArrow : "<-" >
    | < ReverseArrowChar : "\u2190" >
    | < SingleArrowChar : "\u2192" >
    | < SingleArrow : "->" >
    | < CastArrow : "~>" >
    | < TypeCheckArrow : "~>?" >
    | < DoubleArrow : "=>" >
    | < EqualTo : "==" >
    | < NotEqualTo : "!=" >
    | < NonComparable : "!<>=" >
    | < Comparable : "<>=" >
    | < ClosedRange : ".." >
    | < HalfOpenRange : ".<" >

}

/**
    Other tokens
*/
TOKEN:
{
      < NewLine : "\r"
                | "\n" 
                | "\r\n" >
      | < Atmark : "@" >
}


void AbstractModifier():
{/*@bgen(jjtree) AbstractModifier */
    ASTAbstractModifier jjtn000 = new ASTAbstractModifier(JJTABSTRACTMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) AbstractModifier */
    try {
/*@egen*/
    t = <Abstract>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OverrideModifier():
{/*@bgen(jjtree) OverrideModifier */
    ASTOverrideModifier jjtn000 = new ASTOverrideModifier(JJTOVERRIDEMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;    
}
{/*@bgen(jjtree) OverrideModifier */
    try {
/*@egen*/
    t = <Override>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrivateModifier():
{/*@bgen(jjtree) PrivateModifier */
    ASTPrivateModifier jjtn000 = new ASTPrivateModifier(JJTPRIVATEMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) PrivateModifier */
    try {
/*@egen*/
    t = <Private>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SealedModifier():
{/*@bgen(jjtree) SealedModifier */
    ASTSealedModifier jjtn000 = new ASTSealedModifier(JJTSEALEDMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SealedModifier */
    try {
/*@egen*/
    t = <Sealed>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LazyModifier():
{/*@bgen(jjtree) LazyModifier */
    ASTLazyModifier jjtn000 = new ASTLazyModifier(JJTLAZYMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) LazyModifier */
    try {
/*@egen*/
    t = <Lazy>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OpModifier():
{/*@bgen(jjtree) OpModifier */
    ASTOpModifier jjtn000 = new ASTOpModifier(JJTOPMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) OpModifier */
    try {
/*@egen*/
    t = <Operator>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryOpModifier():
{/*@bgen(jjtree) UnaryOpModifier */
    ASTUnaryOpModifier jjtn000 = new ASTUnaryOpModifier(JJTUNARYOPMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) UnaryOpModifier */
    try {
/*@egen*/
    t = <UnaryOperator>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VariableModifier():
{/*@bgen(jjtree) VariableModifier */
    ASTVariableModifier jjtn000 = new ASTVariableModifier(JJTVARIABLEMODIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) VariableModifier */
    try {
/*@egen*/
    t = <Variable>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryPlus():
{/*@bgen(jjtree) UnaryPlus */
    ASTUnaryPlus jjtn000 = new ASTUnaryPlus(JJTUNARYPLUS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) UnaryPlus */
    try {
/*@egen*/
    t = <Plus>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryBang():
{/*@bgen(jjtree) UnaryBang */
    ASTUnaryBang jjtn000 = new ASTUnaryBang(JJTUNARYBANG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) UnaryBang */
    try {
/*@egen*/
    t = <Bang>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryMinus():
{/*@bgen(jjtree) UnaryMinus */
    ASTUnaryMinus jjtn000 = new ASTUnaryMinus(JJTUNARYMINUS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) UnaryMinus */
    try {
/*@egen*/
    t = <Minus>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NewLineToken():
{/*@bgen(jjtree) NewLineToken */
  ASTNewLineToken jjtn000 = new ASTNewLineToken(JJTNEWLINETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NewLineToken */
    try {
/*@egen*/
    <NewLine>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Star():
{/*@bgen(jjtree) Star */
    ASTStar jjtn000 = new ASTStar(JJTSTAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Star */
    try {
/*@egen*/
    t = <Star>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Slash():
{/*@bgen(jjtree) Slash */
    ASTSlash jjtn000 = new ASTSlash(JJTSLASH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Slash */
    try {
/*@egen*/
    t = <Slash>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Percent():
{/*@bgen(jjtree) Percent */
    ASTPercent jjtn000 = new ASTPercent(JJTPERCENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Percent */
    try {
/*@egen*/
    t = <Percent>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SafeDiv():
{/*@bgen(jjtree) SafeDiv */
    ASTSafeDiv jjtn000 = new ASTSafeDiv(JJTSAFEDIV);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SafeDiv */
    try {
/*@egen*/
    t = <SafeDiv>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SafeRem():
{/*@bgen(jjtree) SafeRem */
    ASTSafeRem jjtn000 = new ASTSafeRem(JJTSAFEREM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SafeRem */
    try {
/*@egen*/
    t = <SafeRem>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Hat():
{/*@bgen(jjtree) Hat */
    ASTHat jjtn000 = new ASTHat(JJTHAT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Hat */
    try {
/*@egen*/
    t = <Hat>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Plus():
{/*@bgen(jjtree) Plus */
    ASTPlus jjtn000 = new ASTPlus(JJTPLUS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Plus */
    try {
/*@egen*/
    t = <Plus>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Minus():
{/*@bgen(jjtree) Minus */
    ASTMinus jjtn000 = new ASTMinus(JJTMINUS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Minus */
    try {
/*@egen*/
    t = <Minus>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EqualTo():
{/*@bgen(jjtree) EqualTo */
    ASTEqualTo jjtn000 = new ASTEqualTo(JJTEQUALTO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) EqualTo */
    try {
/*@egen*/
    t = <EqualTo>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NotEqualTo():
{/*@bgen(jjtree) NotEqualTo */
    ASTNotEqualTo jjtn000 = new ASTNotEqualTo(JJTNOTEQUALTO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) NotEqualTo */
    try {
/*@egen*/
    t = <NotEqualTo>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreaterThan():
{/*@bgen(jjtree) GreaterThan */
    ASTGreaterThan jjtn000 = new ASTGreaterThan(JJTGREATERTHAN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) GreaterThan */
    try {
/*@egen*/
    t = <Gt>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LessThan():
{/*@bgen(jjtree) LessThan */
    ASTLessThan jjtn000 = new ASTLessThan(JJTLESSTHAN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) LessThan */
    try {
/*@egen*/
    t = <Lt>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreaterThanEqualTo():
{/*@bgen(jjtree) GreaterThanEqualTo */
    ASTGreaterThanEqualTo jjtn000 = new ASTGreaterThanEqualTo(JJTGREATERTHANEQUALTO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) GreaterThanEqualTo */
    try {
/*@egen*/
    t = <GtE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LessThanEqualTo():
{/*@bgen(jjtree) LessThanEqualTo */
    ASTLessThanEqualTo jjtn000 = new ASTLessThanEqualTo(JJTLESSTHANEQUALTO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) LessThanEqualTo */
    try {
/*@egen*/
    t = <LtE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Comparable():
{/*@bgen(jjtree) Comparable */
    ASTComparable jjtn000 = new ASTComparable(JJTCOMPARABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Comparable */
    try {
/*@egen*/
    t = <Comparable>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NonComparable():
{/*@bgen(jjtree) NonComparable */
    ASTNonComparable jjtn000 = new ASTNonComparable(JJTNONCOMPARABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) NonComparable */
    try {
/*@egen*/
    t = <NonComparable>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void And():
{/*@bgen(jjtree) And */
    ASTAnd jjtn000 = new ASTAnd(JJTAND);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) And */
    try {
/*@egen*/
    t = <And>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Or():
{/*@bgen(jjtree) Or */
    ASTOr jjtn000 = new ASTOr(JJTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Or */
    try {
/*@egen*/
    t = <Or>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void BoolLiteral():
{/*@bgen(jjtree) BoolLiteral */
    ASTBoolLiteral jjtn000 = new ASTBoolLiteral(JJTBOOLLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) BoolLiteral */
    try {
/*@egen*/
    t = <BoolLiteral>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void IntLiteral():
{/*@bgen(jjtree) IntLiteral */
    ASTIntLiteral jjtn000 = new ASTIntLiteral(JJTINTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) IntLiteral */
    try {
/*@egen*/
    t = <IntLiteral>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }
    | t = <Hexadecimal>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FloatLiteral():
{/*@bgen(jjtree) FloatLiteral */
    ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) FloatLiteral */
    try {
/*@egen*/
    t = <FloatLiteral>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StringLiteral():
{/*@bgen(jjtree) StringLiteral */
    ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    t = <StringLiteral>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TupleLiteral():
{/*@bgen(jjtree) TupleLiteral */
    ASTTupleLiteral jjtn000 = new ASTTupleLiteral(JJTTUPLELITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) TupleLiteral */
    try {
/*@egen*/
    t = "#" <LeftParen> (LOOKAHEAD(2) Identifier() | LOOKAHEAD(2) Expression())* <RightParen>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UndefinedLiteral():
{/*@bgen(jjtree) UndefinedLiteral */
    ASTUndefinedLiteral jjtn000 = new ASTUndefinedLiteral(JJTUNDEFINEDLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) UndefinedLiteral */
    try {
/*@egen*/
    t = <Undefined>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SingleArrow():
{/*@bgen(jjtree) SingleArrow */
    ASTSingleArrow jjtn000 = new ASTSingleArrow(JJTSINGLEARROW);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SingleArrow */
    try {
/*@egen*/
    t = <SingleArrow> | t = <SingleArrowChar>/*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                              }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Assign():
{/*@bgen(jjtree) Assign */
    ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Assign */
    try {
/*@egen*/
    t = <EqualSign>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClosedRange():
{/*@bgen(jjtree) ClosedRange */
    ASTClosedRange jjtn000 = new ASTClosedRange(JJTCLOSEDRANGE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) ClosedRange */
    try {
/*@egen*/
    t = <ClosedRange>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void HalfOpenRange():
{/*@bgen(jjtree) HalfOpenRange */
    ASTHalfOpenRange jjtn000 = new ASTHalfOpenRange(JJTHALFOPENRANGE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) HalfOpenRange */
    try {
/*@egen*/
    t = <HalfOpenRange>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AA():
{/*@bgen(jjtree) AA */
    ASTAA jjtn000 = new ASTAA(JJTAA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) AA */
    try {
/*@egen*/
    t = <AA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SA():
{/*@bgen(jjtree) SA */
    ASTSA jjtn000 = new ASTSA(JJTSA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) SA */
    try {
/*@egen*/
    t = <SA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MA():
{/*@bgen(jjtree) MA */
    ASTMA jjtn000 = new ASTMA(JJTMA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) MA */
    try {
/*@egen*/
    t = <MA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DA():
{/*@bgen(jjtree) DA */
    ASTDA jjtn000 = new ASTDA(JJTDA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) DA */
    try {
/*@egen*/
    t = <DA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RA():
{/*@bgen(jjtree) RA */
    ASTRA jjtn000 = new ASTRA(JJTRA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) RA */
    try {
/*@egen*/
    t = <RA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {
        jjtn000.jjtSetValue(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}