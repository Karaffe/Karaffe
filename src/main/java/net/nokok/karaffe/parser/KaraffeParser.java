/* KaraffeParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. KaraffeParser.java */
package net.nokok.karaffe.parser;

public class KaraffeParser/*@bgen(jjtree)*/ implements KaraffeParserTreeConstants, KaraffeParserConstants {/*@bgen(jjtree)*/


    protected JJTKaraffeParserState jjtree = new JJTKaraffeParserState();

    public KaraffeParser(String sourceCode) {
        this(new java.io.StringReader(sourceCode));
    }

    public int getCurrentTokenBeginColumn() {
        return jj_input_stream.getBeginColumn();
    }

    public int getCurrentTokenEndColumn() {
        return jj_input_stream.getEndColumn();
    }

    public int getCurrentLine() {
        return jj_input_stream.getEndLine();
    }

    final public ASTCompileUnit CompileUnit() throws ParseException {/*@bgen(jjtree) CompileUnit */

        ASTCompileUnit jjtn000 = new ASTCompileUnit(JJTCOMPILEUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_1:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Interface:
                    case Type:
                    case Identifier:
                    case NewLine: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Interface:
                    case Type:
                    case Identifier: {
                        Statement();
                        break;
                    }
                    case NewLine: {
                        NewLine();
                        break;
                    }
                    default:
                        jj_la1[1] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if ("" != null) {
                    return jjtn000;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

//Statement
    /**
     Statement = Declaration
     */
    final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */

        ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Declaration();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

// Declaration
    /**
     Declaration = TypeDcl
     | InterfaceDcl
     | VariableDcl
     */
    final public void Declaration() throws ParseException {/*@bgen(jjtree) Declaration */

        ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_1(3)) {
                TypeDcl();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Interface: {
                        InterfaceDcl();
                        break;
                    }
                    case Identifier: {
                        VariableDcl();
                        break;
                    }
                    default:
                        jj_la1[2] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     TypeDcl         = SimpleTypeDcl
     | TypeAlias
     | Inheritance
     SimpleTypeDcl   = "type" Identifier TypeParameters?
     TypeAlias       = SimpleTypeDcl "=" (Identifier TypeParameters?)+
     Inheritance     = SimpleTypeDcl "<" (Identifier TypeParameters?)+

     e.g.
     type Foo

     type Bar[A]

     type Baz[A B C]

     //TypeAlias
     type Foo = Bar

     type Foo[A] = Bar[A]

     //Inheritance
     type Foo < Bar

     type Foo[A] < Bar[A]

     */
    final public void TypeDcl() throws ParseException {/*@bgen(jjtree) TypeDcl */

        ASTTypeDcl jjtn000 = new ASTTypeDcl(JJTTYPEDCL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Type);
            Identifier();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LeftBracket: {
                    TypeParameters();
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    ;
            }
            label_2:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case EqualSign:
                    case Lt: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[4] = jj_gen;
                        break label_2;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case EqualSign: {
                        EqualOperator();
                        break;
                    }
                    case Lt: {
                        LessThanOperator();
                        break;
                    }
                    default:
                        jj_la1[5] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                label_3:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case Identifier: {
                            ;
                            break;
                        }
                        default:
                            jj_la1[6] = jj_gen;
                            break label_3;
                    }
                    Identifier();
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case LeftBracket: {
                            TypeParameters();
                            break;
                        }
                        default:
                            jj_la1[7] = jj_gen;
                            ;
                    }
                }
            }
            NewLine();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     InterfaceDcl = "interface" InterfaceName TypeParameters? NewLine

     e.g.
     interface Foo

     interface Foo[A]
     */
    final public void InterfaceDcl() throws ParseException {/*@bgen(jjtree) InterfaceDcl */

        ASTInterfaceDcl jjtn000 = new ASTInterfaceDcl(JJTINTERFACEDCL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Interface);
            Identifier();
            NewLine();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     VariableDcl     = Identifier TypeParameters? VariableTypeDcl? "=" Expression? NewLine
     VariableTypeDcl = VariableType
     | FunctionType

     e.g.
     varName

     varName = Expr

     varName : TypeName = Expr

     functionName : TypeName to TypeName = Expr

     functionName[T] : T to T = Expr

     funcName[T < Num] : T to T = Expr

     funcName[A B] : A to B = Expr

     funcName[A > Num] : A to A = Expr

     funcName[A < Num B] : A to B = Expr

     */
    final public void VariableDcl() throws ParseException {/*@bgen(jjtree) VariableDcl */

        ASTVariableDcl jjtn000 = new ASTVariableDcl(JJTVARIABLEDCL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Identifier();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LeftBracket: {
                    TypeParameters();
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Colon: {
                    jj_consume_token(Colon);
                    VariableTypeDcl();
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    ;
            }
            EqualOperator();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Undefined:
                case BoolLiteral:
                case IntLiteral:
                case FloatLiteral:
                case StringLiteral:
                case Identifier:
                case LeftBracket:
                case LeftParen:
                case Minus:
                case Tilde:
                case Bang: {
                    Expression();
                    break;
                }
                default:
                    jj_la1[10] = jj_gen;
                    ;
            }
            NewLine();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     VariableTypeDcl = (Identifier TypeParameters?)+ ("to" Identifier TypeParameters?)?

     e.g.
     TypeName

     TypeName to TypeName

     TypeName1 TypeName2 to TypeName

     TypeName[A] to TypeName

     TypeName[A] to TypeName[A]

     */
    final public void VariableTypeDcl() throws ParseException {/*@bgen(jjtree) VariableTypeDcl */

        ASTVariableTypeDcl jjtn000 = new ASTVariableTypeDcl(JJTVARIABLETYPEDCL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_4:
            while (true) {
                Identifier();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LeftBracket: {
                        TypeParameters();
                        break;
                    }
                    default:
                        jj_la1[11] = jj_gen;
                        ;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Identifier: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[12] = jj_gen;
                        break label_4;
                }
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case To: {
                    jj_consume_token(To);
                    Identifier();
                    TypeParameters();
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     TypeParameters = "[" TypeParameter1 TypeParameter2 ... "]"
     */
    final public void TypeParameters() throws ParseException {/*@bgen(jjtree) TypeParameters */

        ASTTypeParameters jjtn000 = new ASTTypeParameters(JJTTYPEPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            LeftBracket();
            label_5:
            while (true) {
                TypeParameter();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Identifier: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[14] = jj_gen;
                        break label_5;
                }
            }
            RightBracket();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     TypeParameter = BoundedTypes
     | Identifier
     BoundedTypes  = Identifier Lt/GtOperator Identifier
     */
    final public void TypeParameter() throws ParseException {/*@bgen(jjtree) TypeParameter */

        ASTTypeParameter jjtn000 = new ASTTypeParameter(JJTTYPEPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Identifier();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Lt:
                case Gt: {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case Lt: {
                            LessThanOperator();
                            break;
                        }
                        case Gt: {
                            GreaterThanOperator();
                            break;
                        }
                        default:
                            jj_la1[15] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    Identifier();
                    break;
                }
                default:
                    jj_la1[16] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

//Expressions
    /**
     Expression = ConditionalExpressionsOrAssign

     Expressionの評価優先度
     低い順から
     AssignExpr =
     ↓
     OrOperatorExpr |
     ↓
     AndOperatorExpr &
     ↓
     EqualityOperatorExpr == !=
     ↓
     ComparisonOperatorExpr <= >= < >
     ↓
     AdditiveOperatorExpr + -
     ↓
     MultiplyOperatorExpr * / /? % %?
     ↓
     UnaryOperatorExpr - ~ !
     ↓
     ArrayElement //未実装
     ↓
     FunctionApply

     */
    final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */

        ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            AssignExpr();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AssignExpr() throws ParseException {/*@bgen(jjtree) AssignExpr */

        ASTAssignExpr jjtn000 = new ASTAssignExpr(JJTASSIGNEXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            OrOperatorExpr();
            label_6:
            while (true) {
                if (jj_2_2(2)) {
                    ;
                } else {
                    break label_6;
                }
                EqualOperator();
                OrOperatorExpr();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void OrOperatorExpr() throws ParseException {/*@bgen(jjtree) OrOperatorExpr */

        ASTOrOperatorExpr jjtn000 = new ASTOrOperatorExpr(JJTOROPERATOREXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            AndOperatorExpr();
            label_7:
            while (true) {
                if (jj_2_3(2)) {
                    ;
                } else {
                    break label_7;
                }
                OrOperator();
                AndOperatorExpr();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AndOperatorExpr() throws ParseException {/*@bgen(jjtree) AndOperatorExpr */

        ASTAndOperatorExpr jjtn000 = new ASTAndOperatorExpr(JJTANDOPERATOREXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            EqualityOperatorExpr();
            label_8:
            while (true) {
                if (jj_2_4(2)) {
                    ;
                } else {
                    break label_8;
                }
                AndOperator();
                EqualityOperatorExpr();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void EqualityOperatorExpr() throws ParseException {/*@bgen(jjtree) EqualityOperatorExpr */

        ASTEqualityOperatorExpr jjtn000 = new ASTEqualityOperatorExpr(JJTEQUALITYOPERATOREXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            ComparisonOperatorExpr();
            label_9:
            while (true) {
                if (jj_2_5(2)) {
                    ;
                } else {
                    break label_9;
                }
                EqualOperator();
                ComparisonOperatorExpr();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ComparisonOperatorExpr() throws ParseException {/*@bgen(jjtree) ComparisonOperatorExpr */

        ASTComparisonOperatorExpr jjtn000 = new ASTComparisonOperatorExpr(JJTCOMPARISONOPERATOREXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            AdditiveOperatorExpr();
            label_10:
            while (true) {
                if (jj_2_6(2)) {
                    ;
                } else {
                    break label_10;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case EqualTo: {
                        EqualTo();
                        break;
                    }
                    case NotEqualTo: {
                        NotEqualTo();
                        break;
                    }
                    case Gt: {
                        GreaterThanOperator();
                        break;
                    }
                    case Lt: {
                        LessThanOperator();
                        break;
                    }
                    default:
                        jj_la1[17] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                AdditiveOperatorExpr();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AdditiveOperatorExpr() throws ParseException {/*@bgen(jjtree) AdditiveOperatorExpr */

        ASTAdditiveOperatorExpr jjtn000 = new ASTAdditiveOperatorExpr(JJTADDITIVEOPERATOREXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            MultiplyOperatorExpr();
            label_11:
            while (true) {
                if (jj_2_7(2)) {
                    ;
                } else {
                    break label_11;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Plus: {
                        Plus();
                        break;
                    }
                    case Minus: {
                        Minus();
                        break;
                    }
                    default:
                        jj_la1[18] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                MultiplyOperatorExpr();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void MultiplyOperatorExpr() throws ParseException {/*@bgen(jjtree) MultiplyOperatorExpr */

        ASTMultiplyOperatorExpr jjtn000 = new ASTMultiplyOperatorExpr(JJTMULTIPLYOPERATOREXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            UnaryOperatorExpr();
            label_12:
            while (true) {
                if (jj_2_8(2)) {
                    ;
                } else {
                    break label_12;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Star: {
                        StarOperator();
                        break;
                    }
                    case Slash: {
                        SlashOperator();
                        break;
                    }
                    case Percent: {
                        PercentOperator();
                        break;
                    }
                    case SafeDiv: {
                        SafeDiv();
                        break;
                    }
                    case SafeRem: {
                        SafeRem();
                        break;
                    }
                    default:
                        jj_la1[19] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                UnaryOperatorExpr();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UnaryOperatorExpr() throws ParseException {/*@bgen(jjtree) UnaryOperatorExpr */

        ASTUnaryOperatorExpr jjtn000 = new ASTUnaryOperatorExpr(JJTUNARYOPERATOREXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Minus: {
                    Minus();
                    UnaryOperatorExpr();
                    break;
                }
                case Tilde: {
                    TildeOperator();
                    UnaryOperatorExpr();
                    break;
                }
                case Bang: {
                    BangOperator();
                    UnaryOperatorExpr();
                    break;
                }
                case LeftParen: {
                    LeftParen();
                    AssignExpr();
                    RightParen();
                    break;
                }
                case Undefined:
                case BoolLiteral:
                case IntLiteral:
                case FloatLiteral:
                case StringLiteral:
                case Identifier:
                case LeftBracket: {
                    FunctionApply();
                    if (jj_2_9(2)) {
                        UnaryOperatorExpr();
                    } else {
                        ;
                    }
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FunctionApply() throws ParseException {/*@bgen(jjtree) FunctionApply */

        ASTFunctionApply jjtn000 = new ASTFunctionApply(JJTFUNCTIONAPPLY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Identifier: {
                    label_13:
                    while (true) {
                        Identifier();
                        if (jj_2_10(2)) {
                            ;
                        } else {
                            break label_13;
                        }
                    }
                    Expression();
                    break;
                }
                case Undefined:
                case BoolLiteral:
                case IntLiteral:
                case FloatLiteral:
                case StringLiteral:
                case LeftBracket: {
                    Literal();
                    break;
                }
                default:
                    jj_la1[21] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     Literal = BoolLiteral
     | IntLiteral
     | FloatLiteral
     | StringLiteral
     | UndefinedLiteral
     */
    final public void Literal() throws ParseException {/*@bgen(jjtree) Literal */

        ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BoolLiteral: {
                    t = jj_consume_token(BoolLiteral);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                case IntLiteral: {
                    t = jj_consume_token(IntLiteral);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                case FloatLiteral: {
                    t = jj_consume_token(FloatLiteral);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                case StringLiteral: {
                    t = jj_consume_token(StringLiteral);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                case Undefined: {
                    t = jj_consume_token(Undefined);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                case LeftBracket: {
                    FunctionLiteral();
                    break;
                }
                default:
                    jj_la1[22] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     FunctionLiteral = "[" FunctionVariableBinding "]" "=>" "{"? Expression "}"?

     e.g.

     [] => {...}
     */
    final public void FunctionLiteral() throws ParseException {/*@bgen(jjtree) FunctionLiteral */

        ASTFunctionLiteral jjtn000 = new ASTFunctionLiteral(JJTFUNCTIONLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            LeftBracket();
            label_14:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Identifier: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[23] = jj_gen;
                        break label_14;
                }
                FunctionVariableBinding();
            }
            RightBracket();
            ArrowOperator();
            LeftBrace();
            Expression();
            RightBrace();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     FunctionVariableBinding = Identifier
     | DefaultValueBinding
     | ExplicitTypeBinding
     | ExplicitTypeDefaultBinding
     DefaultValueBinding     = Identifier "=" Literal
     ExplicitTypeBinding     = Identifier ":" Identifier
     ExplicitTypeDefaultBinding = ExplicitTypeBinding "=" Literal

     */
    final public void FunctionVariableBinding() throws ParseException {/*@bgen(jjtree) FunctionVariableBinding */

        ASTFunctionVariableBinding jjtn000 = new ASTFunctionVariableBinding(JJTFUNCTIONVARIABLEBINDING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Identifier();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Colon: {
                    jj_consume_token(Colon);
                    Identifier();
                    EqualOperator();
                    Literal();
                    break;
                }
                default:
                    jj_la1[24] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

//Identifiers
    /**
     Identifier = IdentifierHead IdentifierCharacter
     */
    final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */

        ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Identifier);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

//Delimiters
    final public
            void LeftBracket() throws ParseException {/*@bgen(jjtree) LeftBracket */

        ASTLeftBracket jjtn000 = new ASTLeftBracket(JJTLEFTBRACKET);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftBracket);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void RightBracket() throws ParseException {/*@bgen(jjtree) RightBracket */

        ASTRightBracket jjtn000 = new ASTRightBracket(JJTRIGHTBRACKET);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(RightBracket);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LeftBrace() throws ParseException {/*@bgen(jjtree) LeftBrace */

        ASTLeftBrace jjtn000 = new ASTLeftBrace(JJTLEFTBRACE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftBrace);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void RightParen() throws ParseException {/*@bgen(jjtree) RightParen */

        ASTRightParen jjtn000 = new ASTRightParen(JJTRIGHTPAREN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(RightParen);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LeftParen() throws ParseException {/*@bgen(jjtree) LeftParen */

        ASTLeftParen jjtn000 = new ASTLeftParen(JJTLEFTPAREN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftParen);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void RightBrace() throws ParseException {/*@bgen(jjtree) RightBrace */

        ASTRightBrace jjtn000 = new ASTRightBrace(JJTRIGHTBRACE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(RightBrace);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Colon() throws ParseException {/*@bgen(jjtree) Colon */

        ASTColon jjtn000 = new ASTColon(JJTCOLON);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Colon);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Dot() throws ParseException {/*@bgen(jjtree) Dot */

        ASTDot jjtn000 = new ASTDot(JJTDOT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Dot);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

//Operators
    final public
            void EqualOperator() throws ParseException {/*@bgen(jjtree) EqualOperator */

        ASTEqualOperator jjtn000 = new ASTEqualOperator(JJTEQUALOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(EqualSign);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LessThanOperator() throws ParseException {/*@bgen(jjtree) LessThanOperator */

        ASTLessThanOperator jjtn000 = new ASTLessThanOperator(JJTLESSTHANOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Lt);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LessThanEqualToOperator() throws ParseException {/*@bgen(jjtree) LessThanEqualToOperator */

        ASTLessThanEqualToOperator jjtn000 = new ASTLessThanEqualToOperator(JJTLESSTHANEQUALTOOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LtE);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void GreaterThanOperator() throws ParseException {/*@bgen(jjtree) GreaterThanOperator */

        ASTGreaterThanOperator jjtn000 = new ASTGreaterThanOperator(JJTGREATERTHANOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Gt);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void GreaterThanEqualToOperator() throws ParseException {/*@bgen(jjtree) GreaterThanEqualToOperator */

        ASTGreaterThanEqualToOperator jjtn000 = new ASTGreaterThanEqualToOperator(JJTGREATERTHANEQUALTOOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(GtE);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Plus() throws ParseException {/*@bgen(jjtree) Plus */

        ASTPlus jjtn000 = new ASTPlus(JJTPLUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Plus);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Minus() throws ParseException {/*@bgen(jjtree) Minus */

        ASTMinus jjtn000 = new ASTMinus(JJTMINUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Minus);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void StarOperator() throws ParseException {/*@bgen(jjtree) StarOperator */

        ASTStarOperator jjtn000 = new ASTStarOperator(JJTSTAROPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Star);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SlashOperator() throws ParseException {/*@bgen(jjtree) SlashOperator */

        ASTSlashOperator jjtn000 = new ASTSlashOperator(JJTSLASHOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Slash);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void PercentOperator() throws ParseException {/*@bgen(jjtree) PercentOperator */

        ASTPercentOperator jjtn000 = new ASTPercentOperator(JJTPERCENTOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Percent);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TildeOperator() throws ParseException {/*@bgen(jjtree) TildeOperator */

        ASTTildeOperator jjtn000 = new ASTTildeOperator(JJTTILDEOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Tilde);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void BangOperator() throws ParseException {/*@bgen(jjtree) BangOperator */

        ASTBangOperator jjtn000 = new ASTBangOperator(JJTBANGOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Bang);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AndOperator() throws ParseException {/*@bgen(jjtree) AndOperator */

        ASTAndOperator jjtn000 = new ASTAndOperator(JJTANDOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(And);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void OrOperator() throws ParseException {/*@bgen(jjtree) OrOperator */

        ASTOrOperator jjtn000 = new ASTOrOperator(JJTOROPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Or);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void HatOperator() throws ParseException {/*@bgen(jjtree) HatOperator */

        ASTHatOperator jjtn000 = new ASTHatOperator(JJTHATOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Hat);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void QuestionOperator() throws ParseException {/*@bgen(jjtree) QuestionOperator */

        ASTQuestionOperator jjtn000 = new ASTQuestionOperator(JJTQUESTIONOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Question);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ArrowOperator() throws ParseException {/*@bgen(jjtree) ArrowOperator */

        ASTArrowOperator jjtn000 = new ASTArrowOperator(JJTARROWOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Arrow);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void EqualTo() throws ParseException {/*@bgen(jjtree) EqualTo */

        ASTEqualTo jjtn000 = new ASTEqualTo(JJTEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(EqualTo);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void NotEqualTo() throws ParseException {/*@bgen(jjtree) NotEqualTo */

        ASTNotEqualTo jjtn000 = new ASTNotEqualTo(JJTNOTEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(NotEqualTo);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SafeDiv() throws ParseException {/*@bgen(jjtree) SafeDiv */

        ASTSafeDiv jjtn000 = new ASTSafeDiv(JJTSAFEDIV);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(SafeDiv);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SafeRem() throws ParseException {/*@bgen(jjtree) SafeRem */

        ASTSafeRem jjtn000 = new ASTSafeRem(JJTSAFEREM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(SafeRem);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

//Other tokens
    final public
            void NewLine() throws ParseException {/*@bgen(jjtree) NewLine */

        ASTNewLine jjtn000 = new ASTNewLine(JJTNEWLINE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(NewLine);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_3R_69() {
        if (jj_3R_64()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_scan_token(EqualSign)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_62() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_78() {
        if (jj_scan_token(RightBracket)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_3R_65()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_3R_51()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_65() {
        if (jj_scan_token(LeftBracket)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_3R_50()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_37() {
        if (jj_scan_token(Identifier)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(NewLine)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_79() {
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_51() {
        if (jj_scan_token(SafeRem)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_77() {
        if (jj_3R_79()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_3R_49()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_scan_token(SafeDiv)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_58() {
        if (jj_3R_16()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_39() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_58()) {
            jj_scanpos = xsp;
            if (jj_3R_59()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_scan_token(NotEqualTo)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_76() {
        if (jj_3R_65()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_77()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_78()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_41() {
        if (jj_scan_token(EqualTo)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_3R_43()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_3R_48()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_75() {
        if (jj_3R_76()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_3R_57()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_74() {
        if (jj_scan_token(Undefined)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_scan_token(StringLiteral)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_3R_46()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_72() {
        if (jj_scan_token(FloatLiteral)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_3R_42()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_scan_token(IntLiteral)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_68() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_70()) {
            jj_scanpos = xsp;
            if (jj_3R_71()) {
                jj_scanpos = xsp;
                if (jj_3R_72()) {
                    jj_scanpos = xsp;
                    if (jj_3R_73()) {
                        jj_scanpos = xsp;
                        if (jj_3R_74()) {
                            jj_scanpos = xsp;
                            if (jj_3R_75()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_70() {
        if (jj_scan_token(BoolLiteral)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_scan_token(Or)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_45()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_20() {
        if (jj_scan_token(And)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_15() {
        if (jj_scan_token(Type)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_38()) {
            jj_scanpos = xsp;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_39()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_40()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_61() {
        if (jj_scan_token(Bang)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_8() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_31()) {
            jj_scanpos = xsp;
            if (jj_3R_32()) {
                jj_scanpos = xsp;
                if (jj_3R_33()) {
                    jj_scanpos = xsp;
                    if (jj_3R_34()) {
                        jj_scanpos = xsp;
                        if (jj_3R_35()) {
                            return true;
                        }
                    }
                }
            }
        }
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_67() {
        if (jj_3R_68()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_7() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_28()) {
            jj_scanpos = xsp;
            if (jj_3R_29()) {
                return true;
            }
        }
        if (jj_3R_30()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_10() {
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_63() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_66()) {
            jj_scanpos = xsp;
            if (jj_3R_67()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_66() {
        Token xsp;
        if (jj_3_10()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_10()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_69()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_60() {
        if (jj_scan_token(Tilde)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_6() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_23()) {
            jj_scanpos = xsp;
            if (jj_3R_24()) {
                jj_scanpos = xsp;
                if (jj_3R_25()) {
                    jj_scanpos = xsp;
                    if (jj_3R_26()) {
                        return true;
                    }
                }
            }
        }
        if (jj_3R_27()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_3R_63()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_9()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_55() {
        if (jj_3R_62()) {
            return true;
        }
        if (jj_3R_64()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_54() {
        if (jj_3R_61()) {
            return true;
        }
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_49() {
        if (jj_scan_token(Percent)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_53() {
        if (jj_3R_60()) {
            return true;
        }
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_16()) {
            return true;
        }
        if (jj_3R_22()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_36() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_52()) {
            jj_scanpos = xsp;
            if (jj_3R_53()) {
                jj_scanpos = xsp;
                if (jj_3R_54()) {
                    jj_scanpos = xsp;
                    if (jj_3R_55()) {
                        jj_scanpos = xsp;
                        if (jj_3R_56()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_52() {
        if (jj_3R_46()) {
            return true;
        }
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_scan_token(Slash)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_20()) {
            return true;
        }
        if (jj_3R_21()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_47() {
        if (jj_scan_token(Star)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_15()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_3R_30()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_scan_token(Minus)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_18()) {
            return true;
        }
        if (jj_3R_19()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_22() {
        if (jj_3R_27()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_scan_token(Plus)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_16()) {
            return true;
        }
        if (jj_3R_17()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_21() {
        if (jj_3R_22()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_21()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_scan_token(Gt)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_17() {
        if (jj_3R_19()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_64() {
        if (jj_3R_17()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_scan_token(Lt)) {
            return true;
        }
        return false;
    }

    /** Generated Token Manager. */
    public KaraffeParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[25];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x10004200, 0x10004200, 0x10000200, 0x0, 0x0, 0x0, 0x10000000, 0x0, 0x0, 0x0, 0x11138000, 0x0, 0x10000000, 0x2000, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11138000, 0x11138000, 0x1138000, 0x10000000, 0x0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x20000000, 0x20000000, 0x0, 0x1, 0x300, 0x300, 0x0, 0x1, 0x1, 0x40, 0x304011, 0x1, 0x0, 0x0, 0x0, 0xa00, 0xa00, 0x18000a00, 0x6000, 0xf8000, 0x304011, 0x1, 0x1, 0x0, 0x40,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[10];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public KaraffeParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public KaraffeParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new KaraffeParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor. */
    public KaraffeParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new KaraffeParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor with generated Token Manager. */
    public KaraffeParser(KaraffeParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(KaraffeParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 25; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[62];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 25; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 62; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 10; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
