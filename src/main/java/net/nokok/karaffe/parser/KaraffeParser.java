/* KaraffeParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. KaraffeParser.java */
package net.nokok.karaffe.parser;

public class KaraffeParser/*@bgen(jjtree)*/ implements KaraffeParserTreeConstants, KaraffeParserConstants {/*@bgen(jjtree)*/


    protected JJTKaraffeParserState jjtree = new JJTKaraffeParserState();

    public KaraffeParser(String sourceCode) {
        this(new java.io.StringReader(sourceCode));
    }

    public int getCurrentTokenBeginColumn() {
        return jj_input_stream.getBeginColumn();
    }

    public int getCurrentTokenEndColumn() {
        return jj_input_stream.getEndColumn();
    }

    public int getCurrentLine() {
        return jj_input_stream.getEndLine();
    }

    final public void TypeDeclaration() throws ParseException {/*@bgen(jjtree) TypeDeclaration */

        ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BeginDoc: {
                    Documentation();
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    ;
            }
            jj_consume_token(Type);
            TypeElement();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Colon: {
                    jj_consume_token(Colon);
                    SuperType();
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case ReverseArrow: {
                    jj_consume_token(ReverseArrow);
                    Interfaces();
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    ;
            }
            if (jj_2_1(2147483647)) {
                TypeDeclBody();
            } else {
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TypeDeclBody() throws ParseException {/*@bgen(jjtree) TypeDeclBody */

        ASTTypeDeclBody jjtn000 = new ASTTypeDeclBody(JJTTYPEDECLBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            TypeDeclBody1();
            label_1:
            while (true) {
                if (jj_2_2(2147483647)) {
                    ;
                } else {
                    break label_1;
                }
                TypeDeclBody1();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TypeDeclBody1() throws ParseException {
        if (jj_2_3(2147483647)) {
            VariableOrFunctionDeclaration();
        } else if (jj_2_4(2147483647)) {
            Assignment();
        } else if (jj_2_5(2147483647)) {
            MethodInvocation();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void AlgebraicDataTypeDecl() throws ParseException {/*@bgen(jjtree) AlgebraicDataTypeDecl */

        ASTAlgebraicDataTypeDecl jjtn000 = new ASTAlgebraicDataTypeDecl(JJTALGEBRAICDATATYPEDECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BeginDoc: {
                    Documentation();
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    ;
            }
            jj_consume_token(Case);
            jj_consume_token(Type);
            TypeElement();
            jj_consume_token(EqualSign);
            AlgebraicDataTypeDeclBody();
            label_2:
            while (true) {
                jj_consume_token(Or);
                AlgebraicDataTypeDeclBody();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Or: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[4] = jj_gen;
                        break label_2;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AlgebraicDataTypeDeclBody() throws ParseException {/*@bgen(jjtree) AlgebraicDataTypeDeclBody */

        ASTAlgebraicDataTypeDeclBody jjtn000 = new ASTAlgebraicDataTypeDeclBody(JJTALGEBRAICDATATYPEDECLBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Constructor();
            label_3:
            while (true) {
                if (jj_2_6(2147483647)) {
                    ;
                } else {
                    break label_3;
                }
                ExistingTypeOrTParameter();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Constructor() throws ParseException {/*@bgen(jjtree) Constructor */

        ASTConstructor jjtn000 = new ASTConstructor(JJTCONSTRUCTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            TypeElement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ExistingTypeOrTParameter() throws ParseException {/*@bgen(jjtree) ExistingTypeOrTParameter */

        ASTExistingTypeOrTParameter jjtn000 = new ASTExistingTypeOrTParameter(JJTEXISTINGTYPEORTPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_7(2)) {
                TypeElement();
            } else if (jj_2_8(2)) {
                TypeElementBinding();
            } else if (jj_2_9(2)) {
                VarIdentifier();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void InterfaceDeclaration() throws ParseException {/*@bgen(jjtree) InterfaceDeclaration */

        ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(JJTINTERFACEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BeginDoc: {
                    Documentation();
                    break;
                }
                default:
                    jj_la1[5] = jj_gen;
                    ;
            }
            jj_consume_token(Interface);
            TypeElement();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case ReverseArrow: {
                    jj_consume_token(ReverseArrow);
                    Interfaces();
                    break;
                }
                default:
                    jj_la1[6] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TypeAliasDeclaration() throws ParseException {/*@bgen(jjtree) TypeAliasDeclaration */

        ASTTypeAliasDeclaration jjtn000 = new ASTTypeAliasDeclaration(JJTTYPEALIASDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BeginDoc: {
                    Documentation();
                    break;
                }
                default:
                    jj_la1[7] = jj_gen;
                    ;
            }
            jj_consume_token(TypeAlias);
            TypeElement();
            jj_consume_token(Colon);
            TypeElement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FuncAliasDeclaration() throws ParseException {/*@bgen(jjtree) FuncAliasDeclaration */

        ASTFuncAliasDeclaration jjtn000 = new ASTFuncAliasDeclaration(JJTFUNCALIASDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BeginDoc: {
                    Documentation();
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
            jj_consume_token(FuncAlias);
            FuncAliasAfter();
            jj_consume_token(Colon);
            FuncAliasBefore();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FuncAliasAfter() throws ParseException {/*@bgen(jjtree) FuncAliasAfter */

        ASTFuncAliasAfter jjtn000 = new ASTFuncAliasAfter(JJTFUNCALIASAFTER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            VarIdentifier();
            jj_consume_token(LeftParen);
            label_4:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case VarIdentifier:
                    case WildCard: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[9] = jj_gen;
                        break label_4;
                }
                TypeElementBinding();
            }
            jj_consume_token(RightParen);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FuncAliasBefore() throws ParseException {/*@bgen(jjtree) FuncAliasBefore */

        ASTFuncAliasBefore jjtn000 = new ASTFuncAliasBefore(JJTFUNCALIASBEFORE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Identifier();
            label_5:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Dot: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[10] = jj_gen;
                        break label_5;
                }
                jj_consume_token(Dot);
                Identifier();
            }
            jj_consume_token(LeftParen);
            label_6:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case VarIdentifier:
                    case WildCard: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[11] = jj_gen;
                        break label_6;
                }
                VarIdentifier();
            }
            jj_consume_token(RightParen);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void VariableOrFunctionDeclaration() throws ParseException {/*@bgen(jjtree) VariableOrFunctionDeclaration */

        ASTVariableOrFunctionDeclaration jjtn000 = new ASTVariableOrFunctionDeclaration(JJTVARIABLEORFUNCTIONDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BeginDoc: {
                    Documentation();
                    break;
                }
                default:
                    jj_la1[12] = jj_gen;
                    ;
            }
            jj_consume_token(1);
            VarIdentifier();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Colon: {
                    jj_consume_token(Colon);
                    ValueType();
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 1:
                case 2:
                case 4:
                case LeftBracket:
                case LeftParen:
                case Plus:
                case Minus:
                case Bang:
                case BeginDoc:
                case Case:
                case Enum:
                case FuncAlias:
                case Import:
                case Interface:
                case Module:
                case Switch:
                case Type:
                case TypeAlias:
                case Undefined:
                case BoolLiteral:
                case IntLiteral:
                case Hexadecimal:
                case FloatLiteral:
                case StringLiteral:
                case TypeIdentifier:
                case VarIdentifier:
                case WildCard:
                case 96: {
                    FunctionDeclBody();
                    break;
                }
                case EqualSign: {
                    jj_consume_token(EqualSign);
                    Body();
                    break;
                }
                default:
                    jj_la1[14] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FunctionDeclBody() throws ParseException {/*@bgen(jjtree) FunctionDeclBody */

        ASTFunctionDeclBody jjtn000 = new ASTFunctionDeclBody(JJTFUNCTIONDECLBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            FuncDeclBody1();
            label_7:
            while (true) {
                if (jj_2_10(2147483647)) {
                    ;
                } else {
                    break label_7;
                }
                FuncDeclBody1();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FuncDeclBody1() throws ParseException {
        if (jj_2_11(2147483647)) {
            FuncPattern();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 1:
                case 2:
                case 4:
                case BeginDoc:
                case Case:
                case Enum:
                case FuncAlias:
                case Import:
                case Interface:
                case Module:
                case Type:
                case TypeAlias: {
                    Statement();
                    break;
                }
                default:
                    jj_la1[15] = jj_gen;
                    if (jj_2_12(2147483647)) {
                        Expression();
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
        }
    }

    final public void ValueType() throws ParseException {/*@bgen(jjtree) ValueType */

        ASTValueType jjtn000 = new ASTValueType(JJTVALUETYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_8:
            while (true) {
                if (jj_2_13(2)) {
                    TypeElementBinding();
                } else if (jj_2_14(2)) {
                    TypeElement();
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                if (jj_2_15(2147483647)) {
                    ;
                } else {
                    break label_8;
                }
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Star: {
                    ASTVarArgs jjtn001 = new ASTVarArgs(JJTVARARGS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    try {
                        jj_consume_token(Star);
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                        }
                    }
                    break;
                }
                default:
                    jj_la1[16] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SingleArrow: {
                    jj_consume_token(SingleArrow);
                    ReturnType();
                    break;
                }
                default:
                    jj_la1[17] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Body() throws ParseException {/*@bgen(jjtree) Body */

        ASTBody jjtn000 = new ASTBody(JJTBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Expression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FuncPattern() throws ParseException {/*@bgen(jjtree) FuncPattern */

        ASTFuncPattern jjtn000 = new ASTFuncPattern(JJTFUNCPATTERN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            MethodName();
            ArgVariables();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Atmark: {
                    jj_consume_token(Atmark);
                    Guard();
                    break;
                }
                default:
                    jj_la1[18] = jj_gen;
                    ;
            }
            jj_consume_token(DoubleArrow);
            PatternBody();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void PatternBody() throws ParseException {/*@bgen(jjtree) PatternBody */

        ASTPatternBody jjtn000 = new ASTPatternBody(JJTPATTERNBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Expression();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SemiColon: {
                    jj_consume_token(SemiColon);
                    break;
                }
                default:
                    jj_la1[19] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ArgVariables() throws ParseException {/*@bgen(jjtree) ArgVariables */

        ASTArgVariables jjtn000 = new ASTArgVariables(JJTARGVARIABLES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_9:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LeftBracket:
                    case LeftParen:
                    case Undefined:
                    case BoolLiteral:
                    case IntLiteral:
                    case Hexadecimal:
                    case FloatLiteral:
                    case StringLiteral:
                    case VarIdentifier:
                    case WildCard:
                    case 96: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[20] = jj_gen;
                        break label_9;
                }
                ArgVariable();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Colon: {
                        ColonType();
                        break;
                    }
                    default:
                        jj_la1[21] = jj_gen;
                        ;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ArgVariable() throws ParseException {/*@bgen(jjtree) ArgVariable */

        ASTArgVariable jjtn000 = new ASTArgVariable(JJTARGVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_16(2)) {
                WildCard();
            } else if (jj_2_17(2)) {
                VarIdentifier();
            } else if (jj_2_18(2)) {
                Literal();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Guard() throws ParseException {/*@bgen(jjtree) Guard */

        ASTGuard jjtn000 = new ASTGuard(JJTGUARD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Expression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void EnumDeclaration() throws ParseException {/*@bgen(jjtree) EnumDeclaration */

        ASTEnumDeclaration jjtn000 = new ASTEnumDeclaration(JJTENUMDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BeginDoc: {
                    Documentation();
                    break;
                }
                default:
                    jj_la1[22] = jj_gen;
                    ;
            }
            jj_consume_token(Enum);
            TypeIdentifier();
            jj_consume_token(Colon);
            jj_consume_token(LeftBracket);
            EnumElements();
            jj_consume_token(RightBracket);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void EnumElements() throws ParseException {/*@bgen(jjtree) EnumElements */

        ASTEnumElements jjtn000 = new ASTEnumElements(JJTENUMELEMENTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_10:
            while (true) {
                TypeIdentifier();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case TypeIdentifier: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[23] = jj_gen;
                        break label_10;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TypeElement() throws ParseException {/*@bgen(jjtree) TypeElement */

        ASTTypeElement jjtn000 = new ASTTypeElement(JJTTYPEELEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case VarIdentifier:
                case WildCard: {
                    JavaType();
                    break;
                }
                case TypeIdentifier: {
                    TypeWithTypeParams();
                    break;
                }
                default:
                    jj_la1[24] = jj_gen;
                    if (jj_2_19(2)) {
                        FunctionType();
                    } else if (jj_2_20(2)) {
                        ASTUnitType jjtn001 = new ASTUnitType(JJTUNITTYPE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        try {
                            jj_consume_token(LeftParen);
                            jj_consume_token(RightParen);
                        } finally {
                            if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                            }
                        }
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TypeElementBinding() throws ParseException {/*@bgen(jjtree) TypeElementBinding */

        ASTTypeElementBinding jjtn000 = new ASTTypeElementBinding(JJTTYPEELEMENTBINDING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            VarIdentifier();
            jj_consume_token(Colon);
            TypeElement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ExpressionBinding() throws ParseException {/*@bgen(jjtree) ExpressionBinding */

        ASTExpressionBinding jjtn000 = new ASTExpressionBinding(JJTEXPRESSIONBINDING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Expression();
            jj_consume_token(Colon);
            TypeElement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void JavaType() throws ParseException {/*@bgen(jjtree) JavaType */

        ASTJavaType jjtn000 = new ASTJavaType(JJTJAVATYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_11:
            while (true) {
                VarIdentifier();
                jj_consume_token(Dot);
                if (jj_2_21(2147483647)) {
                    ;
                } else {
                    break label_11;
                }
            }
            TypeElement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TypeWithTypeParams() throws ParseException {
        TypeIdentifier();
        if (jj_2_22(2)) {
            TypeParameters();
        } else {
            ;
        }
    }

    final public void FunctionType() throws ParseException {/*@bgen(jjtree) FunctionType */

        ASTFunctionType jjtn000 = new ASTFunctionType(JJTFUNCTIONTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftParen);
            label_12:
            while (true) {
                TypeElement();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LeftParen:
                    case TypeIdentifier:
                    case VarIdentifier:
                    case WildCard: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[25] = jj_gen;
                        break label_12;
                }
            }
            jj_consume_token(SingleArrow);
            ReturnType();
            jj_consume_token(RightParen);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FunctionLiteral() throws ParseException {/*@bgen(jjtree) FunctionLiteral */

        ASTFunctionLiteral jjtn000 = new ASTFunctionLiteral(JJTFUNCTIONLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            FunctionLiteralParameters();
            jj_consume_token(SingleArrow);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LeftBrace: {
                    jj_consume_token(LeftBrace);
                    Expression();
                    jj_consume_token(RightBrace);
                    break;
                }
                case LeftBracket:
                case LeftParen:
                case Plus:
                case Minus:
                case Bang:
                case Switch:
                case Undefined:
                case BoolLiteral:
                case IntLiteral:
                case Hexadecimal:
                case FloatLiteral:
                case StringLiteral:
                case TypeIdentifier:
                case VarIdentifier:
                case WildCard:
                case 96: {
                    Expression();
                    break;
                }
                default:
                    jj_la1[26] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FunctionLiteralParameters() throws ParseException {/*@bgen(jjtree) FunctionLiteralParameters */

        ASTFunctionLiteralParameters jjtn000 = new ASTFunctionLiteralParameters(JJTFUNCTIONLITERALPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case VarIdentifier:
                case WildCard: {
                    VarIdentifier();
                    break;
                }
                case LeftParen: {
                    jj_consume_token(LeftParen);
                    label_13:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case VarIdentifier:
                            case WildCard: {
                                ;
                                break;
                            }
                            default:
                                jj_la1[27] = jj_gen;
                                break label_13;
                        }
                        if (jj_2_23(2)) {
                            TypeElementBinding();
                        } else if (jj_2_24(2)) {
                            VarIdentifier();
                        } else {
                            jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                    jj_consume_token(RightParen);
                    break;
                }
                default:
                    jj_la1[28] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ImportStatement() throws ParseException {/*@bgen(jjtree) ImportStatement */

        ASTImportStatement jjtn000 = new ASTImportStatement(JJTIMPORTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Import);
            label_14:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case TypeIdentifier: {
                        TypeIdentifier();
                        break;
                    }
                    case StringLiteral: {
                        JavaFQCN();
                        break;
                    }
                    default:
                        jj_la1[29] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SingleArrow: {
                        jj_consume_token(SingleArrow);
                        Alias();
                        break;
                    }
                    default:
                        jj_la1[30] = jj_gen;
                        ;
                }
                if (jj_2_25(2)) {
                    ;
                } else {
                    break label_14;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Alias() throws ParseException {/*@bgen(jjtree) Alias */

        ASTAlias jjtn000 = new ASTAlias(JJTALIAS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            TypeIdentifier();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void JavaFQCN() throws ParseException {/*@bgen(jjtree) JavaFQCN */

        ASTJavaFQCN jjtn000 = new ASTJavaFQCN(JJTJAVAFQCN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            StringLiteral();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ExtendsType() throws ParseException {/*@bgen(jjtree) ExtendsType */

        ASTExtendsType jjtn000 = new ASTExtendsType(JJTEXTENDSTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BeginDoc: {
                    Documentation();
                    break;
                }
                default:
                    jj_la1[31] = jj_gen;
                    ;
            }
            jj_consume_token(2);
            TypeElement();
            jj_consume_token(AA);
            VarIdentifier();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TypeParameters() throws ParseException {/*@bgen(jjtree) TypeParameters */

        ASTTypeParameters jjtn000 = new ASTTypeParameters(JJTTYPEPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftBracket);
            label_15:
            while (true) {
                TypeParameter();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LeftParen:
                    case TypeIdentifier:
                    case VarIdentifier:
                    case WildCard: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[32] = jj_gen;
                        break label_15;
                }
            }
            jj_consume_token(RightBracket);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TypeParameter() throws ParseException {/*@bgen(jjtree) TypeParameter */

        ASTTypeParameter jjtn000 = new ASTTypeParameter(JJTTYPEPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_26(2)) {
                TypeElement();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Lt: {
                        TypeBound();
                        break;
                    }
                    default:
                        jj_la1[33] = jj_gen;
                        ;
                }
            } else if (jj_2_27(2)) {
                VarIdentifier();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void TypeBound() throws ParseException {/*@bgen(jjtree) TypeBound */

        ASTTypeBound jjtn000 = new ASTTypeBound(JJTTYPEBOUND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Lt);
            TypeElement();
            label_16:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case And: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[34] = jj_gen;
                        break label_16;
                }
                jj_consume_token(And);
                TypeElement();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ModuleDeclaration() throws ParseException {/*@bgen(jjtree) ModuleDeclaration */

        ASTModuleDeclaration jjtn000 = new ASTModuleDeclaration(JJTMODULEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Module);
            TypeIdentifier();
            ModuleBody();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ModuleBody() throws ParseException {/*@bgen(jjtree) ModuleBody */

        ASTModuleBody jjtn000 = new ASTModuleBody(JJTMODULEBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_28(2147483647)) {
                TypeDeclaration();
            } else if (jj_2_29(2147483647)) {
                VariableOrFunctionDeclaration();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            label_17:
            while (true) {
                if (jj_2_30(2147483647)) {
                    ;
                } else {
                    break label_17;
                }
                if (jj_2_31(2147483647)) {
                    TypeDeclaration();
                } else if (jj_2_32(2147483647)) {
                    VariableOrFunctionDeclaration();
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Literal() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case LeftParen:
            case VarIdentifier:
            case WildCard: {
                FunctionLiteral();
                break;
            }
            case BoolLiteral: {
                BoolLiteral();
                break;
            }
            case IntLiteral:
            case Hexadecimal: {
                IntLiteral();
                break;
            }
            case FloatLiteral: {
                FloatLiteral();
                break;
            }
            case StringLiteral: {
                StringLiteral();
                break;
            }
            case 96: {
                TupleLiteral();
                break;
            }
            case LeftBracket: {
                ListLiteral();
                break;
            }
            case Undefined: {
                UndefinedLiteral();
                break;
            }
            default:
                jj_la1[35] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public ASTCompileUnit CompileUnit() throws ParseException {/*@bgen(jjtree) CompileUnit */

        ASTCompileUnit jjtn000 = new ASTCompileUnit(JJTCOMPILEUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_18:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case 1:
                    case 2:
                    case 4:
                    case LeftBracket:
                    case LeftParen:
                    case SP:
                    case BeginDoc:
                    case Case:
                    case Enum:
                    case FuncAlias:
                    case Import:
                    case Interface:
                    case Module:
                    case Type:
                    case TypeAlias:
                    case Undefined:
                    case BoolLiteral:
                    case IntLiteral:
                    case Hexadecimal:
                    case FloatLiteral:
                    case StringLiteral:
                    case TypeIdentifier:
                    case VarIdentifier:
                    case WildCard:
                    case 96: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[36] = jj_gen;
                        break label_18;
                }
                if (jj_2_33(2147483647)) {
                    Assignment();
                } else if (jj_2_34(2147483647)) {
                    MethodInvocation();
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case 1:
                        case 2:
                        case 4:
                        case BeginDoc:
                        case Case:
                        case Enum:
                        case FuncAlias:
                        case Import:
                        case Interface:
                        case Module:
                        case Type:
                        case TypeAlias: {
                            Statement();
                            break;
                        }
                        case SP: {
                            SP();
                            break;
                        }
                        default:
                            jj_la1[37] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
            }
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if ("" != null) {
                    return jjtn000;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void Statement() throws ParseException {
        if (jj_2_35(2147483647)) {
            Declaration();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Import: {
                    ImportStatement();
                    break;
                }
                default:
                    jj_la1[38] = jj_gen;
                    if (jj_2_36(2147483647)) {
                        ModifierStatement();
                    } else if (jj_2_37(2147483647)) {
                        Documentation();
                    } else if (jj_2_38(2147483647)) {
                        ExtendsType();
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
        }
    }

    final public void Declaration() throws ParseException {
        if (jj_2_39(2147483647)) {
            VariableOrFunctionDeclaration();
        } else if (jj_2_40(2147483647)) {
            TypeDeclaration();
        } else if (jj_2_41(2147483647)) {
            FuncAliasDeclaration();
        } else if (jj_2_42(2147483647)) {
            AlgebraicDataTypeDecl();
        } else if (jj_2_43(2147483647)) {
            InterfaceDeclaration();
        } else if (jj_2_44(2147483647)) {
            TypeAliasDeclaration();
        } else if (jj_2_45(2147483647)) {
            ModuleDeclaration();
        } else if (jj_2_46(2147483647)) {
            EnumDeclaration();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void MethodInvocation() throws ParseException {/*@bgen(jjtree) MethodInvocation */

        ASTMethodInvocation jjtn000 = new ASTMethodInvocation(JJTMETHODINVOCATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_55(2)) {
                ElementAccess();
                Arguments();
                if (jj_2_47(2147483647)) {
                    jj_consume_token(Dot);
                    MethodInvocation();
                } else {
                    ;
                }
            } else if (jj_2_56(2)) {
                MethodName();
                Arguments();
                if (jj_2_48(2147483647)) {
                    jj_consume_token(Dot);
                    MethodInvocation();
                } else {
                    ;
                }
            } else if (jj_2_57(2147483647)) {
                TypeIdentifier();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Dot: {
                        jj_consume_token(Dot);
                        break;
                    }
                    default:
                        jj_la1[39] = jj_gen;
                        ;
                }
                MethodName();
                Arguments();
                if (jj_2_49(2147483647)) {
                    jj_consume_token(Dot);
                    MethodInvocation();
                } else {
                    ;
                }
            } else if (jj_2_58(2147483647)) {
                ExpressionName();
                MethodName();
                Arguments();
                if (jj_2_50(2147483647)) {
                    jj_consume_token(Dot);
                    MethodInvocation();
                } else {
                    ;
                }
            } else if (jj_2_59(2147483647)) {
                if (jj_2_51(2147483647)) {
                    jj_consume_token(LeftParen);
                } else {
                    ;
                }
                Literal();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case RightParen: {
                        jj_consume_token(RightParen);
                        break;
                    }
                    default:
                        jj_la1[40] = jj_gen;
                        ;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Dot: {
                        jj_consume_token(Dot);
                        break;
                    }
                    default:
                        jj_la1[41] = jj_gen;
                        ;
                }
                MethodName();
                Arguments();
                if (jj_2_52(2147483647)) {
                    jj_consume_token(Dot);
                    MethodInvocation();
                } else {
                    ;
                }
            } else if (jj_2_60(2147483647)) {
                FunctionLiteral();
                Arguments();
                if (jj_2_53(2147483647)) {
                    jj_consume_token(Dot);
                    MethodInvocation();
                } else {
                    ;
                }
            } else if (jj_2_61(2147483647)) {
                jj_consume_token(LeftParen);
                Expression();
                jj_consume_token(RightParen);
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Dot: {
                        jj_consume_token(Dot);
                        break;
                    }
                    default:
                        jj_la1[42] = jj_gen;
                        ;
                }
                MethodName();
                Arguments();
                if (jj_2_54(2147483647)) {
                    jj_consume_token(Dot);
                    MethodInvocation();
                } else {
                    ;
                }
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Arguments() throws ParseException {/*@bgen(jjtree) Arguments */

        ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftParen);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LeftBracket:
                case LeftParen:
                case Plus:
                case Minus:
                case Bang:
                case Switch:
                case Undefined:
                case BoolLiteral:
                case IntLiteral:
                case Hexadecimal:
                case FloatLiteral:
                case StringLiteral:
                case TypeIdentifier:
                case VarIdentifier:
                case WildCard:
                case 96: {
                    Argument();
                    label_19:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case 3:
                            case LeftBracket:
                            case LeftParen:
                            case Plus:
                            case Minus:
                            case Bang:
                            case Switch:
                            case Undefined:
                            case BoolLiteral:
                            case IntLiteral:
                            case Hexadecimal:
                            case FloatLiteral:
                            case StringLiteral:
                            case TypeIdentifier:
                            case VarIdentifier:
                            case WildCard:
                            case 96: {
                                ;
                                break;
                            }
                            default:
                                jj_la1[43] = jj_gen;
                                break label_19;
                        }
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case 3: {
                                jj_consume_token(3);
                                break;
                            }
                            default:
                                jj_la1[44] = jj_gen;
                                ;
                        }
                        Argument();
                    }
                    break;
                }
                default:
                    jj_la1[45] = jj_gen;
                    ;
            }
            jj_consume_token(RightParen);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Argument() throws ParseException {/*@bgen(jjtree) Argument */

        ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Expression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Expression() throws ParseException {
        if (jj_2_62(2147483647)) {
            Assignment();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Switch: {
                    SwitchExpr();
                    break;
                }
                default:
                    jj_la1[46] = jj_gen;
                    if (jj_2_63(2147483647)) {
                        OrExpr();
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
        }
    }

    final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */

        ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            LeftHandSide();
            AssignmentOperator();
            Expression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LeftHandSide() throws ParseException {/*@bgen(jjtree) LeftHandSide */

        ASTLeftHandSide jjtn000 = new ASTLeftHandSide(JJTLEFTHANDSIDE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_64(2)) {
                ElementAccess();
            } else if (jj_2_65(2)) {
                VarIdentifier();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AssignmentOperator() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case EqualSign: {
                Assign();
                break;
            }
            case AA: {
                AA();
                break;
            }
            case SA: {
                SA();
                break;
            }
            case MA: {
                MA();
                break;
            }
            case DA: {
                DA();
                break;
            }
            case RA: {
                RA();
                break;
            }
            default:
                jj_la1[47] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void SwitchExpr() throws ParseException {/*@bgen(jjtree) SwitchExpr */

        ASTSwitchExpr jjtn000 = new ASTSwitchExpr(JJTSWITCHEXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Switch);
            Expression();
            label_20:
            while (true) {
                SwitchCase();
                if (jj_2_66(2147483647)) {
                    ;
                } else {
                    break label_20;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SwitchCase() throws ParseException {/*@bgen(jjtree) SwitchCase */

        ASTSwitchCase jjtn000 = new ASTSwitchCase(JJTSWITCHCASE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Case);
            SwitchPattern();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SwitchPattern() throws ParseException {
        Expression();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case Colon: {
                ColonType();
                break;
            }
            default:
                jj_la1[48] = jj_gen;
                ;
        }
        jj_consume_token(DoubleArrow);
        Expression();
    }

    final public void ColonType() throws ParseException {
        jj_consume_token(Colon);
        TypeElement();
    }

    final public void OrExpr() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            AndExpr();
            label_21:
            while (true) {
                if (jj_2_67(2)) {
                    ;
                } else {
                    break label_21;
                }
                Or();
                AndExpr();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void AndExpr() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Equality();
            label_22:
            while (true) {
                if (jj_2_68(2)) {
                    ;
                } else {
                    break label_22;
                }
                And();
                Equality();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Equality() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Relational();
            label_23:
            while (true) {
                if (jj_2_69(2)) {
                    ;
                } else {
                    break label_23;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case EqualTo: {
                        EqualTo();
                        break;
                    }
                    case NotEqualTo: {
                        NotEqualTo();
                        break;
                    }
                    default:
                        jj_la1[49] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                Relational();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Relational() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Range();
            label_24:
            while (true) {
                if (jj_2_70(2)) {
                    ;
                } else {
                    break label_24;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Lt: {
                        LessThan();
                        break;
                    }
                    case Gt: {
                        GreaterThan();
                        break;
                    }
                    case LtE: {
                        LessThanEqualTo();
                        break;
                    }
                    case GtE: {
                        GreaterThanEqualTo();
                        break;
                    }
                    default:
                        jj_la1[50] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                Range();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Range() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Additive();
            label_25:
            while (true) {
                if (jj_2_71(2)) {
                    ;
                } else {
                    break label_25;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case ClosedRange: {
                        ClosedRange();
                        break;
                    }
                    case HalfOpenRange: {
                        HalfOpenRange();
                        break;
                    }
                    default:
                        jj_la1[51] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                Additive();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Additive() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Multiplicative();
            label_26:
            while (true) {
                if (jj_2_72(2)) {
                    ;
                } else {
                    break label_26;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Plus: {
                        Plus();
                        break;
                    }
                    case Minus: {
                        Minus();
                        break;
                    }
                    default:
                        jj_la1[52] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                Multiplicative();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Multiplicative() throws ParseException {
        UnaryExpr();
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            label_27:
            while (true) {
                if (jj_2_73(2)) {
                    ;
                } else {
                    break label_27;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Star: {
                        Star();
                        break;
                    }
                    case Slash: {
                        Slash();
                        break;
                    }
                    case SafeDiv: {
                        SafeDiv();
                        break;
                    }
                    case SafeRem: {
                        SafeRem();
                        break;
                    }
                    case Percent: {
                        Percent();
                        break;
                    }
                    case Hat: {
                        Hat();
                        break;
                    }
                    default:
                        jj_la1[53] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                UnaryExpr();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void UnaryExpr() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case Plus: {
                    UnaryPlus();
                    UnaryExpr();
                    break;
                }
                case Minus: {
                    UnaryMinus();
                    UnaryExpr();
                    break;
                }
                case LeftBracket:
                case LeftParen:
                case Bang:
                case Undefined:
                case BoolLiteral:
                case IntLiteral:
                case Hexadecimal:
                case FloatLiteral:
                case StringLiteral:
                case TypeIdentifier:
                case VarIdentifier:
                case WildCard:
                case 96: {
                    UnaryExprNotPlusMinus();
                    break;
                }
                default:
                    jj_la1[54] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void UnaryExprNotPlusMinus() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case Bang: {
                UnaryBang();
                ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                try {
                    UnaryExpr();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) {
                                throw (RuntimeException) jjte001;
                            }
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) {
                                throw (ParseException) jjte001;
                            }
                        }
                    }
                    {
                        if (true) {
                            throw (Error) jjte001;
                        }
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                    }
                }
                break;
            }
            default:
                jj_la1[55] = jj_gen;
                if (jj_2_74(2147483647)) {
                    ASTExprNode jjtn002 = new ASTExprNode(JJTEXPRNODE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    try {
                        CastExpression();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) {
                                    throw (RuntimeException) jjte002;
                                }
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) {
                                    throw (ParseException) jjte002;
                                }
                            }
                        }
                        {
                            if (true) {
                                throw (Error) jjte002;
                            }
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                        }
                    }
                } else if (jj_2_75(2147483647)) {
                    ASTExprNode jjtn003 = new ASTExprNode(JJTEXPRNODE);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    try {
                        PostFixExpression();
                    } catch (Throwable jjte003) {
                        if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                            {
                                if (true) {
                                    throw (RuntimeException) jjte003;
                                }
                            }
                        }
                        if (jjte003 instanceof ParseException) {
                            {
                                if (true) {
                                    throw (ParseException) jjte003;
                                }
                            }
                        }
                        {
                            if (true) {
                                throw (Error) jjte003;
                            }
                        }
                    } finally {
                        if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
                        }
                    }
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
        }
    }

    final public void CastExpression() throws ParseException {/*@bgen(jjtree) CastExpression */

        ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftParen);
            UnaryExpr();
            jj_consume_token(RightParen);
            jj_consume_token(CastArrow);
            TypeElement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void PostFixExpression() throws ParseException {
        if (jj_2_76(2147483647)) {
            ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            try {
                Primary();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) {
                            throw (RuntimeException) jjte001;
                        }
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) {
                            throw (ParseException) jjte001;
                        }
                    }
                }
                {
                    if (true) {
                        throw (Error) jjte001;
                    }
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                }
            }
        } else if (jj_2_77(2147483647)) {
            ASTExprNode jjtn002 = new ASTExprNode(JJTEXPRNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            try {
                ExpressionName();
            } catch (Throwable jjte002) {
                if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                    {
                        if (true) {
                            throw (RuntimeException) jjte002;
                        }
                    }
                }
                if (jjte002 instanceof ParseException) {
                    {
                        if (true) {
                            throw (ParseException) jjte002;
                        }
                    }
                }
                {
                    if (true) {
                        throw (Error) jjte002;
                    }
                }
            } finally {
                if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                }
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void ExpressionName() throws ParseException {/*@bgen(jjtree) ExpressionName */

        ASTExpressionName jjtn000 = new ASTExpressionName(JJTEXPRESSIONNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_78(2147483647)) {
                ElementAccess();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Dot: {
                        jj_consume_token(Dot);
                        break;
                    }
                    default:
                        jj_la1[56] = jj_gen;
                        ;
                }
            } else {
                ;
            }
            Identifier();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Primary() throws ParseException {
        if (jj_2_79(2147483647)) {
            ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            try {
                Literal();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) {
                            throw (RuntimeException) jjte001;
                        }
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) {
                            throw (ParseException) jjte001;
                        }
                    }
                }
                {
                    if (true) {
                        throw (Error) jjte001;
                    }
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                }
            }
        } else if (jj_2_80(2147483647)) {
            ASTExprNode jjtn002 = new ASTExprNode(JJTEXPRNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            try {
                NewInstance();
            } catch (Throwable jjte002) {
                if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                    {
                        if (true) {
                            throw (RuntimeException) jjte002;
                        }
                    }
                }
                if (jjte002 instanceof ParseException) {
                    {
                        if (true) {
                            throw (ParseException) jjte002;
                        }
                    }
                }
                {
                    if (true) {
                        throw (Error) jjte002;
                    }
                }
            } finally {
                if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                }
            }
        } else if (jj_2_81(2147483647)) {
            ASTExprNode jjtn003 = new ASTExprNode(JJTEXPRNODE);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            try {
                MethodInvocation();
            } catch (Throwable jjte003) {
                if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                    {
                        if (true) {
                            throw (RuntimeException) jjte003;
                        }
                    }
                }
                if (jjte003 instanceof ParseException) {
                    {
                        if (true) {
                            throw (ParseException) jjte003;
                        }
                    }
                }
                {
                    if (true) {
                        throw (Error) jjte003;
                    }
                }
            } finally {
                if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
                }
            }
        } else if (jj_2_82(2147483647)) {
            ASTExprNode jjtn004 = new ASTExprNode(JJTEXPRNODE);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            try {
                ElementAccess();
            } catch (Throwable jjte004) {
                if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte004 instanceof RuntimeException) {
                    {
                        if (true) {
                            throw (RuntimeException) jjte004;
                        }
                    }
                }
                if (jjte004 instanceof ParseException) {
                    {
                        if (true) {
                            throw (ParseException) jjte004;
                        }
                    }
                }
                {
                    if (true) {
                        throw (Error) jjte004;
                    }
                }
            } finally {
                if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, jjtree.nodeArity() > 1);
                }
            }
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case WildCard: {
                    ASTExprNode jjtn005 = new ASTExprNode(JJTEXPRNODE);
                    boolean jjtc005 = true;
                    jjtree.openNodeScope(jjtn005);
                    try {
                        WildCard();
                    } catch (Throwable jjte005) {
                        if (jjtc005) {
                            jjtree.clearNodeScope(jjtn005);
                            jjtc005 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte005 instanceof RuntimeException) {
                            {
                                if (true) {
                                    throw (RuntimeException) jjte005;
                                }
                            }
                        }
                        if (jjte005 instanceof ParseException) {
                            {
                                if (true) {
                                    throw (ParseException) jjte005;
                                }
                            }
                        }
                        {
                            if (true) {
                                throw (Error) jjte005;
                            }
                        }
                    } finally {
                        if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, jjtree.nodeArity() > 1);
                        }
                    }
                    break;
                }
                default:
                    jj_la1[57] = jj_gen;
                    if (jj_2_83(2147483647)) {
                        jj_consume_token(LeftParen);
                        Expression();
                        ASTExprNode jjtn006 = new ASTExprNode(JJTEXPRNODE);
                        boolean jjtc006 = true;
                        jjtree.openNodeScope(jjtn006);
                        try {
                            jj_consume_token(RightParen);
                        } finally {
                            if (jjtc006) {
                                jjtree.closeNodeScope(jjtn006, jjtree.nodeArity() > 1);
                            }
                        }
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
        }
    }

    final public void NewInstance() throws ParseException {/*@bgen(jjtree) NewInstance */

        ASTNewInstance jjtn000 = new ASTNewInstance(JJTNEWINSTANCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            TypeIdentifier();
            if (jj_2_84(2147483647)) {
                Arguments();
            } else {
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ElementAccess() throws ParseException {/*@bgen(jjtree) ElementAccess */

        ASTElementAccess jjtn000 = new ASTElementAccess(JJTELEMENTACCESS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_85(2147483647)) {
                ModuleName();
                jj_consume_token(DoubleColon);
            } else {
                ;
            }
            Identifier();
            label_28:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Dot: {
                        jj_consume_token(Dot);
                        break;
                    }
                    default:
                        jj_la1[58] = jj_gen;
                        ;
                }
                Identifier();
                if (jj_2_86(2147483647)) {
                    ;
                } else {
                    break label_28;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Documentation() throws ParseException {/*@bgen(jjtree) Documentation */

        ASTDocumentation jjtn000 = new ASTDocumentation(JJTDOCUMENTATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(BeginDoc);
            StringLiteral();
            jj_consume_token(EndDoc);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ModifierStatement() throws ParseException {/*@bgen(jjtree) ModifierStatement */

        ASTModifierStatement jjtn000 = new ASTModifierStatement(JJTMODIFIERSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(4);
            label_29:
            while (true) {
                AllModifier();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case Abstract:
                    case Lazy:
                    case Override:
                    case Private:
                    case Public:
                    case Sealed:
                    case Variable: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[59] = jj_gen;
                        break label_29;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AllModifier() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case Abstract: {
                AbstractModifier();
                break;
            }
            case Override: {
                OverrideModifier();
                break;
            }
            case Private: {
                PrivateModifier();
                break;
            }
            case Public: {
                PublicModifier();
                break;
            }
            case Sealed: {
                SealedModifier();
                break;
            }
            case Lazy: {
                LazyModifier();
                break;
            }
            case Variable: {
                VariableModifier();
                break;
            }
            default:
                jj_la1[60] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Identifier() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case TypeIdentifier: {
                TypeIdentifier();
                break;
            }
            case VarIdentifier:
            case WildCard: {
                VarIdentifier();
                break;
            }
            default:
                jj_la1[61] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void ModuleName() throws ParseException {/*@bgen(jjtree) ModuleName */

        ASTModuleName jjtn000 = new ASTModuleName(JJTMODULENAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            TypeIdentifier();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void MethodName() throws ParseException {/*@bgen(jjtree) MethodName */

        ASTMethodName jjtn000 = new ASTMethodName(JJTMETHODNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            VarIdentifier();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ExprName() throws ParseException {/*@bgen(jjtree) ExprName */

        ASTExprName jjtn000 = new ASTExprName(JJTEXPRNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            VarIdentifier();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ReturnType() throws ParseException {/*@bgen(jjtree) ReturnType */

        ASTReturnType jjtn000 = new ASTReturnType(JJTRETURNTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            TypeElement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SuperType() throws ParseException {/*@bgen(jjtree) SuperType */

        ASTSuperType jjtn000 = new ASTSuperType(JJTSUPERTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            TypeElement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Interfaces() throws ParseException {/*@bgen(jjtree) Interfaces */

        ASTInterfaces jjtn000 = new ASTInterfaces(JJTINTERFACES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_30:
            while (true) {
                TypeElement();
                if (jj_2_87(2)) {
                    ;
                } else {
                    break label_30;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public Token TypeIdentifier() throws ParseException {/*@bgen(jjtree) TypeIdentifier */

        ASTTypeIdentifier jjtn000 = new ASTTypeIdentifier(JJTTYPEIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(TypeIdentifier);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
            {
                if ("" != null) {
                    return t;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Token VarIdentifier() throws ParseException {/*@bgen(jjtree) VarIdentifier */

        ASTVarIdentifier jjtn000 = new ASTVarIdentifier(JJTVARIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case VarIdentifier: {
                    t = jj_consume_token(VarIdentifier);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    {
                        if ("" != null) {
                            return t;
                        }
                    }
                    break;
                }
                case WildCard: {
                    t = WildCard();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    {
                        if ("" != null) {
                            return t;
                        }
                    }
                    break;
                }
                default:
                    jj_la1[62] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Token WildCard() throws ParseException {/*@bgen(jjtree) WildCard */

        ASTWildCard jjtn000 = new ASTWildCard(JJTWILDCARD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(WildCard);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
            {
                if ("" != null) {
                    return t;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void Annotation() throws ParseException {/*@bgen(jjtree) Annotation */

        ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Atmark);
            TypeIdentifier();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AbstractModifier() throws ParseException {/*@bgen(jjtree) AbstractModifier */

        ASTAbstractModifier jjtn000 = new ASTAbstractModifier(JJTABSTRACTMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Abstract);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void OverrideModifier() throws ParseException {/*@bgen(jjtree) OverrideModifier */

        ASTOverrideModifier jjtn000 = new ASTOverrideModifier(JJTOVERRIDEMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Override);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void PrivateModifier() throws ParseException {/*@bgen(jjtree) PrivateModifier */

        ASTPrivateModifier jjtn000 = new ASTPrivateModifier(JJTPRIVATEMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Private);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void PublicModifier() throws ParseException {/*@bgen(jjtree) PublicModifier */

        ASTPublicModifier jjtn000 = new ASTPublicModifier(JJTPUBLICMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Public);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SealedModifier() throws ParseException {/*@bgen(jjtree) SealedModifier */

        ASTSealedModifier jjtn000 = new ASTSealedModifier(JJTSEALEDMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Sealed);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LazyModifier() throws ParseException {/*@bgen(jjtree) LazyModifier */

        ASTLazyModifier jjtn000 = new ASTLazyModifier(JJTLAZYMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Lazy);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void VariableModifier() throws ParseException {/*@bgen(jjtree) VariableModifier */

        ASTVariableModifier jjtn000 = new ASTVariableModifier(JJTVARIABLEMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Variable);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UnaryPlus() throws ParseException {/*@bgen(jjtree) UnaryPlus */

        ASTUnaryPlus jjtn000 = new ASTUnaryPlus(JJTUNARYPLUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Plus);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UnaryBang() throws ParseException {/*@bgen(jjtree) UnaryBang */

        ASTUnaryBang jjtn000 = new ASTUnaryBang(JJTUNARYBANG);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Bang);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UnaryMinus() throws ParseException {/*@bgen(jjtree) UnaryMinus */

        ASTUnaryMinus jjtn000 = new ASTUnaryMinus(JJTUNARYMINUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Minus);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Star() throws ParseException {/*@bgen(jjtree) Star */

        ASTStar jjtn000 = new ASTStar(JJTSTAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Star);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Slash() throws ParseException {/*@bgen(jjtree) Slash */

        ASTSlash jjtn000 = new ASTSlash(JJTSLASH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Slash);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Percent() throws ParseException {/*@bgen(jjtree) Percent */

        ASTPercent jjtn000 = new ASTPercent(JJTPERCENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Percent);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SafeDiv() throws ParseException {/*@bgen(jjtree) SafeDiv */

        ASTSafeDiv jjtn000 = new ASTSafeDiv(JJTSAFEDIV);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(SafeDiv);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SafeRem() throws ParseException {/*@bgen(jjtree) SafeRem */

        ASTSafeRem jjtn000 = new ASTSafeRem(JJTSAFEREM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(SafeRem);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Hat() throws ParseException {/*@bgen(jjtree) Hat */

        ASTHat jjtn000 = new ASTHat(JJTHAT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Hat);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Plus() throws ParseException {/*@bgen(jjtree) Plus */

        ASTPlus jjtn000 = new ASTPlus(JJTPLUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Plus);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Minus() throws ParseException {/*@bgen(jjtree) Minus */

        ASTMinus jjtn000 = new ASTMinus(JJTMINUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Minus);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void EqualTo() throws ParseException {/*@bgen(jjtree) EqualTo */

        ASTEqualTo jjtn000 = new ASTEqualTo(JJTEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(EqualTo);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void NotEqualTo() throws ParseException {/*@bgen(jjtree) NotEqualTo */

        ASTNotEqualTo jjtn000 = new ASTNotEqualTo(JJTNOTEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(NotEqualTo);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void GreaterThan() throws ParseException {/*@bgen(jjtree) GreaterThan */

        ASTGreaterThan jjtn000 = new ASTGreaterThan(JJTGREATERTHAN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Gt);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LessThan() throws ParseException {/*@bgen(jjtree) LessThan */

        ASTLessThan jjtn000 = new ASTLessThan(JJTLESSTHAN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Lt);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void GreaterThanEqualTo() throws ParseException {/*@bgen(jjtree) GreaterThanEqualTo */

        ASTGreaterThanEqualTo jjtn000 = new ASTGreaterThanEqualTo(JJTGREATERTHANEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(GtE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LessThanEqualTo() throws ParseException {/*@bgen(jjtree) LessThanEqualTo */

        ASTLessThanEqualTo jjtn000 = new ASTLessThanEqualTo(JJTLESSTHANEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(LtE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Comparable() throws ParseException {/*@bgen(jjtree) Comparable */

        ASTComparable jjtn000 = new ASTComparable(JJTCOMPARABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Comparable);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void NonComparable() throws ParseException {/*@bgen(jjtree) NonComparable */

        ASTNonComparable jjtn000 = new ASTNonComparable(JJTNONCOMPARABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(NonComparable);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void And() throws ParseException {/*@bgen(jjtree) And */

        ASTAnd jjtn000 = new ASTAnd(JJTAND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(And);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Or() throws ParseException {/*@bgen(jjtree) Or */

        ASTOr jjtn000 = new ASTOr(JJTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Or);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void BoolLiteral() throws ParseException {/*@bgen(jjtree) BoolLiteral */

        ASTBoolLiteral jjtn000 = new ASTBoolLiteral(JJTBOOLLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(BoolLiteral);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void IntLiteral() throws ParseException {/*@bgen(jjtree) IntLiteral */

        ASTIntLiteral jjtn000 = new ASTIntLiteral(JJTINTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case IntLiteral: {
                    t = jj_consume_token(IntLiteral);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                case Hexadecimal: {
                    t = jj_consume_token(Hexadecimal);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                default:
                    jj_la1[63] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FloatLiteral() throws ParseException {/*@bgen(jjtree) FloatLiteral */

        ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(FloatLiteral);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void StringLiteral() throws ParseException {/*@bgen(jjtree) StringLiteral */

        ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(StringLiteral);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ListLiteral() throws ParseException {/*@bgen(jjtree) ListLiteral */

        ASTListLiteral jjtn000 = new ASTListLiteral(JJTLISTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftBracket);
            label_31:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LeftBracket:
                    case LeftParen:
                    case Undefined:
                    case BoolLiteral:
                    case IntLiteral:
                    case Hexadecimal:
                    case FloatLiteral:
                    case StringLiteral:
                    case VarIdentifier:
                    case WildCard:
                    case 96: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[64] = jj_gen;
                        break label_31;
                }
                ListBody();
            }
            jj_consume_token(RightBracket);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ListBody() throws ParseException {
        if (jj_2_88(2)) {
            Literal();
        } else if (jj_2_89(2)) {
            WildCard();
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void TupleLiteral() throws ParseException {/*@bgen(jjtree) TupleLiteral */

        ASTTupleLiteral jjtn000 = new ASTTupleLiteral(JJTTUPLELITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(96);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LeftBracket:
                case LeftParen:
                case Plus:
                case Minus:
                case Bang:
                case Switch:
                case Undefined:
                case BoolLiteral:
                case IntLiteral:
                case Hexadecimal:
                case FloatLiteral:
                case StringLiteral:
                case TypeIdentifier:
                case VarIdentifier:
                case WildCard:
                case 96: {
                    Expression();
                    label_32:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case 3:
                            case LeftBracket:
                            case LeftParen:
                            case Plus:
                            case Minus:
                            case Bang:
                            case Switch:
                            case Undefined:
                            case BoolLiteral:
                            case IntLiteral:
                            case Hexadecimal:
                            case FloatLiteral:
                            case StringLiteral:
                            case TypeIdentifier:
                            case VarIdentifier:
                            case WildCard:
                            case 96: {
                                ;
                                break;
                            }
                            default:
                                jj_la1[65] = jj_gen;
                                break label_32;
                        }
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case 3: {
                                jj_consume_token(3);
                                break;
                            }
                            default:
                                jj_la1[66] = jj_gen;
                                ;
                        }
                        Expression();
                    }
                    break;
                }
                default:
                    jj_la1[67] = jj_gen;
                    ;
            }
            jj_consume_token(RightParen);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UndefinedLiteral() throws ParseException {/*@bgen(jjtree) UndefinedLiteral */

        ASTUndefinedLiteral jjtn000 = new ASTUndefinedLiteral(JJTUNDEFINEDLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Undefined);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SingleArrow() throws ParseException {/*@bgen(jjtree) SingleArrow */

        ASTSingleArrow jjtn000 = new ASTSingleArrow(JJTSINGLEARROW);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(SingleArrow);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Assign() throws ParseException {/*@bgen(jjtree) Assign */

        ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(EqualSign);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ClosedRange() throws ParseException {/*@bgen(jjtree) ClosedRange */

        ASTClosedRange jjtn000 = new ASTClosedRange(JJTCLOSEDRANGE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(ClosedRange);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void HalfOpenRange() throws ParseException {/*@bgen(jjtree) HalfOpenRange */

        ASTHalfOpenRange jjtn000 = new ASTHalfOpenRange(JJTHALFOPENRANGE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(HalfOpenRange);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AA() throws ParseException {/*@bgen(jjtree) AA */

        ASTAA jjtn000 = new ASTAA(JJTAA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(AA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SA() throws ParseException {/*@bgen(jjtree) SA */

        ASTSA jjtn000 = new ASTSA(JJTSA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(SA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void MA() throws ParseException {/*@bgen(jjtree) MA */

        ASTMA jjtn000 = new ASTMA(JJTMA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(MA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void DA() throws ParseException {/*@bgen(jjtree) DA */

        ASTDA jjtn000 = new ASTDA(JJTDA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(DA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void RA() throws ParseException {/*@bgen(jjtree) RA */

        ASTRA jjtn000 = new ASTRA(JJTRA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(RA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SP() throws ParseException {/*@bgen(jjtree) SP */

        ASTSP jjtn000 = new ASTSP(JJTSP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(SP);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            t.image = "";
            jjtn000.jjtSetValue(t);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    private boolean jj_2_33(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_33();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    private boolean jj_2_34(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_34();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    private boolean jj_2_35(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_35();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(34, xla);
        }
    }

    private boolean jj_2_36(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_36();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(35, xla);
        }
    }

    private boolean jj_2_37(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_37();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(36, xla);
        }
    }

    private boolean jj_2_38(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_38();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(37, xla);
        }
    }

    private boolean jj_2_39(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_39();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(38, xla);
        }
    }

    private boolean jj_2_40(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_40();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(39, xla);
        }
    }

    private boolean jj_2_41(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_41();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(40, xla);
        }
    }

    private boolean jj_2_42(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_42();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(41, xla);
        }
    }

    private boolean jj_2_43(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_43();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(42, xla);
        }
    }

    private boolean jj_2_44(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_44();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(43, xla);
        }
    }

    private boolean jj_2_45(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_45();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(44, xla);
        }
    }

    private boolean jj_2_46(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_46();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(45, xla);
        }
    }

    private boolean jj_2_47(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_47();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(46, xla);
        }
    }

    private boolean jj_2_48(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_48();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(47, xla);
        }
    }

    private boolean jj_2_49(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_49();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(48, xla);
        }
    }

    private boolean jj_2_50(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_50();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(49, xla);
        }
    }

    private boolean jj_2_51(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_51();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(50, xla);
        }
    }

    private boolean jj_2_52(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_52();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(51, xla);
        }
    }

    private boolean jj_2_53(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_53();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(52, xla);
        }
    }

    private boolean jj_2_54(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_54();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(53, xla);
        }
    }

    private boolean jj_2_55(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_55();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(54, xla);
        }
    }

    private boolean jj_2_56(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_56();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(55, xla);
        }
    }

    private boolean jj_2_57(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_57();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(56, xla);
        }
    }

    private boolean jj_2_58(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_58();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(57, xla);
        }
    }

    private boolean jj_2_59(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_59();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(58, xla);
        }
    }

    private boolean jj_2_60(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_60();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(59, xla);
        }
    }

    private boolean jj_2_61(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_61();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(60, xla);
        }
    }

    private boolean jj_2_62(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_62();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(61, xla);
        }
    }

    private boolean jj_2_63(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_63();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(62, xla);
        }
    }

    private boolean jj_2_64(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_64();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(63, xla);
        }
    }

    private boolean jj_2_65(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_65();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(64, xla);
        }
    }

    private boolean jj_2_66(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_66();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(65, xla);
        }
    }

    private boolean jj_2_67(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_67();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(66, xla);
        }
    }

    private boolean jj_2_68(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_68();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(67, xla);
        }
    }

    private boolean jj_2_69(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_69();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(68, xla);
        }
    }

    private boolean jj_2_70(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_70();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(69, xla);
        }
    }

    private boolean jj_2_71(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_71();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(70, xla);
        }
    }

    private boolean jj_2_72(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_72();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(71, xla);
        }
    }

    private boolean jj_2_73(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_73();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(72, xla);
        }
    }

    private boolean jj_2_74(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_74();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(73, xla);
        }
    }

    private boolean jj_2_75(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_75();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(74, xla);
        }
    }

    private boolean jj_2_76(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_76();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(75, xla);
        }
    }

    private boolean jj_2_77(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_77();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(76, xla);
        }
    }

    private boolean jj_2_78(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_78();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(77, xla);
        }
    }

    private boolean jj_2_79(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_79();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(78, xla);
        }
    }

    private boolean jj_2_80(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_80();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(79, xla);
        }
    }

    private boolean jj_2_81(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_81();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(80, xla);
        }
    }

    private boolean jj_2_82(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_82();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(81, xla);
        }
    }

    private boolean jj_2_83(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_83();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(82, xla);
        }
    }

    private boolean jj_2_84(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_84();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(83, xla);
        }
    }

    private boolean jj_2_85(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_85();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(84, xla);
        }
    }

    private boolean jj_2_86(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_86();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(85, xla);
        }
    }

    private boolean jj_2_87(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_87();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(86, xla);
        }
    }

    private boolean jj_2_88(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_88();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(87, xla);
        }
    }

    private boolean jj_2_89(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_89();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(88, xla);
        }
    }

    private boolean jj_3R_47() {
        if (jj_scan_token(WildCard)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_125() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_41() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_124()) {
            jj_scanpos = xsp;
            if (jj_3R_125()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_124() {
        if (jj_scan_token(VarIdentifier)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_scan_token(TypeIdentifier)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_87() {
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_242() {
        Token xsp;
        if (jj_3_87()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_87()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_241() {
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_298() {
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_69() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_105() {
        if (jj_3R_71()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_211() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_106() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_210()) {
            jj_scanpos = xsp;
            if (jj_3R_211()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_210() {
        if (jj_3R_71()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_86() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_106()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_175() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_106()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_52() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_290() {
        if (jj_3R_307()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_289() {
        if (jj_3R_306()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_99() {
        if (jj_3R_197()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_288() {
        if (jj_3R_305()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_84() {
        if (jj_3R_70()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_287() {
        if (jj_3R_304()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_286() {
        if (jj_3R_303()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_285() {
        if (jj_3R_302()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_225() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_284() {
        if (jj_3R_301()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_243() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_284()) {
            jj_scanpos = xsp;
            if (jj_3R_285()) {
                jj_scanpos = xsp;
                if (jj_3R_286()) {
                    jj_scanpos = xsp;
                    if (jj_3R_287()) {
                        jj_scanpos = xsp;
                        if (jj_3R_288()) {
                            jj_scanpos = xsp;
                            if (jj_3R_289()) {
                                jj_scanpos = xsp;
                                if (jj_3R_290()) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_159() {
        if (jj_3R_243()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_scan_token(4)) {
            return true;
        }
        Token xsp;
        if (jj_3R_159()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_159()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_209() {
        if (jj_3R_70()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_85() {
        if (jj_3R_105()) {
            return true;
        }
        if (jj_scan_token(DoubleColon)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_98() {
        if (jj_3R_196()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_60() {
        if (jj_scan_token(BeginDoc)) {
            return true;
        }
        if (jj_3R_160()) {
            return true;
        }
        if (jj_scan_token(EndDoc)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_174() {
        if (jj_3R_105()) {
            return true;
        }
        if (jj_scan_token(DoubleColon)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_68() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_174()) {
            jj_scanpos = xsp;
        }
        if (jj_3R_106()) {
            return true;
        }
        if (jj_3R_175()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_175()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_97() {
        if (jj_3R_195()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_83() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        if (jj_3R_44()) {
            return true;
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_86() {
        if (jj_3R_187()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_82() {
        if (jj_3R_68()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_81() {
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_104() {
        if (jj_3R_71()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_209()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_80() {
        if (jj_3R_104()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_79() {
        if (jj_3R_48()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_78() {
        if (jj_3R_68()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_96() {
        if (jj_3R_194()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_208() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        if (jj_3R_44()) {
            return true;
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_207() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_206() {
        if (jj_3R_68()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_205() {
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_204() {
        if (jj_3R_104()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_103() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_203()) {
            jj_scanpos = xsp;
            if (jj_3R_204()) {
                jj_scanpos = xsp;
                if (jj_3R_205()) {
                    jj_scanpos = xsp;
                    if (jj_3R_206()) {
                        jj_scanpos = xsp;
                        if (jj_3R_207()) {
                            jj_scanpos = xsp;
                            if (jj_3R_208()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_203() {
        if (jj_3R_48()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_77() {
        if (jj_3R_72()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_76() {
        if (jj_3R_103()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_92() {
        if (jj_3R_191()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_95() {
        if (jj_3R_193()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_177() {
        if (jj_3R_68()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_72() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_177()) {
            jj_scanpos = xsp;
        }
        if (jj_3R_106()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_85() {
        if (jj_3R_186()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_89() {
        if (jj_3R_189()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_202() {
        if (jj_3R_72()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_102() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_201()) {
            jj_scanpos = xsp;
            if (jj_3R_202()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_201() {
        if (jj_3R_103()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_54() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_91() {
        if (jj_3R_190()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_94() {
        if (jj_3R_192()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_75() {
        if (jj_3R_102()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_74() {
        if (jj_3R_101()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_101() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        if (jj_3R_100()) {
            return true;
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        if (jj_scan_token(CastArrow)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_84() {
        if (jj_3R_185()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_81() {
        if (jj_3R_183()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_227() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_297() {
        if (jj_3R_102()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_88() {
        if (jj_3R_188()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_296() {
        if (jj_3R_101()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_49() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_295() {
        if (jj_3R_309()) {
            return true;
        }
        if (jj_3R_100()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_260() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_295()) {
            jj_scanpos = xsp;
            if (jj_3R_296()) {
                jj_scanpos = xsp;
                if (jj_3R_297()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_73() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_94()) {
            jj_scanpos = xsp;
            if (jj_3R_95()) {
                jj_scanpos = xsp;
                if (jj_3R_96()) {
                    jj_scanpos = xsp;
                    if (jj_3R_97()) {
                        jj_scanpos = xsp;
                        if (jj_3R_98()) {
                            jj_scanpos = xsp;
                            if (jj_3R_99()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if (jj_3R_100()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_72() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_91()) {
            jj_scanpos = xsp;
            if (jj_3R_92()) {
                return true;
            }
        }
        if (jj_3R_93()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_200() {
        if (jj_3R_260()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_199() {
        if (jj_3R_259()) {
            return true;
        }
        if (jj_3R_100()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_83() {
        if (jj_3R_184()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_198() {
        if (jj_3R_258()) {
            return true;
        }
        if (jj_3R_100()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_80() {
        if (jj_3R_182()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_100() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_198()) {
            jj_scanpos = xsp;
            if (jj_3R_199()) {
                jj_scanpos = xsp;
                if (jj_3R_200()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_223() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_71() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_88()) {
            jj_scanpos = xsp;
            if (jj_3R_89()) {
                return true;
            }
        }
        if (jj_3R_90()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_93() {
        if (jj_3R_100()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_73()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_50() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_90() {
        if (jj_3R_93()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_72()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_70() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_83()) {
            jj_scanpos = xsp;
            if (jj_3R_84()) {
                jj_scanpos = xsp;
                if (jj_3R_85()) {
                    jj_scanpos = xsp;
                    if (jj_3R_86()) {
                        return true;
                    }
                }
            }
        }
        if (jj_3R_87()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_69() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_80()) {
            jj_scanpos = xsp;
            if (jj_3R_81()) {
                return true;
            }
        }
        if (jj_3R_82()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_51() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_270() {
        if (jj_scan_token(RA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_87() {
        if (jj_3R_90()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_71()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_224() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_68() {
        if (jj_3R_78()) {
            return true;
        }
        if (jj_3R_79()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_82() {
        if (jj_3R_87()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_70()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_269() {
        if (jj_scan_token(DA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_79() {
        if (jj_3R_82()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_69()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_53() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_67() {
        if (jj_3R_76()) {
            return true;
        }
        if (jj_3R_77()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_66() {
        if (jj_3R_75()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_220() {
        if (jj_3R_270()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_77() {
        if (jj_3R_79()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_68()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_268() {
        if (jj_scan_token(MA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_257() {
        if (jj_3R_294()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_32() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_219() {
        if (jj_3R_269()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_226() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_74() {
        if (jj_3R_77()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_67()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_279() {
        if (jj_3R_75()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_218() {
        if (jj_3R_268()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_294() {
        if (jj_scan_token(Colon)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_267() {
        if (jj_scan_token(SA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_292() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_181() {
        if (jj_3R_44()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_257()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DoubleArrow)) {
            return true;
        }
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_217() {
        if (jj_3R_267()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_266() {
        if (jj_scan_token(AA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_75() {
        if (jj_scan_token(Case)) {
            return true;
        }
        if (jj_3R_181()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_216() {
        if (jj_3R_266()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_47() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_233() {
        if (jj_scan_token(Switch)) {
            return true;
        }
        if (jj_3R_44()) {
            return true;
        }
        Token xsp;
        if (jj_3R_279()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_279()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_48() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_189() {
        if (jj_scan_token(HalfOpenRange)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_116() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_215()) {
            jj_scanpos = xsp;
            if (jj_3R_216()) {
                jj_scanpos = xsp;
                if (jj_3R_217()) {
                    jj_scanpos = xsp;
                    if (jj_3R_218()) {
                        jj_scanpos = xsp;
                        if (jj_3R_219()) {
                            jj_scanpos = xsp;
                            if (jj_3R_220()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_215() {
        if (jj_3R_265()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_221() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_222() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_65() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_188() {
        if (jj_scan_token(ClosedRange)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_64() {
        if (jj_3R_68()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_115() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_64()) {
            jj_scanpos = xsp;
            if (jj_3_65()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_254() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(3)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_253()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_63() {
        if (jj_3R_74()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_62() {
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_36() {
        if (jj_3R_115()) {
            return true;
        }
        if (jj_3R_116()) {
            return true;
        }
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_265() {
        if (jj_scan_token(EqualSign)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_31() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_308() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(3)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_134() {
        if (jj_3R_74()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_133() {
        if (jj_3R_233()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_176() {
        if (jj_3R_253()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_254()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_44() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_132()) {
            jj_scanpos = xsp;
            if (jj_3R_133()) {
                jj_scanpos = xsp;
                if (jj_3R_134()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_132() {
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_34() {
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_291() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_253() {
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_61() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        if (jj_3R_44()) {
            return true;
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_60() {
        if (jj_3R_73()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_59() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(9)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_48()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_scan_token(10)) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_69()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_58() {
        if (jj_3R_72()) {
            return true;
        }
        if (jj_3R_69()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_282() {
        if (jj_3R_44()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_308()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_70() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_176()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_57() {
        if (jj_3R_71()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_69()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_239() {
        if (jj_scan_token(Undefined)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_29() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_121() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        if (jj_3R_44()) {
            return true;
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_69()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_227()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_120() {
        if (jj_3R_73()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_226()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_46() {
        if (jj_3R_67()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_119() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(9)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_48()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_scan_token(10)) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_69()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_225()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_45() {
        if (jj_3R_66()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_118() {
        if (jj_3R_72()) {
            return true;
        }
        if (jj_3R_69()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_224()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_283() {
        if (jj_3R_300()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_237() {
        if (jj_scan_token(96)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_282()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_44() {
        if (jj_3R_65()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_117() {
        if (jj_3R_71()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_69()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_223()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_43() {
        if (jj_3R_64()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_56() {
        if (jj_3R_69()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_222()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_37() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_55()) {
            jj_scanpos = xsp;
            if (jj_3_56()) {
                jj_scanpos = xsp;
                if (jj_3R_117()) {
                    jj_scanpos = xsp;
                    if (jj_3R_118()) {
                        jj_scanpos = xsp;
                        if (jj_3R_119()) {
                            jj_scanpos = xsp;
                            if (jj_3R_120()) {
                                jj_scanpos = xsp;
                                if (jj_3R_121()) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_42() {
        if (jj_3R_63()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_55() {
        if (jj_3R_68()) {
            return true;
        }
        if (jj_3R_70()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_221()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_250() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_41() {
        if (jj_3R_62()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_40() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_39() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_158() {
        if (jj_3R_67()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_89() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_300() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_88()) {
            jj_scanpos = xsp;
            if (jj_3_89()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_157() {
        if (jj_3R_66()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_88() {
        if (jj_3R_48()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_156() {
        if (jj_3R_65()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_38() {
        if (jj_3R_61()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_155() {
        if (jj_3R_64()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_37() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_154() {
        if (jj_3R_63()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_36() {
        if (jj_3R_59()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_153() {
        if (jj_3R_62()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_152() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_238() {
        if (jj_scan_token(LeftBracket)) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_283()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RightBracket)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_58() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_151()) {
            jj_scanpos = xsp;
            if (jj_3R_152()) {
                jj_scanpos = xsp;
                if (jj_3R_153()) {
                    jj_scanpos = xsp;
                    if (jj_3R_154()) {
                        jj_scanpos = xsp;
                        if (jj_3R_155()) {
                            jj_scanpos = xsp;
                            if (jj_3R_156()) {
                                jj_scanpos = xsp;
                                if (jj_3R_157()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_158()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_35() {
        if (jj_3R_58()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_151() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_276() {
        if (jj_3R_61()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_33() {
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_275() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_274() {
        if (jj_3R_59()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_160() {
        if (jj_scan_token(StringLiteral)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_273() {
        if (jj_3R_299()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_272() {
        if (jj_3R_58()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_230() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_272()) {
            jj_scanpos = xsp;
            if (jj_3R_273()) {
                jj_scanpos = xsp;
                if (jj_3R_274()) {
                    jj_scanpos = xsp;
                    if (jj_3R_275()) {
                        jj_scanpos = xsp;
                        if (jj_3R_276()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_180() {
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_236() {
        if (jj_scan_token(FloatLiteral)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_142() {
        if (jj_3R_239()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_141() {
        if (jj_3R_238()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_30() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_56()) {
            jj_scanpos = xsp;
            if (jj_3R_57()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_140() {
        if (jj_3R_237()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_139() {
        if (jj_3R_160()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_28() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_138() {
        if (jj_3R_236()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_281() {
        if (jj_scan_token(Hexadecimal)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_137() {
        if (jj_3R_235()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_136() {
        if (jj_3R_234()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_54() {
        if (jj_3R_146()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_48() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_135()) {
            jj_scanpos = xsp;
            if (jj_3R_136()) {
                jj_scanpos = xsp;
                if (jj_3R_137()) {
                    jj_scanpos = xsp;
                    if (jj_3R_138()) {
                        jj_scanpos = xsp;
                        if (jj_3R_139()) {
                            jj_scanpos = xsp;
                            if (jj_3R_140()) {
                                jj_scanpos = xsp;
                                if (jj_3R_141()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_142()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_135() {
        if (jj_3R_73()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_311() {
        if (jj_scan_token(And)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_280() {
        if (jj_scan_token(IntLiteral)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_235() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_280()) {
            jj_scanpos = xsp;
            if (jj_3R_281()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_53() {
        if (jj_scan_token(SingleArrow)) {
            return true;
        }
        if (jj_3R_310()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_251() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_291()) {
            jj_scanpos = xsp;
            if (jj_3R_292()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_249() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_171() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_249()) {
            jj_scanpos = xsp;
            if (jj_3R_250()) {
                return true;
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_251()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_234() {
        if (jj_scan_token(BoolLiteral)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_66() {
        if (jj_scan_token(Module)) {
            return true;
        }
        if (jj_3R_71()) {
            return true;
        }
        if (jj_3R_171()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_24() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_52() {
        if (jj_3R_145()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_144() {
        if (jj_3R_240()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_146() {
        if (jj_scan_token(Lt)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_311()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_263() {
        if (jj_scan_token(SingleArrow)) {
            return true;
        }
        if (jj_3R_298()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_76() {
        if (jj_scan_token(Or)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_27() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_240() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_26()) {
            jj_scanpos = xsp;
            if (jj_3_27()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_26() {
        if (jj_3R_39()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_54()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_179() {
        if (jj_scan_token(LeftBrace)) {
            return true;
        }
        if (jj_3R_44()) {
            return true;
        }
        if (jj_scan_token(RightBrace)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_78() {
        if (jj_scan_token(And)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_51() {
        if (jj_3R_71()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_scan_token(LeftBracket)) {
            return true;
        }
        Token xsp;
        if (jj_3R_144()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_144()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RightBracket)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_161() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_61() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_161()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(2)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        if (jj_scan_token(AA)) {
            return true;
        }
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_145() {
        if (jj_3R_160()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_262() {
        if (jj_scan_token(Star)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_25() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_51()) {
            jj_scanpos = xsp;
            if (jj_3R_52()) {
                return true;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_53()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_293() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_23()) {
            jj_scanpos = xsp;
            if (jj_3_24()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_23() {
        if (jj_3R_40()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_310() {
        if (jj_3R_71()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_299() {
        if (jj_scan_token(Import)) {
            return true;
        }
        Token xsp;
        if (jj_3_25()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_25()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_186() {
        if (jj_scan_token(LtE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_256() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_293()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_143() {
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_255() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_22() {
        if (jj_3R_50()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_178() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_255()) {
            jj_scanpos = xsp;
            if (jj_3R_256()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_3R_178()) {
            return true;
        }
        if (jj_scan_token(SingleArrow)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_179()) {
            jj_scanpos = xsp;
            if (jj_3R_180()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_187() {
        if (jj_scan_token(GtE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_49() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        Token xsp;
        if (jj_3R_143()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_143()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(SingleArrow)) {
            return true;
        }
        if (jj_3R_298()) {
            return true;
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_21() {
        if (jj_3R_41()) {
            return true;
        }
        if (jj_scan_token(Dot)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_14() {
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_184() {
        if (jj_scan_token(Lt)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_229() {
        if (jj_3R_71()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_22()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_271() {
        if (jj_3R_41()) {
            return true;
        }
        if (jj_scan_token(Dot)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_228() {
        Token xsp;
        if (jj_3R_271()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_271()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_185() {
        if (jj_scan_token(Gt)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_114() {
        if (jj_scan_token(EqualSign)) {
            return true;
        }
        if (jj_3R_214()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_3R_41()) {
            return true;
        }
        if (jj_scan_token(Colon)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_183() {
        if (jj_scan_token(NotEqualTo)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_20() {
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_19() {
        if (jj_3R_49()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_123() {
        if (jj_3R_229()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_39() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_122()) {
            jj_scanpos = xsp;
            if (jj_3R_123()) {
                jj_scanpos = xsp;
                if (jj_3_19()) {
                    jj_scanpos = xsp;
                    if (jj_3_20()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_122() {
        if (jj_3R_228()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_182() {
        if (jj_scan_token(EqualTo)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_13() {
        if (jj_3R_40()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_252() {
        if (jj_3R_71()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_173() {
        Token xsp;
        if (jj_3R_252()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_252()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_113() {
        if (jj_3R_213()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_172() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_67() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_172()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(Enum)) {
            return true;
        }
        if (jj_3R_71()) {
            return true;
        }
        if (jj_scan_token(Colon)) {
            return true;
        }
        if (jj_scan_token(LeftBracket)) {
            return true;
        }
        if (jj_3R_173()) {
            return true;
        }
        if (jj_scan_token(RightBracket)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_191() {
        if (jj_scan_token(Minus)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_130() {
        if (jj_scan_token(Atmark)) {
            return true;
        }
        if (jj_3R_232()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_278() {
        if (jj_3R_294()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_232() {
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_190() {
        if (jj_scan_token(Plus)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_18() {
        if (jj_3R_48()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_17() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_277() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_16()) {
            jj_scanpos = xsp;
            if (jj_3_17()) {
                jj_scanpos = xsp;
                if (jj_3_18()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_16() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_231() {
        if (jj_3R_277()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_278()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_129() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_231()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_197() {
        if (jj_scan_token(Hat)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_246() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_112() {
        if (jj_scan_token(Colon)) {
            return true;
        }
        if (jj_3R_212()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_131() {
        if (jj_3R_44()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(12)) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_10() {
        if (jj_3R_42()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_195() {
        if (jj_scan_token(SafeRem)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_3R_40()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_3R_69()) {
            return true;
        }
        if (jj_3R_129()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_130()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(DoubleArrow)) {
            return true;
        }
        if (jj_3R_131()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_167() {
        if (jj_scan_token(Or)) {
            return true;
        }
        if (jj_3R_166()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_15() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_45()) {
            jj_scanpos = xsp;
            if (jj_3R_46()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_214() {
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_264() {
        if (jj_3R_42()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_12() {
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_194() {
        if (jj_scan_token(SafeDiv)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_11() {
        if (jj_3R_43()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_261() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_13()) {
            jj_scanpos = xsp;
            if (jj_3_14()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_212() {
        Token xsp;
        if (jj_3R_261()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_261()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_262()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_263()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_244() {
        if (jj_3R_40()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_169() {
        if (jj_scan_token(ReverseArrow)) {
            return true;
        }
        if (jj_3R_242()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_128() {
        if (jj_3R_44()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_196() {
        if (jj_scan_token(Percent)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_127() {
        if (jj_3R_230()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_42() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_126()) {
            jj_scanpos = xsp;
            if (jj_3R_127()) {
                jj_scanpos = xsp;
                if (jj_3R_128()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_126() {
        if (jj_3R_43()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_245() {
        if (jj_scan_token(Dot)) {
            return true;
        }
        if (jj_3R_106()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_213() {
        if (jj_3R_42()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_264()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_193() {
        if (jj_scan_token(Slash)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_111() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_35() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_111()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(1)) {
            return true;
        }
        if (jj_3R_41()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_112()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_113()) {
            jj_scanpos = xsp;
            if (jj_3R_114()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_164() {
        if (jj_3R_106()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_245()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_246()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_192() {
        if (jj_scan_token(Star)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_163() {
        if (jj_3R_41()) {
            return true;
        }
        if (jj_scan_token(LeftParen)) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_244()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RightParen)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_149() {
        if (jj_scan_token(ReverseArrow)) {
            return true;
        }
        if (jj_3R_242()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_259() {
        if (jj_scan_token(Minus)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_162() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_62() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_162()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(FuncAlias)) {
            return true;
        }
        if (jj_3R_163()) {
            return true;
        }
        if (jj_scan_token(Colon)) {
            return true;
        }
        if (jj_3R_164()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_170() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_65() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_170()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(TypeAlias)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        if (jj_scan_token(Colon)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_6() {
        if (jj_3R_38()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_309() {
        if (jj_scan_token(Bang)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_168() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_64() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_168()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(Interface)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_169()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_248() {
        if (jj_3R_38()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_258() {
        if (jj_scan_token(Plus)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_148() {
        if (jj_scan_token(Colon)) {
            return true;
        }
        if (jj_3R_241()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_8() {
        if (jj_3R_40()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_38() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_7()) {
            jj_scanpos = xsp;
            if (jj_3_8()) {
                jj_scanpos = xsp;
                if (jj_3_9()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_7() {
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_34()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_247() {
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_307() {
        if (jj_scan_token(Variable)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_166() {
        if (jj_3R_247()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_248()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_107() {
        if (jj_3R_34()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_165() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_306() {
        if (jj_scan_token(Lazy)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_63() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_165()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(Case)) {
            return true;
        }
        if (jj_scan_token(Type)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        if (jj_scan_token(EqualSign)) {
            return true;
        }
        if (jj_3R_166()) {
            return true;
        }
        if (jj_3R_167()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_167()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_110() {
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_108() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_109() {
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_34() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_108()) {
            jj_scanpos = xsp;
            if (jj_3R_109()) {
                jj_scanpos = xsp;
                if (jj_3R_110()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_33()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_305() {
        if (jj_scan_token(Sealed)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_3R_34()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_107()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_150() {
        if (jj_3R_33()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_304() {
        if (jj_scan_token(Public)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_147() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_55() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_147()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(Type)) {
            return true;
        }
        if (jj_3R_39()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_148()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_149()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3R_150()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_303() {
        if (jj_scan_token(Private)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_302() {
        if (jj_scan_token(Override)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_301() {
        if (jj_scan_token(Abstract)) {
            return true;
        }
        return false;
    }

    /** Generated Token Manager. */
    public KaraffeParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[68];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x0, 0x800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000, 0x0, 0x0, 0x800, 0xc010236, 0x16, 0x10000000, 0x0, 0x0, 0x1000, 0x220, 0x800, 0x0, 0x0, 0x0, 0x200, 0xc0002a0, 0x0, 0x200, 0x0, 0x0, 0x0, 0x200, 0x400000, 0x0, 0x220, 0x8236, 0x8016, 0x0, 0x4000, 0x400, 0x4000, 0x4000, 0xc000228, 0x8, 0xc000220, 0x0, 0x3f0000, 0x800, 0x0, 0x3c00000, 0x0, 0xc000000, 0xf0000000, 0xc000220, 0x0, 0x4000, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x220, 0xc000228, 0x8, 0xc000220,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x40000, 0x0, 0x80, 0x40000, 0x10, 0x40000, 0x80, 0x40000, 0x40000, 0x0, 0x0, 0x0, 0x40000, 0x0, 0x40004, 0x40000, 0x0, 0x100, 0x100000, 0x0, 0x0, 0x0, 0x40000, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x100, 0x40000, 0x0, 0x0, 0x8, 0x0, 0x40000, 0x40000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x0, 0x3000, 0x0, 0x30000, 0x0, 0x21, 0x4, 0x4, 0x0, 0x0, 0x0, 0x80000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x4,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0000000, 0x0, 0xc0000000, 0x0, 0x0, 0xe22ef0bd, 0x60bd, 0x0, 0x0, 0x0, 0x0, 0xc22e8000, 0x0, 0x0, 0x20000000, 0xe0000000, 0xe0000000, 0xe22e9000, 0xc0000000, 0xc0000000, 0x22000000, 0x0, 0x0, 0xe0000000, 0x0, 0x0, 0xc22e8000, 0xe22ee0bd, 0x60bd, 0x10, 0x0, 0x0, 0x0, 0x0, 0xe22e9000, 0x0, 0xe22e9000, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe22e8000, 0x0, 0x0, 0x80000000, 0x0, 0x10f40, 0x10f40, 0xe0000000, 0xc0000000, 0xc0000, 0xc22e8000, 0xe22e9000, 0x0, 0xe22e9000,};
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x1,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[89];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public KaraffeParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public KaraffeParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new KaraffeParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 68; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 68; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor. */
    public KaraffeParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new KaraffeParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 68; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 68; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor with generated Token Manager. */
    public KaraffeParser(KaraffeParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 68; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(KaraffeParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 68; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[97];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 68; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 97; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 89; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3_16();
                                break;
                            case 16:
                                jj_3_17();
                                break;
                            case 17:
                                jj_3_18();
                                break;
                            case 18:
                                jj_3_19();
                                break;
                            case 19:
                                jj_3_20();
                                break;
                            case 20:
                                jj_3_21();
                                break;
                            case 21:
                                jj_3_22();
                                break;
                            case 22:
                                jj_3_23();
                                break;
                            case 23:
                                jj_3_24();
                                break;
                            case 24:
                                jj_3_25();
                                break;
                            case 25:
                                jj_3_26();
                                break;
                            case 26:
                                jj_3_27();
                                break;
                            case 27:
                                jj_3_28();
                                break;
                            case 28:
                                jj_3_29();
                                break;
                            case 29:
                                jj_3_30();
                                break;
                            case 30:
                                jj_3_31();
                                break;
                            case 31:
                                jj_3_32();
                                break;
                            case 32:
                                jj_3_33();
                                break;
                            case 33:
                                jj_3_34();
                                break;
                            case 34:
                                jj_3_35();
                                break;
                            case 35:
                                jj_3_36();
                                break;
                            case 36:
                                jj_3_37();
                                break;
                            case 37:
                                jj_3_38();
                                break;
                            case 38:
                                jj_3_39();
                                break;
                            case 39:
                                jj_3_40();
                                break;
                            case 40:
                                jj_3_41();
                                break;
                            case 41:
                                jj_3_42();
                                break;
                            case 42:
                                jj_3_43();
                                break;
                            case 43:
                                jj_3_44();
                                break;
                            case 44:
                                jj_3_45();
                                break;
                            case 45:
                                jj_3_46();
                                break;
                            case 46:
                                jj_3_47();
                                break;
                            case 47:
                                jj_3_48();
                                break;
                            case 48:
                                jj_3_49();
                                break;
                            case 49:
                                jj_3_50();
                                break;
                            case 50:
                                jj_3_51();
                                break;
                            case 51:
                                jj_3_52();
                                break;
                            case 52:
                                jj_3_53();
                                break;
                            case 53:
                                jj_3_54();
                                break;
                            case 54:
                                jj_3_55();
                                break;
                            case 55:
                                jj_3_56();
                                break;
                            case 56:
                                jj_3_57();
                                break;
                            case 57:
                                jj_3_58();
                                break;
                            case 58:
                                jj_3_59();
                                break;
                            case 59:
                                jj_3_60();
                                break;
                            case 60:
                                jj_3_61();
                                break;
                            case 61:
                                jj_3_62();
                                break;
                            case 62:
                                jj_3_63();
                                break;
                            case 63:
                                jj_3_64();
                                break;
                            case 64:
                                jj_3_65();
                                break;
                            case 65:
                                jj_3_66();
                                break;
                            case 66:
                                jj_3_67();
                                break;
                            case 67:
                                jj_3_68();
                                break;
                            case 68:
                                jj_3_69();
                                break;
                            case 69:
                                jj_3_70();
                                break;
                            case 70:
                                jj_3_71();
                                break;
                            case 71:
                                jj_3_72();
                                break;
                            case 72:
                                jj_3_73();
                                break;
                            case 73:
                                jj_3_74();
                                break;
                            case 74:
                                jj_3_75();
                                break;
                            case 75:
                                jj_3_76();
                                break;
                            case 76:
                                jj_3_77();
                                break;
                            case 77:
                                jj_3_78();
                                break;
                            case 78:
                                jj_3_79();
                                break;
                            case 79:
                                jj_3_80();
                                break;
                            case 80:
                                jj_3_81();
                                break;
                            case 81:
                                jj_3_82();
                                break;
                            case 82:
                                jj_3_83();
                                break;
                            case 83:
                                jj_3_84();
                                break;
                            case 84:
                                jj_3_85();
                                break;
                            case 85:
                                jj_3_86();
                                break;
                            case 86:
                                jj_3_87();
                                break;
                            case 87:
                                jj_3_88();
                                break;
                            case 88:
                                jj_3_89();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
