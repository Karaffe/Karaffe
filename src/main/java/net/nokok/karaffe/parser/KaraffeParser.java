/* KaraffeParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. KaraffeParser.java */
package net.nokok.karaffe.parser;

public class KaraffeParser/*@bgen(jjtree)*/ implements KaraffeParserTreeConstants, KaraffeParserConstants {/*@bgen(jjtree)*/


    protected JJTKaraffeParserState jjtree = new JJTKaraffeParserState();

    public KaraffeParser(String sourceCode) {
        this(new java.io.StringReader(sourceCode));
    }

    public int getCurrentTokenBeginColumn() {
        return jj_input_stream.getBeginColumn();
    }

    public int getCurrentTokenEndColumn() {
        return jj_input_stream.getEndColumn();
    }

    public int getCurrentLine() {
        return jj_input_stream.getEndLine();
    }

//文法定義
    /**

     型宣言

     type 識別子
     修飾子 type 識別子
     修飾子 type 識別子 : 継承元型名
     修飾子 type 識別子              <- 実装インターフェース
     修飾子 type 識別子 : 継承元型名 <- 実装インターフェース
     修飾子 type 識別子 : 継承元型名[型パラメータ]
     修飾子 type 識別子                            <- 実装インターフェース[型パラメータ]
     修飾子 type 識別子 : 継承元型名[型パラメータ] <- 実装インターフェース[型パラメータ]
     */
    final public void TypeDeclaration() throws ParseException {/*@bgen(jjtree) TypeDeclaration */

        ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case Private:
                case Sealed: {
                    ModifierOfType();
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    ;
            }
            jj_consume_token(Type);
            TypeElement();
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case Colon: {
                    jj_consume_token(Colon);
                    SuperType();
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    ;
            }
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case ReverseArrow: {
                    jj_consume_token(ReverseArrow);
                    Interfaces();
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SuperType() throws ParseException {/*@bgen(jjtree) SuperType */

        ASTSuperType jjtn000 = new ASTSuperType(JJTSUPERTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            TypeElement();
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Interfaces() throws ParseException {/*@bgen(jjtree) Interfaces */

        ASTInterfaces jjtn000 = new ASTInterfaces(JJTINTERFACES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_1:
            while ( true ) {
                TypeElement();
                if ( jj_2_1(2) ) {
                    ;
                } else {
                    break label_1;
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     インターフェース宣言
     interface 識別子               <- 拡張インターフェース
     interface 識別子[型パラメータ] <- 拡張インターフェース[型パラメータ]
     */
    final public void InterfaceDeclaration() throws ParseException {/*@bgen(jjtree) InterfaceDeclaration */

        ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(JJTINTERFACEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Interface);
            TypeElement();
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case ReverseArrow: {
                    jj_consume_token(ReverseArrow);
                    Interfaces();
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     TypeAlias宣言
     修飾子 typealias 識別子 : 識別子

     ↓未実装
     修飾子 typealias 識別子 : 識別子[型パラメータ]
     */
    final public void TypeAliasDeclaration() throws ParseException {/*@bgen(jjtree) TypeAliasDeclaration */

        ASTTypeAliasDeclaration jjtn000 = new ASTTypeAliasDeclaration(JJTTYPEALIASDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_2:
            while ( true ) {
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Private:
                    case Sealed: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[4] = jj_gen;
                        break label_2;
                }
                ModifierOfType();
            }
            jj_consume_token(TypeAlias);
            TypeElement();
            jj_consume_token(Colon);
            TypeElement();
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     変数または関数の宣言

     変数宣言
     識別子 : 型名
     修飾子 識別子        = 式
     修飾子 識別子 : 型名
     修飾子 識別子 : 型名 = 式
     修飾子 識別子 : 型名[型パラメータ] = 式

     関数宣言
     修飾子 識別子                      = 関数リテラル
     修飾子 識別子 : 型名リスト -> 型名
     修飾子 識別子 : 型名リスト -> 型名 = 関数リテラル

     修飾子 識別子[型パラメータ] : 型名リスト[型パラメータ] -> 型名[型パラメータ]
     修飾子 識別子[型パラメータ] : 型名リスト[型パラメータ] -> 型名[型パラメータ] = 関数リテラル
     */
    final public void VariableOrFunctionDeclaration() throws ParseException {/*@bgen(jjtree) VariableOrFunctionDeclaration */

        ASTVariableOrFunctionDeclaration jjtn000 = new ASTVariableOrFunctionDeclaration(JJTVARIABLEORFUNCTIONDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_3:
            while ( true ) {
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Abstract:
                    case Lazy:
                    case Operator:
                    case Override:
                    case Private:
                    case Sealed:
                    case UnaryOperator:
                    case Variable: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[5] = jj_gen;
                        break label_3;
                }
                Modifier();
            }
            Identifier();
            if ( jj_2_2(3) ) {
                jj_consume_token(Colon);
                VariableOrFunctionTypeDeclaration();
                jj_consume_token(EqualSign);
                Expression();
            } else {
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Colon:
                    case EqualSign: {
                        switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                            case Colon: {
                                jj_consume_token(Colon);
                                VariableOrFunctionTypeDeclaration();
                                break;
                            }
                            case EqualSign: {
                                jj_consume_token(EqualSign);
                                Expression();
                                break;
                            }
                            default:
                                jj_la1[6] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    }
                    default:
                        jj_la1[7] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     Enumの宣言

     enum 識別子: [識別子 識別子...]
     */
    final public void EnumDeclaration() throws ParseException {/*@bgen(jjtree) EnumDeclaration */

        ASTEnumDeclaration jjtn000 = new ASTEnumDeclaration(JJTENUMDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Enum);
            Identifier();
            jj_consume_token(Colon);
            jj_consume_token(LeftBracket);
            EnumElements();
            jj_consume_token(RightBracket);
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void EnumElements() throws ParseException {/*@bgen(jjtree) EnumElements */

        ASTEnumElements jjtn000 = new ASTEnumElements(JJTENUMELEMENTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_4:
            while ( true ) {
                Identifier();
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Identifier:
                    case JavaFQCN: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[8] = jj_gen;
                        break label_4;
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     型宣言部

     Tは型または型[型パラメータ]

     T
     T -> T
     T -> T ... -> T
     T T ...    -> T
     T -> T T -> T
     */
    final public void VariableOrFunctionTypeDeclaration() throws ParseException {
        TypeElement();
        label_5:
        while ( true ) {
            if ( jj_2_3(2) ) {
                ;
            } else {
                break label_5;
            }
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case SingleArrowChar:
                case SingleArrow: {
                    SingleArrow();
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    ;
            }
            TypeElement();
        }
    }

    /**
     型
     または
     型[型パラメータ]
     */
    final public void TypeElement() throws ParseException {
        KaraffeIdentifier();
        if ( jj_2_4(2) ) {
            TypeParameters();
        } else {
            ;
        }
    }

    /**
     関数リテラル

     () -> ...
     () -> { ... }
     (引数) -> ...
     (引数:型) -> ...
     (引数1 引数2...) -> ...
     (引数1:型 引数2:型 ...) -> ...
     */
    final public void FunctionLiteral() throws ParseException {/*@bgen(jjtree) FunctionLiteral */

        ASTFunctionLiteral jjtn000 = new ASTFunctionLiteral(JJTFUNCTIONLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftParen);
            label_6:
            while ( true ) {
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Identifier:
                    case JavaFQCN: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[10] = jj_gen;
                        break label_6;
                }
                Identifier();
                if ( jj_2_5(2) ) {
                    TypeElement();
                } else {
                    ;
                }
            }
            jj_consume_token(RightParen);
            SingleArrow();
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case LeftBrace: {
                    jj_consume_token(LeftBrace);
                    Statements();
                    jj_consume_token(RightBrace);
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    Statements();
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     Import文

     import 識別子
     import 識別子 -> 別名
     import 識別子 { }

     */
    final public void ImportStatement() throws ParseException {/*@bgen(jjtree) ImportStatement */

        ASTImportStatement jjtn000 = new ASTImportStatement(JJTIMPORTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Import);
            label_7:
            while ( true ) {
                if ( jj_2_6(2) ) {
                    ;
                } else {
                    break label_7;
                }
                Identifier();
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case SingleArrow: {
                        jj_consume_token(SingleArrow);
                        Identifier();
                        break;
                    }
                    default:
                        jj_la1[12] = jj_gen;
                        ;
                }
            }
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case LeftBrace: {
                    jj_consume_token(LeftBrace);
                    Statements();
                    jj_consume_token(RightBrace);
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     型パラメータ
     [型パラメータリスト]

     型パラメータリスト
     型パラメータ 型パラメータ ...

     型パラメータ

     */
    final public void TypeParameters() throws ParseException {/*@bgen(jjtree) TypeParameters */

        ASTTypeParameters jjtn000 = new ASTTypeParameters(JJTTYPEPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(LeftBracket);
            label_8:
            while ( true ) {
                TypeParameter();
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Identifier: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[14] = jj_gen;
                        break label_8;
                }
            }
            jj_consume_token(RightBracket);
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     型パラメータ

     識別子
     識別子 境界型
     */
    final public void TypeParameter() throws ParseException {/*@bgen(jjtree) TypeParameter */

        ASTTypeParameter jjtn000 = new ASTTypeParameter(JJTTYPEPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            TypeElement();
            if ( jj_2_7(2) ) {
                TypeBound();
            } else {
                ;
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     境界型

     < 型変数
     < インターフェース & インターフェース ...
     < 型パラメータ
     */
    final public void TypeBound() throws ParseException {/*@bgen(jjtree) TypeBound */

        ASTTypeBound jjtn000 = new ASTTypeBound(JJTTYPEBOUND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Lt);
            TypeElement();
            label_9:
            while ( true ) {
                if ( jj_2_8(2) ) {
                    ;
                } else {
                    break label_9;
                }
                jj_consume_token(And);
                TypeElement();
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     module モジュール名
     */
    final public void ModuleDeclarationStatement() throws ParseException {/*@bgen(jjtree) ModuleDeclarationStatement */

        ASTModuleDeclarationStatement jjtn000 = new ASTModuleDeclarationStatement(JJTMODULEDECLARATIONSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Module);
            Identifier();
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     アノテーション

     @識別子
     */
    final public void Annotation() throws ParseException {/*@bgen(jjtree) Annotation */

        ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(Atmark);
            Identifier();
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Literal() throws ParseException {
        switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
            case LeftParen: {
                FunctionLiteral();
                break;
            }
            case BoolLiteral: {
                BoolLiteral();
                break;
            }
            case IntLiteral:
            case Hexadecimal: {
                IntLiteral();
                break;
            }
            case FloatLiteral: {
                FloatLiteral();
                break;
            }
            case StringLiteral: {
                StringLiteral();
                break;
            }
            case Undefined: {
                UndefinedLiteral();
                break;
            }
            default:
                jj_la1[15] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public Token Identifier() throws ParseException {
        Token t;
        switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
            case Identifier: {
                t = KaraffeIdentifier();
                {
                    if ( "" != null ) {
                        return t;
                    }
                }
                break;
            }
            case JavaFQCN: {
                t = JavaFQCN();
                {
                    if ( "" != null ) {
                        return t;
                    }
                }
                break;
            }
            default:
                jj_la1[16] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public Token KaraffeIdentifier() throws ParseException {/*@bgen(jjtree) KaraffeIdentifier */

        ASTKaraffeIdentifier jjtn000 = new ASTKaraffeIdentifier(JJTKARAFFEIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Identifier);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
            {
                if ( "" != null ) {
                    return t;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Token JavaFQCN() throws ParseException {/*@bgen(jjtree) JavaFQCN */

        ASTJavaFQCN jjtn000 = new ASTJavaFQCN(JJTJAVAFQCN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(JavaFQCN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
            {
                if ( "" != null ) {
                    return t;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ASTCompileUnit CompileUnit() throws ParseException {/*@bgen(jjtree) CompileUnit */

        ASTCompileUnit jjtn000 = new ASTCompileUnit(JJTCOMPILEUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_10:
            while ( true ) {
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Abstract:
                    case EndModule:
                    case Enum:
                    case Import:
                    case Interface:
                    case Lazy:
                    case Module:
                    case Operator:
                    case Override:
                    case Private:
                    case Sealed:
                    case Type:
                    case UnaryOperator:
                    case TypeAlias:
                    case Variable:
                    case Identifier:
                    case JavaFQCN:
                    case NewLine: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[17] = jj_gen;
                        break label_10;
                }
                if ( jj_2_9(3) ) {
                    Statement();
                } else if ( jj_2_10(3) ) {
                    MethodInvocation();
                } else {
                    switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                        case NewLine: {
                            NewLineToken();
                            break;
                        }
                        default:
                            jj_la1[18] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
            }
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if ( "" != null ) {
                    return jjtn000;
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void Statements() throws ParseException {
        label_11:
        while ( true ) {
            if ( jj_2_11(2) ) {
                ;
            } else {
                break label_11;
            }
            Statement();
        }
    }

    final public void Statement() throws ParseException {
        if ( jj_2_12(2) ) {
            Declaration();
        } else {
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case Import: {
                    ImportStatement();
                    break;
                }
                default:
                    jj_la1[19] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void Declaration() throws ParseException {
        if ( jj_2_13(3) ) {
            VariableOrFunctionDeclaration();
        } else if ( jj_2_14(3) ) {
            TypeDeclaration();
        } else {
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case Interface: {
                    InterfaceDeclaration();
                    break;
                }
                case Private:
                case Sealed:
                case TypeAlias: {
                    TypeAliasDeclaration();
                    break;
                }
                case Module: {
                    ModuleDeclarationStatement();
                    break;
                }
                case Enum: {
                    EnumDeclaration();
                    break;
                }
                case EndModule: {
                    EndOfModule();
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

//MethodInvocations
    final public
        void MethodInvocation() throws ParseException {/*@bgen(jjtree) MethodInvocation */

        ASTMethodInvocation jjtn000 = new ASTMethodInvocation(JJTMETHODINVOCATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            MethodOrExprName();
            Arguments();
            label_12:
            while ( true ) {
                if ( jj_2_15(2) ) {
                    ;
                } else {
                    break label_12;
                }
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Dot: {
                        jj_consume_token(Dot);
                        break;
                    }
                    default:
                        jj_la1[21] = jj_gen;
                        ;
                }
                if ( jj_2_16(2) ) {
                    MethodOrExprName();
                } else {
                    ;
                }
                Arguments();
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void MethodOrExprName() throws ParseException {/*@bgen(jjtree) MethodOrExprName */

        ASTMethodOrExprName jjtn000 = new ASTMethodOrExprName(JJTMETHODOREXPRNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Identifier();
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Arguments() throws ParseException {
        if ( jj_2_19(3) ) {
            jj_consume_token(LeftParen);
            jj_consume_token(RightParen);
        } else {
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case Undefined:
                case BoolLiteral:
                case IntLiteral:
                case Hexadecimal:
                case FloatLiteral:
                case StringLiteral:
                case Identifier:
                case JavaFQCN:
                case LeftParen:
                case Plus:
                case Minus:
                case Bang: {
                    if ( jj_2_17(3) ) {
                        jj_consume_token(LeftParen);
                    } else {
                        ;
                    }
                    ArgumentList();
                    if ( jj_2_18(2) ) {
                        jj_consume_token(RightParen);
                    } else {
                        ;
                    }
                    break;
                }
                default:
                    jj_la1[22] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void ArgumentList() throws ParseException {/*@bgen(jjtree) ArgumentList */

        ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Expression();
            label_13:
            while ( true ) {
                if ( jj_2_20(2) ) {
                    ;
                } else {
                    break label_13;
                }
                Expression();
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /**
     ModuleName::ElementName...
     */
    final public void ExplicitModuleElementAccess() throws ParseException {/*@bgen(jjtree) ExplicitModuleElementAccess */

        ASTExplicitModuleElementAccess jjtn000 = new ASTExplicitModuleElementAccess(JJTEXPLICITMODULEELEMENTACCESS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Identifier();
            label_14:
            while ( true ) {
                jj_consume_token(DoubleColon);
                Identifier();
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case DoubleColon: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[23] = jj_gen;
                        break label_14;
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */

        ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if ( jj_2_21(2) ) {
                OrExpr();
            } else if ( jj_2_22(2) ) {
                AssignmentExpression();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AssignmentExpression() throws ParseException {/*@bgen(jjtree) AssignmentExpression */

        ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if ( jj_2_23(2) ) {
                OrExpr();
            } else if ( jj_2_24(2) ) {
                Assignment();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */

        ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            LeftHandSide();
            AssignmentOperator();
            Expression();
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LeftHandSide() throws ParseException {/*@bgen(jjtree) LeftHandSide */

        ASTLeftHandSide jjtn000 = new ASTLeftHandSide(JJTLEFTHANDSIDE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if ( jj_2_25(2) ) {
                Identifier();
            } else if ( jj_2_26(2) ) {
                ExplicitModuleElementAccess();
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Identifier:
                    case JavaFQCN: {
                        MethodInvocation();
                        break;
                    }
                    default:
                        jj_la1[24] = jj_gen;
                        ;
                }
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AssignmentOperator() throws ParseException {
        switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
            case EqualSign: {
                Assign();
                break;
            }
            case AA: {
                AA();
                break;
            }
            case SA: {
                SA();
                break;
            }
            case MA: {
                MA();
                break;
            }
            case DA: {
                DA();
                break;
            }
            case RA: {
                RA();
                break;
            }
            default:
                jj_la1[25] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void OrExpr() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            AndExpr();
            label_15:
            while ( true ) {
                if ( jj_2_27(2) ) {
                    ;
                } else {
                    break label_15;
                }
                Or();
                AndExpr();
            }
        } catch (Throwable jjte001) {
            if ( jjtc001 ) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte001 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if ( jjte001 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if ( jjtc001 ) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void AndExpr() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Equality();
            label_16:
            while ( true ) {
                if ( jj_2_28(2) ) {
                    ;
                } else {
                    break label_16;
                }
                And();
                Equality();
            }
        } catch (Throwable jjte001) {
            if ( jjtc001 ) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte001 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if ( jjte001 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if ( jjtc001 ) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Equality() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Relational();
            label_17:
            while ( true ) {
                if ( jj_2_29(2) ) {
                    ;
                } else {
                    break label_17;
                }
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case EqualTo: {
                        EqualTo();
                        break;
                    }
                    case NotEqualTo: {
                        NotEqualTo();
                        break;
                    }
                    default:
                        jj_la1[26] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                Relational();
            }
        } catch (Throwable jjte001) {
            if ( jjtc001 ) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte001 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if ( jjte001 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if ( jjtc001 ) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Relational() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Range();
            label_18:
            while ( true ) {
                if ( jj_2_30(2) ) {
                    ;
                } else {
                    break label_18;
                }
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Lt: {
                        LessThan();
                        break;
                    }
                    case Gt: {
                        GreaterThan();
                        break;
                    }
                    case LtE: {
                        LessThanEqualTo();
                        break;
                    }
                    case GtE: {
                        GreaterThanEqualTo();
                        break;
                    }
                    default:
                        jj_la1[27] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                Range();
            }
        } catch (Throwable jjte001) {
            if ( jjtc001 ) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte001 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if ( jjte001 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if ( jjtc001 ) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Range() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Additive();
            label_19:
            while ( true ) {
                if ( jj_2_31(2) ) {
                    ;
                } else {
                    break label_19;
                }
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case ClosedRange: {
                        ClosedRange();
                        break;
                    }
                    case HalfOpenRange: {
                        HalfOpenRange();
                        break;
                    }
                    default:
                        jj_la1[28] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                Additive();
            }
        } catch (Throwable jjte001) {
            if ( jjtc001 ) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte001 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if ( jjte001 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if ( jjtc001 ) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Additive() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Multiplicative();
            label_20:
            while ( true ) {
                if ( jj_2_32(2) ) {
                    ;
                } else {
                    break label_20;
                }
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Plus: {
                        Plus();
                        break;
                    }
                    case Minus: {
                        Minus();
                        break;
                    }
                    default:
                        jj_la1[29] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                Multiplicative();
            }
        } catch (Throwable jjte001) {
            if ( jjtc001 ) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte001 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if ( jjte001 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if ( jjtc001 ) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void Multiplicative() throws ParseException {
        ASTExprNode jjtn001 = new ASTExprNode(JJTEXPRNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpr();
            label_21:
            while ( true ) {
                if ( jj_2_33(2) ) {
                    ;
                } else {
                    break label_21;
                }
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Star: {
                        Star();
                        break;
                    }
                    case Slash: {
                        Slash();
                        break;
                    }
                    case SafeDiv: {
                        SafeDiv();
                        break;
                    }
                    case SafeRem: {
                        SafeRem();
                        break;
                    }
                    case Percent: {
                        Percent();
                        break;
                    }
                    case Hat: {
                        Hat();
                        break;
                    }
                    default:
                        jj_la1[30] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                UnaryExpr();
            }
        } catch (Throwable jjte001) {
            if ( jjtc001 ) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte001 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if ( jjte001 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if ( jjtc001 ) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void UnaryExpr() throws ParseException {
        switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
            case Plus: {
                UnaryPlus();
                UnaryExprNotPlusMinus();
                break;
            }
            case Minus: {
                UnaryMinus();
                UnaryExprNotPlusMinus();
                break;
            }
            case Undefined:
            case BoolLiteral:
            case IntLiteral:
            case Hexadecimal:
            case FloatLiteral:
            case StringLiteral:
            case Identifier:
            case JavaFQCN:
            case LeftParen:
            case Bang: {
                UnaryExprNotPlusMinus();
                break;
            }
            default:
                jj_la1[31] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void UnaryExprNotPlusMinus() throws ParseException {
        if ( jj_2_34(3) ) {
            Primary();
        } else {
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case Bang: {
                    UnaryBang();
                    Primary();
                    break;
                }
                default:
                    jj_la1[32] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void Primary() throws ParseException {
        if ( jj_2_35(2) ) {
            MethodInvocation();
        } else if ( jj_2_36(2) ) {
            Literal();
        } else if ( jj_2_37(2) ) {
            jj_consume_token(LeftParen);
            Expression();
            jj_consume_token(RightParen);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /**
     Identifier=>Identifier...
     */
    final public void ElementAccess() throws ParseException {/*@bgen(jjtree) ElementAccess */

        ASTElementAccess jjtn000 = new ASTElementAccess(JJTELEMENTACCESS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Identifier();
            label_22:
            while ( true ) {
                jj_consume_token(DoubleArrow);
                Identifier();
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case DoubleArrow: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[33] = jj_gen;
                        break label_22;
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Modifier() throws ParseException {
        if ( jj_2_38(2) ) {
            ModifierOfType();
        } else if ( jj_2_39(2) ) {
            ModifierOfVariable();
        } else {
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case Abstract:
                case Override:
                case Private:
                case Sealed: {
                    ModifierOfFunction();
                    break;
                }
                case Operator:
                case UnaryOperator: {
                    ModifierOfOperator();
                    break;
                }
                default:
                    jj_la1[34] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void ModifierOfType() throws ParseException {/*@bgen(jjtree) ModifierOfType */

        ASTModifierOfType jjtn000 = new ASTModifierOfType(JJTMODIFIEROFTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_23:
            while ( true ) {
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Private: {
                        PrivateModifier();
                        break;
                    }
                    case Sealed: {
                        SealedModifier();
                        break;
                    }
                    default:
                        jj_la1[35] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                if ( jj_2_40(2) ) {
                    ;
                } else {
                    break label_23;
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ModifierOfVariable() throws ParseException {/*@bgen(jjtree) ModifierOfVariable */

        ASTModifierOfVariable jjtn000 = new ASTModifierOfVariable(JJTMODIFIEROFVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_24:
            while ( true ) {
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Private: {
                        PrivateModifier();
                        break;
                    }
                    case Variable: {
                        VariableModifier();
                        break;
                    }
                    case Lazy: {
                        LazyModifier();
                        break;
                    }
                    default:
                        jj_la1[36] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                if ( jj_2_41(2) ) {
                    ;
                } else {
                    break label_24;
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ModifierOfFunction() throws ParseException {/*@bgen(jjtree) ModifierOfFunction */

        ASTModifierOfFunction jjtn000 = new ASTModifierOfFunction(JJTMODIFIEROFFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_25:
            while ( true ) {
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Abstract: {
                        AbstractModifier();
                        break;
                    }
                    case Override: {
                        OverrideModifier();
                        break;
                    }
                    case Private: {
                        PrivateModifier();
                        break;
                    }
                    case Sealed: {
                        SealedModifier();
                        break;
                    }
                    default:
                        jj_la1[37] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                if ( jj_2_42(2) ) {
                    ;
                } else {
                    break label_25;
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ModifierOfOperator() throws ParseException {/*@bgen(jjtree) ModifierOfOperator */

        ASTModifierOfOperator jjtn000 = new ASTModifierOfOperator(JJTMODIFIEROFOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_26:
            while ( true ) {
                switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                    case Operator: {
                        OpModifier();
                        break;
                    }
                    case UnaryOperator: {
                        UnaryOpModifier();
                        break;
                    }
                    default:
                        jj_la1[38] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                if ( jj_2_43(2) ) {
                    ;
                } else {
                    break label_26;
                }
            }
        } catch (Throwable jjte000) {
            if ( jjtc000 ) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException ) {
                {
                    if ( true ) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException ) {
                {
                    if ( true ) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if ( true ) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AbstractModifier() throws ParseException {/*@bgen(jjtree) AbstractModifier */

        ASTAbstractModifier jjtn000 = new ASTAbstractModifier(JJTABSTRACTMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Abstract);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void OverrideModifier() throws ParseException {/*@bgen(jjtree) OverrideModifier */

        ASTOverrideModifier jjtn000 = new ASTOverrideModifier(JJTOVERRIDEMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Override);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void PrivateModifier() throws ParseException {/*@bgen(jjtree) PrivateModifier */

        ASTPrivateModifier jjtn000 = new ASTPrivateModifier(JJTPRIVATEMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Private);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SealedModifier() throws ParseException {/*@bgen(jjtree) SealedModifier */

        ASTSealedModifier jjtn000 = new ASTSealedModifier(JJTSEALEDMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Sealed);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LazyModifier() throws ParseException {/*@bgen(jjtree) LazyModifier */

        ASTLazyModifier jjtn000 = new ASTLazyModifier(JJTLAZYMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Lazy);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void OpModifier() throws ParseException {/*@bgen(jjtree) OpModifier */

        ASTOpModifier jjtn000 = new ASTOpModifier(JJTOPMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Operator);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UnaryOpModifier() throws ParseException {/*@bgen(jjtree) UnaryOpModifier */

        ASTUnaryOpModifier jjtn000 = new ASTUnaryOpModifier(JJTUNARYOPMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(UnaryOperator);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void VariableModifier() throws ParseException {/*@bgen(jjtree) VariableModifier */

        ASTVariableModifier jjtn000 = new ASTVariableModifier(JJTVARIABLEMODIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Variable);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UnaryPlus() throws ParseException {/*@bgen(jjtree) UnaryPlus */

        ASTUnaryPlus jjtn000 = new ASTUnaryPlus(JJTUNARYPLUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Plus);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UnaryBang() throws ParseException {/*@bgen(jjtree) UnaryBang */

        ASTUnaryBang jjtn000 = new ASTUnaryBang(JJTUNARYBANG);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Bang);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UnaryMinus() throws ParseException {/*@bgen(jjtree) UnaryMinus */

        ASTUnaryMinus jjtn000 = new ASTUnaryMinus(JJTUNARYMINUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Minus);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void EndOfModule() throws ParseException {/*@bgen(jjtree) EndOfModule */

        ASTEndOfModule jjtn000 = new ASTEndOfModule(JJTENDOFMODULE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(EndModule);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void NewLineToken() throws ParseException {/*@bgen(jjtree) NewLineToken */

        ASTNewLineToken jjtn000 = new ASTNewLineToken(JJTNEWLINETOKEN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            jj_consume_token(NewLine);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Star() throws ParseException {/*@bgen(jjtree) Star */

        ASTStar jjtn000 = new ASTStar(JJTSTAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Star);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Slash() throws ParseException {/*@bgen(jjtree) Slash */

        ASTSlash jjtn000 = new ASTSlash(JJTSLASH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Slash);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Percent() throws ParseException {/*@bgen(jjtree) Percent */

        ASTPercent jjtn000 = new ASTPercent(JJTPERCENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Percent);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SafeDiv() throws ParseException {/*@bgen(jjtree) SafeDiv */

        ASTSafeDiv jjtn000 = new ASTSafeDiv(JJTSAFEDIV);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(SafeDiv);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SafeRem() throws ParseException {/*@bgen(jjtree) SafeRem */

        ASTSafeRem jjtn000 = new ASTSafeRem(JJTSAFEREM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(SafeRem);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Hat() throws ParseException {/*@bgen(jjtree) Hat */

        ASTHat jjtn000 = new ASTHat(JJTHAT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Hat);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Plus() throws ParseException {/*@bgen(jjtree) Plus */

        ASTPlus jjtn000 = new ASTPlus(JJTPLUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Plus);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Minus() throws ParseException {/*@bgen(jjtree) Minus */

        ASTMinus jjtn000 = new ASTMinus(JJTMINUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Minus);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void EqualTo() throws ParseException {/*@bgen(jjtree) EqualTo */

        ASTEqualTo jjtn000 = new ASTEqualTo(JJTEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(EqualTo);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void NotEqualTo() throws ParseException {/*@bgen(jjtree) NotEqualTo */

        ASTNotEqualTo jjtn000 = new ASTNotEqualTo(JJTNOTEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(NotEqualTo);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void GreaterThan() throws ParseException {/*@bgen(jjtree) GreaterThan */

        ASTGreaterThan jjtn000 = new ASTGreaterThan(JJTGREATERTHAN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Gt);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LessThan() throws ParseException {/*@bgen(jjtree) LessThan */

        ASTLessThan jjtn000 = new ASTLessThan(JJTLESSTHAN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Lt);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void GreaterThanEqualTo() throws ParseException {/*@bgen(jjtree) GreaterThanEqualTo */

        ASTGreaterThanEqualTo jjtn000 = new ASTGreaterThanEqualTo(JJTGREATERTHANEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(GtE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void LessThanEqualTo() throws ParseException {/*@bgen(jjtree) LessThanEqualTo */

        ASTLessThanEqualTo jjtn000 = new ASTLessThanEqualTo(JJTLESSTHANEQUALTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(LtE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Comparable() throws ParseException {/*@bgen(jjtree) Comparable */

        ASTComparable jjtn000 = new ASTComparable(JJTCOMPARABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Comparable);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void NonComparable() throws ParseException {/*@bgen(jjtree) NonComparable */

        ASTNonComparable jjtn000 = new ASTNonComparable(JJTNONCOMPARABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(NonComparable);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void And() throws ParseException {/*@bgen(jjtree) And */

        ASTAnd jjtn000 = new ASTAnd(JJTAND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(And);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Or() throws ParseException {/*@bgen(jjtree) Or */

        ASTOr jjtn000 = new ASTOr(JJTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Or);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void BoolLiteral() throws ParseException {/*@bgen(jjtree) BoolLiteral */

        ASTBoolLiteral jjtn000 = new ASTBoolLiteral(JJTBOOLLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(BoolLiteral);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void IntLiteral() throws ParseException {/*@bgen(jjtree) IntLiteral */

        ASTIntLiteral jjtn000 = new ASTIntLiteral(JJTINTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case IntLiteral: {
                    t = jj_consume_token(IntLiteral);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                case Hexadecimal: {
                    t = jj_consume_token(Hexadecimal);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                default:
                    jj_la1[39] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void FloatLiteral() throws ParseException {/*@bgen(jjtree) FloatLiteral */

        ASTFloatLiteral jjtn000 = new ASTFloatLiteral(JJTFLOATLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(FloatLiteral);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void StringLiteral() throws ParseException {/*@bgen(jjtree) StringLiteral */

        ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(StringLiteral);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void UndefinedLiteral() throws ParseException {/*@bgen(jjtree) UndefinedLiteral */

        ASTUndefinedLiteral jjtn000 = new ASTUndefinedLiteral(JJTUNDEFINEDLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(Undefined);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SingleArrow() throws ParseException {/*@bgen(jjtree) SingleArrow */

        ASTSingleArrow jjtn000 = new ASTSingleArrow(JJTSINGLEARROW);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            switch ( (jj_ntk == -1) ? jj_ntk_f() : jj_ntk ) {
                case SingleArrow: {
                    t = jj_consume_token(SingleArrow);
                    break;
                }
                case SingleArrowChar: {
                    t = jj_consume_token(SingleArrowChar);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(t);
                    break;
                }
                default:
                    jj_la1[40] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Assign() throws ParseException {/*@bgen(jjtree) Assign */

        ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(EqualSign);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ClosedRange() throws ParseException {/*@bgen(jjtree) ClosedRange */

        ASTClosedRange jjtn000 = new ASTClosedRange(JJTCLOSEDRANGE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(ClosedRange);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void HalfOpenRange() throws ParseException {/*@bgen(jjtree) HalfOpenRange */

        ASTHalfOpenRange jjtn000 = new ASTHalfOpenRange(JJTHALFOPENRANGE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(HalfOpenRange);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AA() throws ParseException {/*@bgen(jjtree) AA */

        ASTAA jjtn000 = new ASTAA(JJTAA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(AA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SA() throws ParseException {/*@bgen(jjtree) SA */

        ASTSA jjtn000 = new ASTSA(JJTSA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(SA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void MA() throws ParseException {/*@bgen(jjtree) MA */

        ASTMA jjtn000 = new ASTMA(JJTMA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(MA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void DA() throws ParseException {/*@bgen(jjtree) DA */

        ASTDA jjtn000 = new ASTDA(JJTDA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(DA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void RA() throws ParseException {/*@bgen(jjtree) RA */

        ASTRA jjtn000 = new ASTRA(JJTRA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(RA);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(t);
        } finally {
            if ( jjtc000 ) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    private boolean jj_2_33(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_33();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    private boolean jj_2_34(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_34();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    private boolean jj_2_35(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_35();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(34, xla);
        }
    }

    private boolean jj_2_36(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_36();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(35, xla);
        }
    }

    private boolean jj_2_37(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_37();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(36, xla);
        }
    }

    private boolean jj_2_38(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_38();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(37, xla);
        }
    }

    private boolean jj_2_39(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_39();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(38, xla);
        }
    }

    private boolean jj_2_40(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_40();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(39, xla);
        }
    }

    private boolean jj_2_41(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_41();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(40, xla);
        }
    }

    private boolean jj_2_42(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_42();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(41, xla);
        }
    }

    private boolean jj_2_43(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_43();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(42, xla);
        }
    }

    private boolean jj_3R_134() {
        if ( jj_scan_token(Lazy) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_174() {
        if ( jj_scan_token(MA) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_132() {
        if ( jj_scan_token(Sealed) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_173() {
        if ( jj_scan_token(SA) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_131() {
        if ( jj_scan_token(Private) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_172() {
        if ( jj_scan_token(AA) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_130() {
        if ( jj_3R_166() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_129() {
        if ( jj_3R_165() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_128() {
        if ( jj_3R_164() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_127() {
        if ( jj_3R_163() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_136() {
        if ( jj_scan_token(Override) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_126() {
        if ( jj_3R_162() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_72() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_125() ) {
            jj_scanpos = xsp;
            if ( jj_3R_126() ) {
                jj_scanpos = xsp;
                if ( jj_3R_127() ) {
                    jj_scanpos = xsp;
                    if ( jj_3R_128() ) {
                        jj_scanpos = xsp;
                        if ( jj_3R_129() ) {
                            jj_scanpos = xsp;
                            if ( jj_3R_130() ) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_125() {
        if ( jj_3R_161() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_113() {
        if ( jj_scan_token(HalfOpenRange) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_135() {
        if ( jj_scan_token(Abstract) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_139() {
        if ( jj_scan_token(SingleArrowChar) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_112() {
        if ( jj_scan_token(ClosedRange) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_171() {
        if ( jj_scan_token(EqualSign) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_87() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_scan_token(78) ) {
            jj_scanpos = xsp;
            if ( jj_3R_139() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_166() {
        if ( jj_scan_token(Undefined) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_165() {
        if ( jj_scan_token(StringLiteral) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_164() {
        if ( jj_scan_token(FloatLiteral) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_180() {
        if ( jj_scan_token(Hexadecimal) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_179() {
        if ( jj_scan_token(IntLiteral) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_163() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_179() ) {
            jj_scanpos = xsp;
            if ( jj_3R_180() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_167() {
        if ( jj_scan_token(LeftBrace) ) {
            return true;
        }
        if ( jj_3R_181() ) {
            return true;
        }
        if ( jj_scan_token(RightBrace) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_84() {
        if ( jj_3R_137() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_8() {
        if ( jj_scan_token(And) ) {
            return true;
        }
        if ( jj_3R_27() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_162() {
        if ( jj_scan_token(BoolLiteral) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_80() {
        if ( jj_3R_135() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_85() {
        if ( jj_3R_138() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_43() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_84() ) {
            jj_scanpos = xsp;
            if ( jj_3R_85() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_183() {
        Token xsp;
        if ( jj_3_43() ) {
            return true;
        }
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_43() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_145() {
        if ( jj_scan_token(Module) ) {
            return true;
        }
        if ( jj_3R_31() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_77() {
        if ( jj_3R_131() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_83() {
        if ( jj_3R_132() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_46() {
        if ( jj_scan_token(Or) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_82() {
        if ( jj_3R_131() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_81() {
        if ( jj_3R_136() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_42() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_80() ) {
            jj_scanpos = xsp;
            if ( jj_3R_81() ) {
                jj_scanpos = xsp;
                if ( jj_3R_82() ) {
                    jj_scanpos = xsp;
                    if ( jj_3R_83() ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_182() {
        Token xsp;
        if ( jj_3_42() ) {
            return true;
        }
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_42() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_7() {
        if ( jj_3R_33() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_75() {
        if ( jj_3R_131() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_33() {
        if ( jj_scan_token(Lt) ) {
            return true;
        }
        if ( jj_3R_27() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_79() {
        if ( jj_3R_134() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_48() {
        if ( jj_scan_token(And) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_78() {
        if ( jj_3R_133() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_41() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_77() ) {
            jj_scanpos = xsp;
            if ( jj_3R_78() ) {
                jj_scanpos = xsp;
                if ( jj_3R_79() ) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_32() {
        if ( jj_scan_token(SingleArrow) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_74() {
        Token xsp;
        if ( jj_3_41() ) {
            return true;
        }
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_41() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_76() {
        if ( jj_3R_132() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_88() {
        if ( jj_3R_140() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_40() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_75() ) {
            jj_scanpos = xsp;
            if ( jj_3R_76() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_73() {
        Token xsp;
        if ( jj_3_40() ) {
            return true;
        }
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_40() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_140() {
        if ( jj_3R_27() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_170() {
        if ( jj_3R_183() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_169() {
        if ( jj_3R_182() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_39() {
        if ( jj_3R_74() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_148() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_38() ) {
            jj_scanpos = xsp;
            if ( jj_3_39() ) {
                jj_scanpos = xsp;
                if ( jj_3R_169() ) {
                    jj_scanpos = xsp;
                    if ( jj_3R_170() ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_38() {
        if ( jj_3R_73() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_30() {
        if ( jj_scan_token(LeftBracket) ) {
            return true;
        }
        Token xsp;
        if ( jj_3R_88() ) {
            return true;
        }
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3R_88() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_5() {
        if ( jj_3R_27() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_150() {
        if ( jj_scan_token(EqualSign) ) {
            return true;
        }
        if ( jj_3R_41() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_6() {
        if ( jj_3R_31() ) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_32() ) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_110() {
        if ( jj_scan_token(LtE) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_69() {
        if ( jj_3R_121() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_68() {
        if ( jj_3R_120() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_37() {
        if ( jj_scan_token(LeftParen) ) {
            return true;
        }
        if ( jj_3R_41() ) {
            return true;
        }
        if ( jj_scan_token(RightParen) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_67() {
        if ( jj_3R_119() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_36() {
        if ( jj_3R_72() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_66() {
        if ( jj_3R_118() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_35() {
        if ( jj_3R_35() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_64() {
        if ( jj_3R_116() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_65() {
        if ( jj_3R_117() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_71() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_35() ) {
            jj_scanpos = xsp;
            if ( jj_3_36() ) {
                jj_scanpos = xsp;
                if ( jj_3_37() ) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_61() {
        if ( jj_3R_114() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_62() {
        if ( jj_3R_115() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_142() {
        if ( jj_scan_token(Import) ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_6() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if ( jj_3R_167() ) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_111() {
        if ( jj_scan_token(GtE) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_178() {
        if ( jj_3R_31() ) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_5() ) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_177() {
        if ( jj_3R_184() ) {
            return true;
        }
        if ( jj_3R_71() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_160() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_34() ) {
            jj_scanpos = xsp;
            if ( jj_3R_177() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_34() {
        if ( jj_3R_71() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_33() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_64() ) {
            jj_scanpos = xsp;
            if ( jj_3R_65() ) {
                jj_scanpos = xsp;
                if ( jj_3R_66() ) {
                    jj_scanpos = xsp;
                    if ( jj_3R_67() ) {
                        jj_scanpos = xsp;
                        if ( jj_3R_68() ) {
                            jj_scanpos = xsp;
                            if ( jj_3R_69() ) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if ( jj_3R_70() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_58() {
        if ( jj_3R_112() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if ( jj_3R_30() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_59() {
        if ( jj_3R_113() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_124() {
        if ( jj_3R_160() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_108() {
        if ( jj_scan_token(Lt) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_32() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_61() ) {
            jj_scanpos = xsp;
            if ( jj_3R_62() ) {
                return true;
            }
        }
        if ( jj_3R_63() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_123() {
        if ( jj_3R_159() ) {
            return true;
        }
        if ( jj_3R_160() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_70() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_122() ) {
            jj_scanpos = xsp;
            if ( jj_3R_123() ) {
                jj_scanpos = xsp;
                if ( jj_3R_124() ) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_122() {
        if ( jj_3R_158() ) {
            return true;
        }
        if ( jj_3R_160() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_29() {
        if ( jj_3R_87() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_161() {
        if ( jj_scan_token(LeftParen) ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3R_178() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        if ( jj_scan_token(RightParen) ) {
            return true;
        }
        if ( jj_3R_87() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_109() {
        if ( jj_scan_token(Gt) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_53() {
        if ( jj_3R_108() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_63() {
        if ( jj_3R_70() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_33() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_51() {
        if ( jj_3R_107() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_50() {
        if ( jj_3R_106() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_31() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_58() ) {
            jj_scanpos = xsp;
            if ( jj_3R_59() ) {
                return true;
            }
        }
        if ( jj_3R_60() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_3() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_29() ) {
            jj_scanpos = xsp;
        }
        if ( jj_3R_27() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_56() {
        if ( jj_3R_111() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_60() {
        if ( jj_3R_63() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_32() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_107() {
        if ( jj_scan_token(NotEqualTo) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_27() {
        if ( jj_3R_86() ) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_4() ) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_55() {
        if ( jj_3R_110() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_157() {
        if ( jj_3R_176() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_54() {
        if ( jj_3R_109() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_149() {
        if ( jj_scan_token(Colon) ) {
            return true;
        }
        if ( jj_3R_28() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_98() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_149() ) {
            jj_scanpos = xsp;
            if ( jj_3R_150() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_30() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_53() ) {
            jj_scanpos = xsp;
            if ( jj_3R_54() ) {
                jj_scanpos = xsp;
                if ( jj_3R_55() ) {
                    jj_scanpos = xsp;
                    if ( jj_3R_56() ) {
                        return true;
                    }
                }
            }
        }
        if ( jj_3R_57() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_57() {
        if ( jj_3R_60() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_31() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_29() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_50() ) {
            jj_scanpos = xsp;
            if ( jj_3R_51() ) {
                return true;
            }
        }
        if ( jj_3R_52() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_156() {
        if ( jj_3R_175() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_106() {
        if ( jj_scan_token(EqualTo) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_28() {
        if ( jj_3R_27() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_3() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_155() {
        if ( jj_3R_174() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_52() {
        if ( jj_3R_57() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_30() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_28() {
        if ( jj_3R_48() ) {
            return true;
        }
        if ( jj_3R_49() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if ( jj_scan_token(Colon) ) {
            return true;
        }
        if ( jj_3R_28() ) {
            return true;
        }
        if ( jj_scan_token(EqualSign) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_115() {
        if ( jj_scan_token(Minus) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_154() {
        if ( jj_3R_173() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_49() {
        if ( jj_3R_52() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_29() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_27() {
        if ( jj_3R_46() ) {
            return true;
        }
        if ( jj_3R_47() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_47() {
        if ( jj_3R_49() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_28() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_153() {
        if ( jj_3R_172() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_114() {
        if ( jj_scan_token(Plus) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_146() {
        if ( jj_scan_token(Enum) ) {
            return true;
        }
        if ( jj_3R_31() ) {
            return true;
        }
        if ( jj_scan_token(Colon) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_42() {
        if ( jj_3R_47() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_27() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_121() {
        if ( jj_scan_token(Hat) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_152() {
        if ( jj_3R_171() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_104() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_152() ) {
            jj_scanpos = xsp;
            if ( jj_3R_153() ) {
                jj_scanpos = xsp;
                if ( jj_3R_154() ) {
                    jj_scanpos = xsp;
                    if ( jj_3R_155() ) {
                        jj_scanpos = xsp;
                        if ( jj_3R_156() ) {
                            jj_scanpos = xsp;
                            if ( jj_3R_157() ) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_101() {
        if ( jj_scan_token(ReverseArrow) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_18() {
        if ( jj_scan_token(RightParen) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_97() {
        if ( jj_3R_148() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_37() {
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3R_97() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        if ( jj_3R_31() ) {
            return true;
        }
        xsp = jj_scanpos;
        if ( jj_3_2() ) {
            jj_scanpos = xsp;
            if ( jj_3R_98() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_16() {
        if ( jj_3R_40() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_26() {
        if ( jj_3R_45() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_25() {
        if ( jj_3R_31() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_103() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_25() ) {
            jj_scanpos = xsp;
            if ( jj_3_26() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_119() {
        if ( jj_scan_token(SafeRem) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_44() {
        if ( jj_3R_103() ) {
            return true;
        }
        if ( jj_3R_104() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_185() {
        if ( jj_scan_token(ReverseArrow) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_24() {
        if ( jj_3R_44() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_105() {
        if ( jj_scan_token(DoubleColon) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_118() {
        if ( jj_scan_token(SafeDiv) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_43() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_23() ) {
            jj_scanpos = xsp;
            if ( jj_3_24() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_23() {
        if ( jj_3R_42() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_22() {
        if ( jj_3R_43() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_100() {
        if ( jj_scan_token(Colon) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_41() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_21() ) {
            jj_scanpos = xsp;
            if ( jj_3_22() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_21() {
        if ( jj_3R_42() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_20() {
        if ( jj_3R_41() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_168() {
        if ( jj_3R_73() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_15() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_scan_token(51) ) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if ( jj_3_16() ) {
            jj_scanpos = xsp;
        }
        if ( jj_3R_39() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_120() {
        if ( jj_scan_token(Percent) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_144() {
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3R_168() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        if ( jj_scan_token(TypeAlias) ) {
            return true;
        }
        if ( jj_3R_27() ) {
            return true;
        }
        if ( jj_scan_token(Colon) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_45() {
        if ( jj_3R_31() ) {
            return true;
        }
        Token xsp;
        if ( jj_3R_105() ) {
            return true;
        }
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3R_105() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_117() {
        if ( jj_scan_token(Slash) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_151() {
        if ( jj_3R_41() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_20() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_143() {
        if ( jj_scan_token(Interface) ) {
            return true;
        }
        if ( jj_3R_27() ) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_185() ) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3_17() {
        if ( jj_scan_token(LeftParen) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_102() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_17() ) {
            jj_scanpos = xsp;
        }
        if ( jj_3R_151() ) {
            return true;
        }
        xsp = jj_scanpos;
        if ( jj_3_18() ) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_39() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_19() ) {
            jj_scanpos = xsp;
            if ( jj_3R_102() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_19() {
        if ( jj_scan_token(LeftParen) ) {
            return true;
        }
        if ( jj_scan_token(RightParen) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_116() {
        if ( jj_scan_token(Star) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_1() {
        if ( jj_3R_27() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_40() {
        if ( jj_3R_31() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_35() {
        if ( jj_3R_40() ) {
            return true;
        }
        if ( jj_3R_39() ) {
            return true;
        }
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_15() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_147() {
        if ( jj_scan_token(EndModule) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_99() {
        if ( jj_3R_73() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_96() {
        if ( jj_3R_147() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_10() {
        if ( jj_3R_35() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_95() {
        if ( jj_3R_146() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_38() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_99() ) {
            jj_scanpos = xsp;
        }
        if ( jj_scan_token(Type) ) {
            return true;
        }
        if ( jj_3R_27() ) {
            return true;
        }
        xsp = jj_scanpos;
        if ( jj_3R_100() ) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if ( jj_3R_101() ) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_94() {
        if ( jj_3R_145() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_93() {
        if ( jj_3R_144() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_92() {
        if ( jj_3R_143() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_14() {
        if ( jj_3R_38() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_36() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_13() ) {
            jj_scanpos = xsp;
            if ( jj_3_14() ) {
                jj_scanpos = xsp;
                if ( jj_3R_92() ) {
                    jj_scanpos = xsp;
                    if ( jj_3R_93() ) {
                        jj_scanpos = xsp;
                        if ( jj_3R_94() ) {
                            jj_scanpos = xsp;
                            if ( jj_3R_95() ) {
                                jj_scanpos = xsp;
                                if ( jj_3R_96() ) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_13() {
        if ( jj_3R_37() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_159() {
        if ( jj_scan_token(Minus) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_91() {
        if ( jj_3R_142() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_34() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_12() ) {
            jj_scanpos = xsp;
            if ( jj_3R_91() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_12() {
        if ( jj_3R_36() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_184() {
        if ( jj_scan_token(Bang) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3_11() {
        if ( jj_3R_34() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_181() {
        Token xsp;
        while ( true ) {
            xsp = jj_scanpos;
            if ( jj_3_11() ) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_9() {
        if ( jj_3R_34() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_158() {
        if ( jj_scan_token(Plus) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_141() {
        if ( jj_scan_token(JavaFQCN) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_133() {
        if ( jj_scan_token(Variable) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_138() {
        if ( jj_scan_token(UnaryOperator) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_86() {
        if ( jj_scan_token(Identifier) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_176() {
        if ( jj_scan_token(RA) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_90() {
        if ( jj_3R_141() ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_137() {
        if ( jj_scan_token(Operator) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_175() {
        if ( jj_scan_token(DA) ) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_31() {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_89() ) {
            jj_scanpos = xsp;
            if ( jj_3R_90() ) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_89() {
        if ( jj_3R_86() ) {
            return true;
        }
        return false;
    }

    /** Generated Token Manager. */
    public KaraffeParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[41];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{ 0x180000, 0x0, 0x0, 0x0, 0x180000, 0x49e8200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba000000, 0x0, 0x5dffa00, 0x0, 0x2000, 0x1195800, 0x0, 0xba000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba000000, 0x0, 0x0, 0x9e0200, 0x180000, 0x4088000, 0x1c0200, 0x820000, 0x30000000, 0x0, };
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{ 0x0, 0x20000, 0x0, 0x0, 0x0, 0x0, 0x120000, 0x120000, 0x480, 0x0, 0x480, 0x2000, 0x0, 0x2000, 0x80, 0x8008, 0x480, 0x480, 0x0, 0x0, 0x0, 0x80000, 0xc0008488, 0x40000, 0x480, 0x3f00000, 0x0, 0x3c000000, 0x0, 0xc0000000, 0x0, 0xc0008488, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{ 0x0, 0x0, 0x800, 0x800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6000, 0x0, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x1000000, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0xc0000, 0x0, 0xc00000, 0x0, 0x21f, 0x40, 0x40, 0x20000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6000, };
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[43];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public KaraffeParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public KaraffeParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new KaraffeParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for ( int i = 0; i < 41; i++ ) {
            jj_la1[i] = -1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ ) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for ( int i = 0; i < 41; i++ ) {
            jj_la1[i] = -1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ ) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor. */
    public KaraffeParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new KaraffeParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for ( int i = 0; i < 41; i++ ) {
            jj_la1[i] = -1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ ) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for ( int i = 0; i < 41; i++ ) {
            jj_la1[i] = -1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ ) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor with generated Token Manager. */
    public KaraffeParser(KaraffeParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for ( int i = 0; i < 41; i++ ) {
            jj_la1[i] = -1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ ) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(KaraffeParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for ( int i = 0; i < 41; i++ ) {
            jj_la1[i] = -1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ ) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ( (oldToken = token).next != null ) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if ( token.kind == kind ) {
            jj_gen++;
            if ( ++jj_gc > 100 ) {
                jj_gc = 0;
                for ( int i = 0; i < jj_2_rtns.length; i++ ) {
                    JJCalls c = jj_2_rtns[i];
                    while ( c != null ) {
                        if ( c.gen < jj_gen ) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if ( jj_scanpos == jj_lastpos ) {
            jj_la--;
            if ( jj_scanpos.next == null ) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if ( jj_rescan ) {
            int i = 0;
            Token tok = token;
            while ( tok != null && tok != jj_scanpos ) {
                i++;
                tok = tok.next;
            }
            if ( tok != null ) {
                jj_add_error_token(kind, i);
            }
        }
        if ( jj_scanpos.kind != kind ) {
            return true;
        }
        if ( jj_la == 0 && jj_scanpos == jj_lastpos ) {
            throw jj_ls;
        }
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if ( token.next != null ) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for ( int i = 0; i < index; i++ ) {
            if ( t.next != null ) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk_f() {
        if ( (jj_nt = token.next) == null ) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if ( pos >= 100 ) {
            return;
        }
        if ( pos == jj_endpos + 1 ) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if ( jj_endpos != 0 ) {
            jj_expentry = new int[jj_endpos];
            for ( int i = 0; i < jj_endpos; i++ ) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for ( java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if ( oldentry.length == jj_expentry.length ) {
                    for ( int i = 0; i < jj_expentry.length; i++ ) {
                        if ( oldentry[i] != jj_expentry[i] ) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if ( pos != 0 ) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[90];
        if ( jj_kind >= 0 ) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for ( int i = 0; i < 41; i++ ) {
            if ( jj_la1[i] == jj_gen ) {
                for ( int j = 0; j < 32; j++ ) {
                    if ( (jj_la1_0[i] & (1 << j)) != 0 ) {
                        la1tokens[j] = true;
                    }
                    if ( (jj_la1_1[i] & (1 << j)) != 0 ) {
                        la1tokens[32 + j] = true;
                    }
                    if ( (jj_la1_2[i] & (1 << j)) != 0 ) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for ( int i = 0; i < 90; i++ ) {
            if ( la1tokens[i] ) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for ( int i = 0; i < jj_expentries.size(); i++ ) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for ( int i = 0; i < 43; i++ ) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if ( p.gen > jj_gen ) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch ( i ) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3_16();
                                break;
                            case 16:
                                jj_3_17();
                                break;
                            case 17:
                                jj_3_18();
                                break;
                            case 18:
                                jj_3_19();
                                break;
                            case 19:
                                jj_3_20();
                                break;
                            case 20:
                                jj_3_21();
                                break;
                            case 21:
                                jj_3_22();
                                break;
                            case 22:
                                jj_3_23();
                                break;
                            case 23:
                                jj_3_24();
                                break;
                            case 24:
                                jj_3_25();
                                break;
                            case 25:
                                jj_3_26();
                                break;
                            case 26:
                                jj_3_27();
                                break;
                            case 27:
                                jj_3_28();
                                break;
                            case 28:
                                jj_3_29();
                                break;
                            case 29:
                                jj_3_30();
                                break;
                            case 30:
                                jj_3_31();
                                break;
                            case 31:
                                jj_3_32();
                                break;
                            case 32:
                                jj_3_33();
                                break;
                            case 33:
                                jj_3_34();
                                break;
                            case 34:
                                jj_3_35();
                                break;
                            case 35:
                                jj_3_36();
                                break;
                            case 36:
                                jj_3_37();
                                break;
                            case 37:
                                jj_3_38();
                                break;
                            case 38:
                                jj_3_39();
                                break;
                            case 39:
                                jj_3_40();
                                break;
                            case 40:
                                jj_3_41();
                                break;
                            case 41:
                                jj_3_42();
                                break;
                            case 42:
                                jj_3_43();
                                break;
                        }
                    }
                    p = p.next;
                } while ( p != null );
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while ( p.gen > jj_gen ) {
            if ( p.next == null ) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
