CompileUnit ::= FileAnnotation PackageDef ImportDefList ClassDefList

FileAnnotation ::= '[' AnnotationList ']'

AnnotationList ::= Annotation AnnotationList
                 | Annotation
                 | /* empty */

Annotation ::= '@' TypeName

TypeName ::= Select

Select ::= JavaIdent '.' Select
         | JavaIdent

AllIdent ::= JavaIdent
           | OperatorIdent

JavaIdent ::= IDENTIFIER

OperatorIdent ::= '+'
                | '-'
                | '*'
                | '/'
                | '%'
                ...

PackageDef ::= 'package' PackageName

PackageName ::= Select

ImportDefList ::= ImportDef ImportDefList
                | ImportDef
                |

ImportDef ::= SimpleImportDef
            | AliasImportDef
            | GroupImportDef
            |

SimpleImportDef ::= 'import' TypeName

AliasImportDef ::= 'import' TypeName '->' JavaIdent

GroupImportDef ::= 'import' PackageName '.' '{' JavaIdentList '}'

JavaIdentList ::= JavaIdent ',' JavaIdentList
            | JavaIdent

ClassDefList ::= ClassDef ClassDefList
               | ClassDef
               |

ClassDef ::= SimpleClassDef
           | AnnotationDef
           | InterfaceDef
           | EnumDef
           | ADTClassDef

SimpleClassDef ::= AnnotationList ClassModifierList 'class' JavaIdent AutoDeclBlock '<' SuperTypeOrInterface InterfaceList SimpleClassBody

ClassModifierList ::= ClassModifier ClassModifierList
                    | ClassModifier
                    |

ClassModifier ::= BasicAccessModifier
                | 'abstract'
                | 'final'
                | 'static'
                | 'sealed'
                | 'extend'

AutoDeclBlock ::= '(' AutoDeclList ')'
               | 

AutoDeclList ::= AutoDecl ',' AutoDeclList
               | AutoDecl

AutoDecl ::= AnnotationList JavaIdent SimpleOrFunctionType

SuperTypeOrInterface ::= SimpleType

SimpleOrFunctionType ::= SimpleType
                       | FunctionType

SimpleType ::= TypeAnnotationList TypeName TypeArgumentBlock

TypeAnnotationList ::= Annotation AnnotationList
                     | Annotation
                     |

TypeArgumentBlock ::= '[' TypeArgumentList ']'

TypeArgumentList ::= TypeArgument ',' TypeArgumentList
                   | TypeArgument

TypeArgument ::= SimpleType
               | WildCard
               | TypeExpr

WildCard ::= '*' WildCardBounds 

WildCardBounds ::= ExtendsBoundType
                 | SuperBoundType
                 |

ExtendsBoundType ::= '<:' SimpleType

SuperBoundType ::= '>:' SimpleType

TypeExpr ::= AndExprType '|' AndExprType

AndExprType ::= PrimaryType '&' PrimaryExprType

PrimaryExprType ::= SimpleType
                  | '(' TypeExpr ')'

InterfaceList ::= ',' InterfaceList1
                |

InterfaceList1 ::= SimpleType ',' InterfaceList1
                 | SimpleType

SimpleClassBody ::= '{' StatementOrExprList '}'
                  |

StatementOrExprList ::= Statement StatementOrExprList
                      | Expr StatementOrExprList
                      |

Statement ::= ClassDef
            | FieldDef
            | MethodDef

FieldDef ::= AnnotationList FieldModifierList 'def' Ident SimpleOrFunctionType Initializer

Initializer ::= EQ Expr
              |

Expr ::= LambdaExpression 
       | SimpleExpr

LambdaExpression ::= '(' BindingList ')' '->' Expr
                   | Ident '->' Expr
                   | '_' '->' Expr

BindingList ::= Binding ',' BindingList
              | Binding

Binding ::= Ident ':' SimpleOrFunctionType
          | Ident

SimpleExpr ::= IfExpr
             | WhileExpr
             | TimesExpr
             | ThrowExpr
             | ReturnExpr
             | AssignmentExpr
             | PostfixExpr
             | BlockExpr

IfExpr ::= 'if' '(' Expr ')' Expr IfElseExpr

IfElseBlock ::= 'else' Expr
              |

WhileExpr ::= 'while' '(' Expr ')' Expr

TimesExpr ::= RangeExpr Expr

RangeExpr ::= Expr '..' Expr

ThrowExpr ::= 'throw' Expr

ReturnExpr ::= 'return' Expr
             | 'return'

AssignmentExpr ::= OrExpr '.' Ident '=' Expr
                 | BlockExpr '.' Ident '=' Expr

OrExpr ::= AndExpr
         | OrExpr '|' AndExpr

AndExpr ::= EqualityExpr
          | AndExpr '&' EqualityExpr

EqualityExpr ::= RelationalExpr
               | EqualityExpr '==' RelationalExpr
               | EqualityExpr '!=' RelationalExpr

RelationalExpr ::= AdditiveExpr
                 | RelationalExpr '<' AdditiveExpr
                 | RelationalExpr '>' AdditiveExpr
                 | RelationalExpr '<=' AdditiveExpr
                 | RelationalExpr '>=' AdditiveExpr

AdditiveExpr ::= MultiplicativeExpr
               | AdditiveExpr '+' MultiplicativeExpr
               | AdditiveExpr '-' MultiplicativeExpr

MultiplicativeExpr ::= UnaryExpr
                     | MultiplicativeExpr '*' UnaryExpr
                     | MultiplicativeExpr '/' UnaryExpr
                     | MultiplicativeExpr '%' UnaryExpr
                     | MultiplicativeExpr '/?' UnaryExpr
                     | MultiplicativeExpr '%?' UnaryExpr

UnaryExpr ::= PrimaryExpr
            | '+' UnaryExpr
            | '-' UnaryExpr
            | '~' UnaryExpr
            | '!' UnaryExpr

PrimaryExpr ::= Ident
              | Literal
              | ClassLiteral
              | 'this'
              | TypeName '.' 'this'
              | '(' Expr ')'
              | MethodInvocation
              | MethodRef
              | NewObject

Literal ::= IntLiteral
          | FloatLiteral
          | DoubleLiteral
          | StringLiteral

ClassLiteral ::= PrimaryExpr '.' 'class'

MethodInvocation ::= Select '(' ArgumentList ')'

MethodDef ::= AnnotationList MethodModifierList 'func' Ident '(' ArgumentList ')' ReturnType MethodBlock

MethodModifierList ::= 'public'
                     | 'protected'
                     | 'private'
                     | 'final'
                     | 'abstract'
                     | 'static'
                     |

ReturnType ::= SimpleOrFunctionType
             |

MethodBlock ::= '{' StatementOrExprList '}'

ArgumentList ::= Argument ',' ArgumentList
               | Argument
               |

Argument ::= Ident SimpleOrFunctionType
           | Ident
