package karaffe.compiler;

import java.util.List;
import java.util.LinkedList;

parser code {:
    
    public Parser(Lexer lexer) {
        super(lexer);
    }

    public Program program() throws Exception{
        return (Program)this.parse().value;
    }

:}

terminal        PACKAGE;
terminal        LBRACE;
terminal        RBRACE;
terminal        LPAREN;
terminal        RPAREN;
terminal        COMMA;
terminal        IMPORT;
terminal        CLASS;
terminal        DOT;
terminal        DEF;
terminal        EQ;
terminal        PLUS;
terminal        MINUS;
terminal        STAR;
terminal        SLASH;
terminal        SEMICOLON;
terminal String IDENTIFIER;
terminal String INT_LITERAL;
terminal String STRING_LITERAL;
terminal String COMMENT;

non terminal Program                    CompileUnit;
non terminal PackageDef                 PackageDef;
non terminal List<ImportDef>            ImportDefList;
non terminal List<ClassDef>             ClassDefList;
non terminal ImportDef                  ImportDef;
non terminal List<Statement>            ClassBodyList;
non terminal ClassDef                   ClassDef;
non terminal Statement                  ClassBody;
non terminal FieldDef                   FieldDef;
non terminal MethodDef                  MethodDef;
non terminal List<Object>               MethodBodyList;
non terminal Object                     MethodBody;
non terminal LocalVarDef                LocalVarDef;
non terminal Identifier                 Ident;
non terminal List<Identifier>           IdentList;
non terminal List<Expression>           ExprList;
non terminal List<Argument>             ArgList,ArgListOpt;
non terminal Argument                   Arg;
non terminal Expression                 Expr,ExprPart,Expr1,Expr2,MethodInvocation,Primary,Primary1,Literal;

precedence left PLUS, MINUS, STAR, SLASH;

start with CompileUnit;

CompileUnit ::= PackageDef:p ImportDefList:il ClassDefList:c
                    {:RESULT = new Program(p, il, c);:}
              ;

PackageDef ::= PACKAGE IdentList:l
                {:RESULT = Stmt.packageDef(l);:}
             |
                {:RESULT = PackageDef.none();:}
             ;

ImportDefList ::= ImportDefList:list ImportDef:d
                    {:list.add(d); RESULT = list;:}
                |
                    {:RESULT = new LinkedList<>();:}
                ;

ClassDefList ::= ClassDefList:list ClassDef:c
                    {:list.add(c); RESULT = list;:}
               |
                    {:RESULT = new LinkedList<>();:}
               ;

ImportDef ::= IMPORT IdentList:il
                {:RESULT = Stmt.importDef(il); :}
            ;

ClassDef ::= CLASS Ident:i LBRACE ClassBodyList:l RBRACE
                {:RESULT = Stmt.classDef(i, l);:}
           ;

ClassBodyList ::= ClassBodyList:list ClassBody:c
                    {:list.add(c); RESULT = list;:}
                |
                    {:RESULT = new LinkedList<>();:}
                ;

ClassBody ::= FieldDef:f
                {:RESULT = f;:}
            | ClassDef:c
                {:RESULT = c;:}
            | MethodDef:m
                {:RESULT = m;:}
            ;

FieldDef ::= DEF Ident:id Ident:type EQ Expr:e
                {:RESULT = Stmt.fieldDef(id, type, e);:}
           ;

MethodDef ::= DEF Ident:id LPAREN RPAREN Ident:retType LBRACE MethodBodyList:b RBRACE
                {:RESULT = Stmt.methodDef(id, retType, b);:}
            ;

MethodBodyList ::= MethodBodyList:list MethodBody:b
                    {:list.add(b); RESULT = list;:}
                 |
                    {:RESULT = new LinkedList<>();:}
                 ;

MethodBody ::= LocalVarDef:l
                {:RESULT = l;:}
             | ClassDef:c
                {:RESULT = c;:}
             | Expr:e
                {:RESULT = e;:}
             ;

LocalVarDef ::= DEF Ident:id Ident:type EQ Expr:e
                    {:RESULT = Stmt.localVarDef(id, type, e);:}
              ;

IdentList ::= IdentList:list DOT Ident:id
                {:list.add(id); RESULT = list;:}
            | Ident:id
                {:RESULT = new LinkedList<>(); RESULT.add(id);:}
            ;

Ident ::= IDENTIFIER:id
            {:RESULT = Expr.ident(id);:}
        ;

Expr ::= Expr1:e
            {:RESULT = e;:}
       ;

Expr1 ::= Expr1:e1 PLUS Expr2:e2
            {:RESULT = Expr.add(e1, e2); :}
        | Expr1:e1 MINUS Expr2:e2
            {:RESULT = Expr.sub(e1, e2); :}
        | Expr2:e
            {:RESULT = e;:}
        ;

Expr2 ::= Expr2:e1 STAR Primary1:e2
            {:RESULT = Expr.mul(e1, e2); :}
        | Expr2:e1 SLASH Primary1:e2
            {:RESULT = Expr.div(e1, e2); :}
        | Primary1:e
            {:RESULT = e;:}
        ;

Primary1 ::= Ident:i
            {:RESULT = Expr.ident(i);:}
           | Primary:e
            {:RESULT = e;:}
           ;

Primary ::= Literal:l
            {:RESULT = l;:}
          | MINUS Primary:e
            {:RESULT = Expr.unaryMinus(e);:}
          | LPAREN Expr:e RPAREN
            {:RESULT = e;:}
          | MethodInvocation:e
            {:RESULT = e;:}
          ;

Literal ::= INT_LITERAL:i
            {:RESULT = Expr.intLiteral(i);:}
          | STRING_LITERAL:s
            {:RESULT = Expr.stringLiteral(s);:}
          ; 

MethodInvocation ::= Expr:target LPAREN ArgListOpt RPAREN
                   ;

ArgListOpt ::= ArgList
             |
             ;

ArgList ::= Arg COMMA ArgList
          | Arg
          ;

Arg ::= Expr Ident
      ;
