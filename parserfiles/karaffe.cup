package karaffe.compiler.phase.parser;

import karaffe.compiler.phase.parser.Lexer.SymInfo; 
import karaffe.compiler.tree.*;
import java.util.ArrayList;
import java.util.List;

parser code {:

    private final List<ErrorNode> errorList = new ArrayList<>();
    private Lexer lexer;

    Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public static void main(String[] args) throws java.lang.Exception {
        if(args.length != 1) {
            System.out.println("Usage: $command filename");
        }
        Parser parser = new Parser(new Lexer(new java.io.FileReader(args[0])));
        parser.parse();
    }

    public CompileUnit compileUnit() throws Exception{
        return (CompileUnit)this.parse().value;
    }

    public List<ErrorNode> errors() {
        return errorList;
    }

:}

terminal 
IDENTIFIER,
DOT,
PACKAGE;

non terminal
AmbiguousName,
CompileUnit,
Identifier,
PackageDecl;

CompileUnit ::= PackageDecl:p
                    {:RESULT = new CompileUnit((AST)p);:}
              ;

PackageDecl ::= PACKAGE AmbiguousName:name
                    {:RESULT = new PackageDecl((AmbiguousName)name);:}
              | error:err PACKAGE:p
                    {:
                        ErrorNode node = new ErrorNode(lexer.line(), lexer.column(), "PackageDecl.Before.Package",err,p);
                        errorList.add(node);
                        RESULT = node;
                    :}
              | PACKAGE:p error:err
                    {:
                        ErrorNode node = new ErrorNode(lexer.line(), lexer.column(), "PackageDecl.After.Package",p,err);
                        errorList.add(node);
                        RESULT = node;
                    :}
              | PACKAGE:p IDENTIFIER:id error:err
                    {:
                        ErrorNode node = new ErrorNode(lexer.line(), lexer.column(), "PackageDecl.After.Identifier",p,id,err);
                        errorList.add(node);
                        RESULT = node;
                    :}
              ;

AmbiguousName ::= AmbiguousName:name DOT Identifier:id
                    {:RESULT = new AmbiguousName((AmbiguousName)name, (Identifier)id);:}
                | Identifier:id
                    {:RESULT = new AmbiguousName((Identifier)id);:}
                ;

Identifier ::= IDENTIFIER:id
                    {:
                        SymInfo symInfo = (SymInfo)id;
                        RESULT = new Identifier(symInfo, (String)symInfo.value().get());
                    :}
             ;
