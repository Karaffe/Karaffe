package karaffe.compiler.phase.parser;

import karaffe.compiler.tree.*;
import karaffe.compiler.tree.imports.*;
import java.util.ArrayList;
import java.util.List;

parser code {:

    private final List<ErrorNode> errorList = new ArrayList<>();
    private Lexer lexer;

    Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public static void main(String[] args) throws java.lang.Exception {
        if(args.length != 1) {
            System.out.println("Usage: $command filename");
        }
        Parser parser = new Parser(new Lexer(new java.io.FileReader(args[0])));
        parser.parse();
    }

    public CompileUnit compileUnit() throws Exception{
        return (CompileUnit)this.parse().value;
    }

    public List<ErrorNode> errors() {
        return errorList;
    }

:}

terminal 
ARROW,
COMMA,
DOT,
IDENTIFIER,
IMPORT,
LBRACE,
RBRACE,
PACKAGE;

non terminal
AliasImport,
AmbiguousName,
BlockImport,
BlockImportBody,
BlockImportBodyList,
CompileUnit,
GroupImport,
Identifier,
IdentifierList,
ImportDecl,
ImportDeclList,
SimpleImport,
PackageDecl;

CompileUnit ::= PackageDecl:p ImportDeclList:i
                    {:RESULT = new CompileUnit(p, i);:}
              ;

PackageDecl ::= PACKAGE AmbiguousName:name
                    {:RESULT = new PackageDecl(name);:}
              | error:err PACKAGE:p
                    {:
                        ErrorNode node = new ErrorNode(lexer.line(), lexer.column(), "PackageDecl.Before.Package",err,p);
                        errorList.add(node);
                        RESULT = node;
                    :}
              | PACKAGE:p error:err
                    {:
                        ErrorNode node = new ErrorNode(lexer.line(), lexer.column(), "PackageDecl.After.Package",p,err);
                        errorList.add(node);
                        RESULT = node;
                    :}
              | PACKAGE:p IDENTIFIER:id error:err
                    {:
                        ErrorNode node = new ErrorNode(lexer.line(), lexer.column(), "PackageDecl.After.Identifier",p,id,err);
                        errorList.add(node);
                        RESULT = node;
                    :}
              | 
              ;

AmbiguousName ::= AmbiguousName:name DOT Identifier:id
                    {:RESULT = new AmbiguousName(name, id);:}
                | Identifier:id
                    {:RESULT = new AmbiguousName(id);:}
                ;

Identifier ::= IDENTIFIER:id
                    {:
                        RESULT = new Identifier(id);
                    :}
             ;

ImportDeclList ::= ImportDecl:import_ ImportDeclList:importList
                    {:RESULT = new ImportDeclList(import_,importList);:}
                 |
                 ;

ImportDecl ::= SimpleImport:simpleImport
                {:RESULT = new ImportDecl(simpleImport);:}
             | AliasImport:aliasImport
                {:RESULT = new ImportDecl(aliasImport);:}
             | GroupImport:groupImport
                {:RESULT = new ImportDecl(groupImport);:}
             | BlockImport:blockImport
                {:RESULT = new ImportDecl(blockImport);:}
             ;

SimpleImport ::= IMPORT AmbiguousName:name 
                    {:RESULT = new SimpleImport(name);:}
               ;

AliasImport ::= IMPORT AmbiguousName:name ARROW Identifier:id
                    {:RESULT = new AliasImport(name, id);:}
              ;

GroupImport ::= IMPORT AmbiguousName:name DOT LBRACE IdentifierList:idList RBRACE
                    {:RESULT = new GroupImport(name,idList);:}
              ;

IdentifierList ::= Identifier:id
                    {:RESULT = new IdentifierList(id);:}
                 | Identifier:id COMMA IdentifierList:list
                    {:RESULT = new IdentifierList(id,list);:}
                 |
                 ;

BlockImport ::= IMPORT LBRACE BlockImportBodyList:list RBRACE
                    {:RESULT = new BlockImport(list);:}
              ;

BlockImportBodyList ::= BlockImportBody:body BlockImportBodyList:list
                            {:RESULT = new BlockImportBodyList(body,list);:}
                      |
                      ;

BlockImportBody ::= AmbiguousName:name
                        {:RESULT = new SimpleImport(name);:}
                  | AmbiguousName:name ARROW Identifier:id
                        {:RESULT = new AliasImport(name,id);:}
                  | AmbiguousName:name DOT LBRACE IdentifierList:idList RBRACE
                        {:RESULT = new GroupImport(name,idList);:}
                  ;
